# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from salesforce import models


class AcceptedEventRelation(models.Model):
    relation = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    event = models.ForeignKey('Event', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='acceptedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='acceptedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AcceptedEventRelation'
        verbose_name = 'Accepted Event Relation'
        verbose_name_plural = 'Accepted Event Relations'
        # keyPrefix = 'None'



class Account(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='account_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='Account Name')
    type = models.CharField(max_length=40, verbose_name='Account Type', choices=[('Analyst', 'Analyst'), ('Competitor', 'Mitbewerber'), ('Customer', 'Kunde'), ('Integrator', 'Integrator'), ('Investor', 'Investor'), ('Partner', 'Partner'), ('Press', 'Presse'), ('Prospect', 'Potenzieller Kunde'), ('Reseller', 'Wiederverkäufer'), ('Other', 'Andere')], blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='account_parent_set', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Account Phone', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Account Fax', blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(max_length=40, choices=[('Agriculture', 'Landwirtschaft'), ('Apparel', 'Bekleidung'), ('Banking', 'Bankwesen'), ('Biotechnology', 'Biotechnologie'), ('Chemicals', 'Chemie'), ('Communications', 'Kommunikation'), ('Construction', 'Bauwesen'), ('Consulting', 'Consulting'), ('Education', 'Bildungswesen'), ('Electronics', 'Elektronik'), ('Energy', 'Energie'), ('Engineering', 'Ingenieurwesen'), ('Entertainment', 'Unterhaltung'), ('Environmental', 'Umwelt'), ('Finance', 'Finanzen'), ('Food & Beverage', 'Nahrungsmittel & Getränke'), ('Government', 'Behörden'), ('Healthcare', 'Gesundheitswesen'), ('Hospitality', 'Gastronomie'), ('Insurance', 'Versicherungswesen'), ('Machinery', 'Maschinenbau'), ('Manufacturing', 'Fertigung'), ('Media', 'Medien'), ('Not For Profit', 'Gemeinnützig'), ('Other', 'Andere'), ('Recreation', 'Freizeit'), ('Retail', 'Handel'), ('Shipping', 'Spedition'), ('Technology', 'Technologie'), ('Telecommunications', 'Telekommunikation'), ('Transportation', 'Transportwesen'), ('Utilities', 'Versorgungseinrichtungen')], blank=True, null=True)
    annual_revenue = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    description = models.TextField(verbose_name='Account Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='account_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='account_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='account_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_company_id = models.CharField(max_length=20, verbose_name='Jigsaw Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account_source = models.CharField(max_length=40, choices=[('Advertisement', 'Werbung'), ('Employee Referral', 'Mitarbeiterempfehlung'), ('External Referral', 'Externe Empfehlung'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Intern'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Messe'), ('Web', 'Web'), ('Word of mouth', 'Mundpropaganda'), ('Other', 'Andere')], blank=True, null=True)
    sic_desc = models.CharField(max_length=80, verbose_name='SIC Description', blank=True, null=True)
    hochschule_ref = models.ForeignKey('self', models.DO_NOTHING, custom=True, related_name='account_hochschuleref_set', blank=True, null=True)
    immatrikulationsnummer = models.CharField(custom=True, max_length=255, verbose_name='Matriculation Number', blank=True, null=True)
    studiengebuehren_gesamt = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Tuition Fee Total', blank=True, null=True)
    geschlecht = models.CharField(custom=True, max_length=255, verbose_name='Gender', choices=[('weiblich', 'female'), ('männlich', 'male'), ('geschlechtsneutral', 'gender-neutral')], blank=True, null=True)
    geburtsort = models.CharField(custom=True, max_length=255, verbose_name='Place of Birth', blank=True, null=True)
    geburtsdatum = models.DateField(custom=True, verbose_name='Date of Birth', blank=True, null=True)
    geburtsland = models.CharField(custom=True, max_length=255, verbose_name='Country of Birth', choices=[('Abchasien', 'Abchasien'), ('Afghanistan', 'Afghanistan'), ('Ägypten', 'Ägypten'), ('Albanien', 'Albanien'), ('Algerien', 'Algerien'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Antigua und Barbuda', 'Antigua und Barbuda'), ('Äquatorialguinea', 'Äquatorialguinea'), ('Argentinien', 'Argentinien'), ('Armenien', 'Armenien'), ('Aserbaidschan', 'Aserbaidschan'), ('Äthiopien', 'Äthiopien'), ('Australien', 'Australien'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Bangladesch', 'Bangladesch'), ('Barbados', 'Barbados'), ('Belgien', 'Belgien'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bergkarabach', 'Bergkarabach'), ('Bhutan', 'Bhutan'), ('Bolivien', 'Bolivien'), ('Bosnien und Herzegowina', 'Bosnien und Herzegowina'), ('Botswana', 'Botswana'), ('Brasilien', 'Brasilien'), ('Brunei', 'Brunei'), ('Bulgarien', 'Bulgarien'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Chile', 'Chile'), ('Republik China', 'Republik China'), ('Volksrepublik China', 'Volksrepublik China'), ('Cookinseln', 'Cookinseln'), ('Costa Rica', 'Costa Rica'), ('Dänemark', 'Dänemark'), ('Deutschland', 'Deutschland'), ('Dominica', 'Dominica'), ('Dominikanische Republik', 'Dominikanische Republik'), ('Dschibuti', 'Dschibuti'), ('Ecuador', 'Ecuador'), ('El Salvador', 'El Salvador'), ('Elfenbeinküste', 'Elfenbeinküste'), ('Eritrea', 'Eritrea'), ('Estland', 'Estland'), ('Fidschi', 'Fidschi'), ('Finnland', 'Finnland'), ('Frankreich', 'Frankreich'), ('Gabun', 'Gabun'), ('Gambia', 'Gambia'), ('Georgien', 'Georgien'), ('Ghana', 'Ghana'), ('Grenada', 'Grenada'), ('Griechenland', 'Griechenland'), ('Guatemala', 'Guatemala'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Honduras', 'Honduras'), ('Indien', 'Indien'), ('Indonesien', 'Indonesien'), ('Irak', 'Irak'), ('Iran', 'Iran'), ('Irland', 'Irland'), ('Island', 'Island'), ('Israel', 'Israel'), ('Italien', 'Italien'), ('Jamaika', 'Jamaika'), ('Japan', 'Japan'), ('Jemen', 'Jemen'), ('Jordanien', 'Jordanien'), ('Kambodscha', 'Kambodscha'), ('Kamerun', 'Kamerun'), ('Kanada', 'Kanada'), ('Kap Verde', 'Kap Verde'), ('Kasachstan', 'Kasachstan'), ('Katar', 'Katar'), ('Kenia', 'Kenia'), ('Kirgisistan', 'Kirgisistan'), ('Kiribati', 'Kiribati'), ('Kolumbien', 'Kolumbien'), ('Komoren', 'Komoren'), ('Kongo, Demokratische Republik', 'Kongo, Demokratische Republik'), ('Kongo, Republik', 'Kongo, Republik'), ('Korea, Nord', 'Korea, Nord'), ('Korea, Süd', 'Korea, Süd'), ('Kosovo', 'Kosovo'), ('Kroatien', 'Kroatien'), ('Kuba', 'Kuba'), ('Kuwait', 'Kuwait'), ('Laos', 'Laos'), ('Lesotho', 'Lesotho'), ('Lettland', 'Lettland'), ('Libanon', 'Libanon'), ('Liberia', 'Liberia'), ('Libyen', 'Libyen'), ('Liechtenstein', 'Liechtenstein'), ('Litauen', 'Litauen'), ('Luxemburg', 'Luxemburg'), ('Madagaskar', 'Madagaskar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Malediven', 'Malediven'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marokko', 'Marokko'), ('Marshallinseln', 'Marshallinseln'), ('Mauretanien', 'Mauretanien'), ('Mauritius', 'Mauritius'), ('Mazedonien', 'Mazedonien'), ('Mexiko', 'Mexiko'), ('Mikronesien', 'Mikronesien'), ('Moldawien', 'Moldawien'), ('Monaco', 'Monaco'), ('Mongolei', 'Mongolei'), ('Montenegro', 'Montenegro'), ('Mosambik', 'Mosambik'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Nepal', 'Nepal'), ('Neuseeland', 'Neuseeland'), ('Nicaragua', 'Nicaragua'), ('Niederlande', 'Niederlande'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Nordzypern', 'Nordzypern'), ('Norwegen', 'Norwegen'), ('Oman', 'Oman'), ('Österreich', 'Österreich'), ('Osttimor / Timor-Leste', 'Osttimor / Timor-Leste'), ('Pakistan', 'Pakistan'), ('Palästina', 'Palästina'), ('Palau', 'Palau'), ('Panama', 'Panama'), ('Papua-Neuguinea', 'Papua-Neuguinea'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippinen', 'Philippinen'), ('Polen', 'Polen'), ('Portugal', 'Portugal'), ('Ruanda', 'Ruanda'), ('Rumänien', 'Rumänien'), ('Russland', 'Russland'), ('Salomonen', 'Salomonen'), ('Sambia', 'Sambia'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('São Tomé und Príncipe', 'São Tomé und Príncipe'), ('Saudi-Arabien', 'Saudi-Arabien'), ('Schweden', 'Schweden'), ('Schweiz', 'Schweiz'), ('Senegal', 'Senegal'), ('Serbien', 'Serbien'), ('Seychellen', 'Seychellen'), ('Sierra Leone', 'Sierra Leone'), ('Simbabwe', 'Simbabwe'), ('Singapur', 'Singapur'), ('Slowakei', 'Slowakei'), ('Slowenien', 'Slowenien'), ('Somalia', 'Somalia'), ('Somaliland', 'Somaliland'), ('Spanien', 'Spanien'), ('Sri Lanka', 'Sri Lanka'), ('St. Kitts und Nevis', 'St. Kitts und Nevis'), ('St. Lucia', 'St. Lucia'), ('St. Vincent und die Grenadinen', 'St. Vincent und die Grenadinen'), ('Südafrika', 'Südafrika'), ('Sudan', 'Sudan'), ('Südossetien', 'Südossetien'), ('Südsudan', 'Südsudan'), ('Suriname', 'Suriname'), ('Swasiland', 'Swasiland'), ('Syrien', 'Syrien'), ('Tadschikistan', 'Tadschikistan'), ('Tansania', 'Tansania'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tonga', 'Tonga'), ('Transnistrien', 'Transnistrien'), ('Trinidad und Tobago', 'Trinidad und Tobago'), ('Tschad', 'Tschad'), ('Tschechien', 'Tschechien'), ('Tunesien', 'Tunesien'), ('Türkei', 'Türkei'), ('Turkmenistan', 'Turkmenistan'), ('Tuvalu', 'Tuvalu'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('Ungarn', 'Ungarn'), ('Uruguay', 'Uruguay'), ('Usbekistan', 'Usbekistan'), ('Vanuatu', 'Vanuatu'), ('Vatikanstadt', 'Vatikanstadt'), ('Venezuela', 'Venezuela'), ('Vereinigte Arabische Emirate', 'Vereinigte Arabische Emirate'), ('Vereinigte Staaten', 'Vereinigte Staaten'), ('Vereinigtes Königreich', 'Vereinigtes Königreich'), ('Vietnam', 'Vietnam'), ('Weißrussland', 'Weißrussland'), ('Westsahara', 'Westsahara'), ('Zentral\xadafrikanische Republik', 'Zentral\xadafrikanische Republik'), ('Zypern', 'Zypern')], blank=True, null=True)
    staatsangehoerigkeit = models.CharField(custom=True, max_length=255, verbose_name='Nationality', choices=[('afghanisch', 'afghanisch'), ('ägyptisch', 'ägyptisch'), ('albanisch', 'albanisch'), ('algerisch', 'algerisch'), ('andorranisch', 'andorranisch'), ('angolanisch', 'angolanisch'), ('antiguanisch', 'antiguanisch'), ('äquatorialguineisch', 'äquatorialguineisch'), ('argentinisch', 'argentinisch'), ('armenisch', 'armenisch'), ('aserbaidschanisch', 'aserbaidschanisch'), ('äthiopisch', 'äthiopisch'), ('australisch', 'australisch'), ('bahamaisch', 'bahamaisch'), ('bahrainisch', 'bahrainisch'), ('bangladeschisch', 'bangladeschisch'), ('barbadisch', 'barbadisch'), ('belgisch', 'belgisch'), ('belizisch', 'belizisch'), ('beninisch', 'beninisch'), ('bhutanisch', 'bhutanisch'), ('bolivianisch', 'bolivianisch'), ('bosnisch-herzegowinisch', 'bosnisch-herzegowinisch'), ('botsuanisch', 'botsuanisch'), ('brasilianisch', 'brasilianisch'), ('bruneiisch', 'bruneiisch'), ('bulgarisch', 'bulgarisch'), ('burkinisch', 'burkinisch'), ('burundisch', 'burundisch'), ('cabo-verdisch', 'cabo-verdisch'), ('chilenisch', 'chilenisch'), ('chinesisch', 'chinesisch'), ('costa-ricanisch', 'costa-ricanisch'), ('ivorisch', 'ivorisch'), ('dänisch', 'dänisch'), ('deutsch', 'deutsch'), ('dominikanisch', 'dominikanisch'), ('dschibutisch', 'dschibutisch'), ('ecuadorianisch', 'ecuadorianisch'), ('salvadorianisch', 'salvadorianisch'), ('eritreisch', 'eritreisch'), ('estnisch', 'estnisch'), ('fidschianisch', 'fidschianisch'), ('finnisch', 'finnisch'), ('französisch', 'französisch'), ('gabunisch', 'gabunisch'), ('gambisch', 'gambisch'), ('georgisch', 'georgisch'), ('ghanaisch', 'ghanaisch'), ('grenadisch', 'grenadisch'), ('griechisch', 'griechisch'), ('guatemaltekisch', 'guatemaltekisch'), ('guineisch', 'guineisch'), ('guinea-bissauisch', 'guinea-bissauisch'), ('guyanisch', 'guyanisch'), ('haitianisch', 'haitianisch'), ('honduranisch', 'honduranisch'), ('indisch', 'indisch'), ('indonesisch', 'indonesisch'), ('irakisch', 'irakisch'), ('iranisch', 'iranisch'), ('irisch', 'irisch'), ('isländisch', 'isländisch'), ('israelisch', 'israelisch'), ('italienisch', 'italienisch'), ('jamaikanisch', 'jamaikanisch'), ('japanisch', 'japanisch'), ('jemenitisch', 'jemenitisch'), ('jordanisch', 'jordanisch'), ('kambodschanisch', 'kambodschanisch'), ('kamerunisch', 'kamerunisch'), ('kanadisch', 'kanadisch'), ('kasachisch', 'kasachisch'), ('katarisch', 'katarisch'), ('kenianisch', 'kenianisch'), ('kirgisisch', 'kirgisisch'), ('kiribatisch', 'kiribatisch'), ('kolumbianisch', 'kolumbianisch'), ('komorisch', 'komorisch'), ('kongolesisch', 'kongolesisch'), ('der Demokratischen Republik Kongo', 'der Demokratischen Republik Kongo'), ('der Demokratischen Volksrepublik Korea', 'der Demokratischen Volksrepublik Korea'), ('der Republik Korea', 'der Republik Korea'), ('kosovarisch', 'kosovarisch'), ('kroatisch', 'kroatisch'), ('kubanisch', 'kubanisch'), ('kuwaitisch', 'kuwaitisch'), ('laotisch', 'laotisch'), ('lesothisch', 'lesothisch'), ('lettisch', 'lettisch'), ('libanesisch', 'libanesisch'), ('liberianisch', 'liberianisch'), ('libysch', 'libysch'), ('liechtensteinisch', 'liechtensteinisch'), ('litauisch', 'litauisch'), ('luxemburgisch', 'luxemburgisch'), ('madagassisch', 'madagassisch'), ('malawisch', 'malawisch'), ('malaysisch', 'malaysisch'), ('maledivisch', 'maledivisch'), ('malisch', 'malisch'), ('maltesisch', 'maltesisch'), ('marokkanisch', 'marokkanisch'), ('marshallisch', 'marshallisch'), ('mauretanisch', 'mauretanisch'), ('mauritisch', 'mauritisch'), ('mazedonisch', 'mazedonisch'), ('mexikanisch', 'mexikanisch'), ('mikronesisch', 'mikronesisch'), ('moldauisch', 'moldauisch'), ('monegassisch', 'monegassisch'), ('mongolisch', 'mongolisch'), ('montenegrinisch', 'montenegrinisch'), ('mosambikanisch', 'mosambikanisch'), ('myanmarisch', 'myanmarisch'), ('namibisch', 'namibisch'), ('nauruisch', 'nauruisch'), ('nepalesisch', 'nepalesisch'), ('neuseeländisch', 'neuseeländisch'), ('nicaraguanisch', 'nicaraguanisch'), ('niederländisch', 'niederländisch'), ('nigrisch', 'nigrisch'), ('nigerianisch', 'nigerianisch'), ('norwegisch', 'norwegisch'), ('omanisch', 'omanisch'), ('österreichisch', 'österreichisch'), ('pakistanisch', 'pakistanisch'), ('palauisch', 'palauisch'), ('panamaisch', 'panamaisch'), ('papua-neuguineisch', 'papua-neuguineisch'), ('paraguayisch', 'paraguayisch'), ('peruanisch', 'peruanisch'), ('philippinisch', 'philippinisch'), ('polnisch', 'polnisch'), ('portugiesisch', 'portugiesisch'), ('ruandisch', 'ruandisch'), ('rumänisch', 'rumänisch'), ('russisch', 'russisch'), ('salomonisch', 'salomonisch'), ('sambisch', 'sambisch'), ('samoanisch', 'samoanisch'), ('san-marinesisch', 'san-marinesisch'), ('são-toméisch', 'são-toméisch'), ('saudi-arabisch', 'saudi-arabisch'), ('schwedisch', 'schwedisch'), ('schweizerisch', 'schweizerisch'), ('senegalesisch', 'senegalesisch'), ('serbisch', 'serbisch'), ('seychellisch', 'seychellisch'), ('sierra-leonisch', 'sierra-leonisch'), ('simbabwisch', 'simbabwisch'), ('singapurisch', 'singapurisch'), ('slowakisch', 'slowakisch'), ('slowenisch', 'slowenisch'), ('somalisch', 'somalisch'), ('spanisch', 'spanisch'), ('sri-lankisch', 'sri-lankisch'), ('von St. Kitts und Nevis', 'von St. Kitts und Nevis'), ('lucianisch', 'lucianisch'), ('vincentisch', 'vincentisch'), ('südafrikanisch', 'südafrikanisch'), ('sudanesisch', 'sudanesisch'), ('südsudanesisch', 'südsudanesisch'), ('surinamisch', 'surinamisch'), ('swasiländisch', 'swasiländisch'), ('syrisch', 'syrisch'), ('tadschikisch', 'tadschikisch'), ('tansanisch', 'tansanisch'), ('thailändisch', 'thailändisch'), ('von Timor-Leste', 'von Timor-Leste'), ('togoisch', 'togoisch'), ('tongaisch', 'tongaisch'), ('von Trinidad und Tobago', 'von Trinidad und Tobago'), ('tschadisch', 'tschadisch'), ('tschechisch', 'tschechisch'), ('tunesisch', 'tunesisch'), ('türkisch', 'türkisch'), ('turkmenisch', 'turkmenisch'), ('tuvaluisch', 'tuvaluisch'), ('ugandisch', 'ugandisch'), ('ukrainisch', 'ukrainisch'), ('ungarisch', 'ungarisch'), ('uruguayisch', 'uruguayisch'), ('usbekisch', 'usbekisch'), ('vanuatuisch', 'vanuatuisch'), ('vatikanisch', 'vatikanisch'), ('venezolanisch', 'venezolanisch'), ('der Vereinigten Arabischen Emirate', 'der Vereinigten Arabischen Emirate'), ('amerikanisch', 'amerikanisch'), ('britisch', 'britisch'), ('vietnamesisch', 'vietnamesisch'), ('weißrussisch', 'weißrussisch'), ('zentralafrikanisch', 'zentralafrikanisch'), ('zyprisch', 'zyprisch')], blank=True, null=True)
    kommunikationssprache = models.CharField(custom=True, max_length=255, verbose_name='Communication Language', choices=[('deutsch', 'deutsch'), ('englisch', 'englisch')], blank=True, null=True)
    unimailadresse = models.EmailField(custom=True, verbose_name='University Email Address', blank=True, null=True)
    zahlungskontakt_ref = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, related_name='account_zahlungskontaktref_set', blank=True, null=True)
    bicauto = models.CharField(custom=True, db_column='BICAuto__c', max_length=1300, verbose_name='BIC', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ibanauto = models.CharField(custom=True, db_column='IBANAuto__c', max_length=1300, verbose_name='IBAN', sf_read_only=models.READ_ONLY, blank=True, null=True)
    kontoinhaber_auto = models.CharField(custom=True, max_length=1300, verbose_name='Account Holder', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sepalastschriftmandat_erteilt_auto = models.BooleanField(custom=True, db_column='SEPALastschriftmandatErteiltAuto__c', verbose_name='SEPA Direct Debit Mandate Granted?', sf_read_only=models.READ_ONLY)
    status = models.CharField(custom=True, max_length=255, choices=[('Immatrikuliert', 'Enrolled'), ('Abgebrochen', 'Aborted'), ('Beurlaubt', 'Semester Off'), ('Auslandssemester', 'Semester abroad'), ('Exmatrikuliert', 'Exmatriculated')], blank=True, null=True)
    traegergesellschaft = models.CharField(custom=True, max_length=255, verbose_name='Private Sponsorship', blank=True, null=True)
    ibanhsauto = models.CharField(custom=True, db_column='IBANHSAuto__c', max_length=255, verbose_name='IBAN', blank=True, null=True)
    bichsauto = models.CharField(custom=True, db_column='BICHSAuto__c', max_length=255, verbose_name='BIC', blank=True, null=True)
    kontoinhaber_hsauto = models.CharField(custom=True, db_column='KontoinhaberHSAuto__c', max_length=255, verbose_name='Account Holder', blank=True, null=True)
    abwicklungsgebuhr_pro_einzug_pro_student = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Execution Fee / Direct Debit / Student', help_text='in Euro', blank=True, null=True)
    university_id = models.CharField(custom=True, max_length=30, verbose_name='University ID', sf_read_only=models.READ_ONLY)
    cspassword_token = models.CharField(custom=True, db_column='CSPasswordToken__c', max_length=100, verbose_name='CS Password Token', blank=True, null=True)
    university_id_ref = models.CharField(custom=True, max_length=1300, verbose_name='University ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    student_id_auto = models.CharField(custom=True, max_length=1300, verbose_name='Student ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    initial_review_completed_auto = models.BooleanField(custom=True, verbose_name='Initial review completed', sf_read_only=models.READ_ONLY)
    semester_fee_new = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Semester Fee', blank=True, null=True)
    semester_fee_ref = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Semester Fee', sf_read_only=models.READ_ONLY, blank=True, null=True)
    payment_options = models.CharField(custom=True, max_length=255, choices=[('Suspend payments', 'Suspend payments'), ('Continue regular payments', 'Continue regular payments'), ('Partial payments', 'Partial payments')], blank=True, null=True)
    recordcreated = models.BooleanField(custom=True, verbose_name='Record created', default=models.DEFAULTED_ON_CREATE)
    student_contact_ref = models.BooleanField(custom=True, verbose_name='StudentContact', sf_read_only=models.READ_ONLY)
    etsalutation = models.CharField(custom=True, db_column='ETSalutation__c', max_length=1300, verbose_name='ETSalutation', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etfirst_name_ref = models.CharField(custom=True, db_column='ETFirstNameRef__c', max_length=1300, verbose_name='ETFirstName', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etfull_name_ref = models.CharField(custom=True, db_column='ETFullNameRef__c', max_length=1300, verbose_name='ETFullName', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etsalutation_name_ref = models.CharField(custom=True, db_column='ETSalutationNameRef__c', max_length=1300, verbose_name='ETSalutationName', sf_read_only=models.READ_ONLY, blank=True, null=True)
    student_approved = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    initial_review_completed = models.BooleanField(custom=True, verbose_name='Initial review completed', default=models.DEFAULTED_ON_CREATE)
    cspassword_time = models.DateTimeField(custom=True, db_column='CSPasswordTime__c', verbose_name='CS Password Time', blank=True, null=True)
    password_change_requested = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    language_code_auto = models.CharField(custom=True, max_length=1300, verbose_name='Language Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cspassword_urlauto = models.CharField(custom=True, db_column='CSPasswordURLAuto__c', max_length=1300, verbose_name='CS Password URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    student_contact = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, related_name='account_studentcontact_set', blank=True, null=True)
    send_email_remider_auto = models.BooleanField(custom=True, verbose_name='Send Email Remider', default=models.DEFAULTED_ON_CREATE)
    create_task_for_staff = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    days_since_creation = models.DecimalField(custom=True, max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    stfirst_name = models.CharField(custom=True, db_column='STFirstName__c', max_length=1300, verbose_name='STFirstName', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Account'
        verbose_name = 'Account'
        verbose_name_plural = 'Accounts'
        # keyPrefix = '001'



class AccountContactRole(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Geschäftsbenutzer'), ('Decision Maker', 'Entscheidungsträger'), ('Economic Buyer', 'Einkäufer in der Wirtschaft'), ('Economic Decision Maker', 'Entscheidungsträger in der Wirtschaft'), ('Evaluator', 'Gutachter'), ('Executive Sponsor', 'Leitender Auftraggeber'), ('Influencer', 'Beeinflusser'), ('Technical Buyer', 'Technischer Einkäufer'), ('Other', 'Andere')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'AccountContactRole'
        verbose_name = 'Account Contact Role'
        verbose_name_plural = 'Account Contact Roles'
        # keyPrefix = '02Z'



class AccountFeed(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountFeed'
        verbose_name = 'Account Feed'
        verbose_name_plural = 'Account Feed'
        # keyPrefix = 'None'



class AccountHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('KontoinhaberHSAuto__c', 'Account Holder'), ('accountMerged', 'Account Merged'), ('Name', 'Account Name'), ('TextName', 'Account Name'), ('AccountNumber', 'Account Number'), ('Owner', 'Account Owner'), ('RecordType', 'Account Record Type'), ('Site', 'Account Site'), ('AccountSource', 'Account Source'), ('AnnualRevenue', 'Annual Revenue'), ('BICHSAuto__c', 'BIC'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('Kommunikationssprache__c', 'Communication Language'), ('Geburtsland__c', 'Country of Birth'), ('created', 'Created.'), ('accountCreatedFromLead', 'Created by lead convert'), ('CreateTaskForStaff__c', 'Create Task For Staff'), ('CSPasswordTime__c', 'CS Password Time'), ('CSPasswordToken__c', 'CS Password Token'), ('Jigsaw', 'Data.com Key'), ('Geburtsdatum__c', 'Date of Birth'), ('Description', 'Description'), ('NumberOfEmployees', 'Employees'), ('AbwicklungsgebuhrProEinzugProStudent__c', 'Execution Fee / Direct Debit / Student'), ('Fax', 'Fax'), ('feedEvent', 'Feed event'), ('Geschlecht__c', 'Gender'), ('IBANHSAuto__c', 'IBAN'), ('Industry', 'Industry'), ('InitialReviewCompleted__c', 'Initial review completed'), ('accountUpdatedByLead', 'Lead converted to Account'), ('personAccountUpdatedByLead', 'Lead converted to Person Account'), ('Immatrikulationsnummer__c', 'Matriculation Number'), ('Staatsangehoerigkeit__c', 'Nationality'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Ownership', 'Ownership'), ('Parent', 'Parent Account'), ('PasswordChangeRequested__c', 'Password Change Requested'), ('ZahlungskontaktRef__c', 'Payment Contact'), ('PaymentOptions__c', 'Payment Options'), ('Phone', 'Phone'), ('Geburtsort__c', 'Place of Birth'), ('Traegergesellschaft__c', 'Private Sponsorship'), ('Rating', 'Rating'), ('Recordcreated__c', 'Record created'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SemesterFeeNew__c', 'Semester Fee'), ('SendEmailRemiderAuto__c', 'Send Email Remider'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('Sic', 'SIC Code'), ('SicDesc', 'SIC Description'), ('Status__c', 'Status'), ('StudentApproved__c', 'Student Approved'), ('StudentContact__c', 'Student Contact'), ('TickerSymbol', 'Ticker Symbol'), ('StudiengebuehrenGesamt__c', 'Tuition Fee Total'), ('Type', 'Type'), ('HochschuleRef__c', 'University'), ('Unimailadresse__c', 'University Email Address'), ('Website', 'Website')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountHistory'
        verbose_name = 'Account History'
        verbose_name_plural = 'Account History'
        # keyPrefix = 'None'



class AccountPartner(models.Model):
    account_from = models.ForeignKey(Account, models.DO_NOTHING, related_name='accountpartner_accountfrom_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, related_name='accountpartner_accountto_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Advertiser', 'Werber'), ('Agency', 'Agentur'), ('Broker', 'Makler'), ('Consultant', 'Berater'), ('Dealer', 'Händler'), ('Developer', 'Developer'), ('Distributor', 'Vertriebshändler'), ('Institution', 'Institution'), ('Lender', 'Darlehensgeber'), ('System Integrator', 'Systemintegrator'), ('VAR/Reseller', 'VAR/Wiederverkäufer')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountpartner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountpartner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountPartner'
        verbose_name = 'Account Partner'
        verbose_name_plural = 'Account Partner'
        # keyPrefix = 'None'



class AccountShare(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    account_access_level = models.CharField(max_length=40, verbose_name='Account Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')], default=models.DEFAULTED_ON_CREATE)
    opportunity_access_level = models.CharField(max_length=40, verbose_name='Opportunity Access', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], default=models.DEFAULTED_ON_CREATE)
    case_access_level = models.CharField(max_length=40, verbose_name='Case Access', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], default=models.DEFAULTED_ON_CREATE)
    contact_access_level = models.CharField(max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AccountShare'
        verbose_name = 'Account Share'
        verbose_name_plural = 'Account Share'
        # keyPrefix = '00r'



class ActionLinkGroupTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80)
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Name')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinkgrouptemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinkgrouptemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    executions_allowed = models.CharField(max_length=255, choices=[('Once', 'Once'), ('OncePerUser', 'Once per User'), ('Unlimited', 'Unlimited')])
    hours_until_expiration = models.IntegerField(verbose_name='Hours until Expiration', blank=True, null=True)
    category = models.CharField(max_length=255, choices=[('Primary', 'Primary action'), ('Overflow', 'Overflow action')])
    is_published = models.BooleanField(verbose_name='Published', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ActionLinkGroupTemplate'
        verbose_name = 'Action Link Group Template'
        verbose_name_plural = 'Action Link Group Templates'
        # keyPrefix = '07g'



class ActionLinkTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinktemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinktemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    action_link_group_template = models.ForeignKey(ActionLinkGroupTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    label_key = models.CharField(max_length=128)
    method = models.CharField(max_length=255, verbose_name='HTTP Method', choices=[('HttpDelete', 'DELETE'), ('HttpHead', 'HEAD'), ('HttpGet', 'GET'), ('HttpPatch', 'PATCH'), ('HttpPost', 'POST'), ('HttpPut', 'PUT')])
    link_type = models.CharField(max_length=255, verbose_name='Action Type', choices=[('API', 'API'), ('APIAsync', 'API Async'), ('Download', 'Download'), ('UI', 'UI')])
    position = models.IntegerField()
    is_confirmation_required = models.BooleanField(verbose_name='Confirmation Required', default=models.DEFAULTED_ON_CREATE)
    is_group_default = models.BooleanField(verbose_name='Default Link in Group', default=models.DEFAULTED_ON_CREATE)
    user_visibility = models.CharField(max_length=255, choices=[('Creator', 'Only creator can see'), ('Everyone', 'Everyone can see'), ('EveryoneButCreator', 'Everyone but creator can see'), ('Manager', "Only creator's manager can see"), ('CustomUser', 'Only custom user can see'), ('CustomExcludedUser', 'Everyone but custom user can see')])
    user_alias = models.CharField(max_length=128, verbose_name='Custom User Alias', blank=True, null=True)
    label = models.CharField(max_length=255, blank=True, null=True)
    action_url = models.TextField(verbose_name='Action URL')
    request_body = models.TextField(verbose_name='HTTP Request Body', blank=True, null=True)
    headers = models.TextField(verbose_name='HTTP Headers', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActionLinkTemplate'
        verbose_name = 'Action Link Template'
        verbose_name_plural = 'Action Link Templates'
        # keyPrefix = '07l'



class ActivityHistory(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='activityhistory_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='activityhistory_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, DegreeCourse__c, GoCardlessError__c, InvoiceLineItem__c, Invoice__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, Solution] Master Detail Relationship *
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Anruf'), ('Send Letter', 'Brief senden'), ('Send Quote', 'Angebot senden'), ('Other', 'Andere')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='activityhistory_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Not Started', choices=[('Not Started', 'Nicht begonnen'), ('In Progress', 'Läuft'), ('Completed', 'Abgeschlossen'), ('Waiting on someone else', 'Wartet auf andere Person'), ('Deferred', 'Verschoben')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'Hoch'), ('Normal', 'Normal'), ('Low', 'Niedrig')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='activityhistory_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='activityhistory_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    alternate_detail = models.ForeignKey('EmailMessage', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActivityHistory'
        verbose_name = 'Activity History'
        verbose_name_plural = 'Activity History'
        # keyPrefix = 'None'



class AdditionalNumber(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    call_center = models.ForeignKey('CallCenter', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=80)
    description = models.CharField(max_length=255, blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='additionalnumber_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='additionalnumber_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'AdditionalNumber'
        verbose_name = 'Additional Directory Number'
        verbose_name_plural = 'Additional Directory Numbers'
        # keyPrefix = '04m'



class AggregateResult(models.Model):
    class Meta(models.Model.Meta):
        db_table = 'AggregateResult'
        verbose_name = 'Aggregate Result'
        verbose_name_plural = 'Aggregate Result'
        # keyPrefix = 'None'



class Announcement(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='announcement_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='announcement_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    feed_item = models.ForeignKey('FeedItem', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    expiration_date = models.DateTimeField()
    send_emails = models.BooleanField(verbose_name='Send Emails on Announcement', sf_read_only=models.READ_ONLY, default=False)
    is_archived = models.BooleanField(verbose_name='Is Announcement Archived', sf_read_only=models.NOT_CREATEABLE, default=False)
    parent = models.ForeignKey('CollaborationGroup', models.DO_NOTHING, related_name='announcement_parent_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Announcement'
        verbose_name = 'Announcement'
        verbose_name_plural = 'Announcements'
        # keyPrefix = '0Bt'



class ApexClass(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    status = models.CharField(max_length=40, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Deleted', 'Deleted')])
    is_valid = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    body_crc = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Body CRC', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    length_without_comments = models.IntegerField(verbose_name='Size Without Comments')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexclass_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexclass_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexClass'
        verbose_name = 'Apex Class'
        verbose_name_plural = 'Apex Classes'
        # keyPrefix = '01p'



class ApexComponent(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    description = models.TextField(blank=True, null=True)
    controller_type = models.CharField(max_length=40, choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controller_key = models.CharField(max_length=255, blank=True, null=True)
    markup = models.TextField()
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexcomponent_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexcomponent_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexComponent'
        verbose_name = 'Visualforce Component'
        verbose_name_plural = 'Visualforce Components'
        # keyPrefix = '099'



class ApexEmailNotification(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_user_set', blank=True, null=True)  # Master Detail Relationship *
    email = models.CharField(max_length=255, verbose_name='email', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexEmailNotification'
        verbose_name = 'Apex Email Notification'
        verbose_name_plural = 'Apex Email Notifications'
        # keyPrefix = '06j'



class ApexLog(models.Model):
    log_user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    log_length = models.IntegerField(verbose_name='Log Size (bytes)', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Date', sf_read_only=models.READ_ONLY)
    request = models.CharField(max_length=16, verbose_name='Request Type', sf_read_only=models.READ_ONLY)
    operation = models.CharField(max_length=128, sf_read_only=models.READ_ONLY)
    application = models.CharField(max_length=64, sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    duration_milliseconds = models.IntegerField(verbose_name='Duration (ms)', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    start_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    location = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Monitoring', None), ('Profiling', None), ('SystemLog', None), ('HeapDump', None), ('Preserved', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexLog'
        verbose_name = 'Apex Debug Log'
        verbose_name_plural = 'Apex Debug Log'
        # keyPrefix = '07L'



class ApexPage(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    description = models.TextField(blank=True, null=True)
    controller_type = models.CharField(max_length=40, choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controller_key = models.CharField(max_length=255, blank=True, null=True)
    is_available_in_touch = models.BooleanField(verbose_name='Available for Salesforce mobile apps and Lightning Pages', default=models.DEFAULTED_ON_CREATE)
    is_confirmation_token_required = models.BooleanField(verbose_name='Require CSRF protection on GET requests', default=models.DEFAULTED_ON_CREATE)
    markup = models.TextField()
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexpage_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexpage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexPage'
        verbose_name = 'Visualforce Page'
        verbose_name_plural = 'Visualforce Pages'
        # keyPrefix = '066'



class ApexPageInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    apex_page_id = models.CharField(max_length=18, verbose_name='Apex Page ID', sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    name_space_prefix = models.CharField(max_length=512, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_available_in_touch = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    master_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexPageInfo'
        verbose_name = 'Apex Page Info'
        verbose_name_plural = 'Apex Pages Info'
        # keyPrefix = '4ve'



class ApexTestQueueItem(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    status = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    extended_status = models.CharField(max_length=1000, verbose_name='Status Detail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    test_run_result = models.ForeignKey('ApexTestRunResult', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ApexTestQueueItem'
        verbose_name = 'Apex Test Queue Item'
        verbose_name_plural = 'Apex Test Queue Items'
        # keyPrefix = '709'



class ApexTestResult(models.Model):
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    test_timestamp = models.DateTimeField(verbose_name='Time Started')
    outcome = models.CharField(max_length=40, verbose_name='Pass/Fail', choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('CompileFail', 'CompileFail'), ('Skip', 'Skip')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING)
    method_name = models.CharField(max_length=255, blank=True, null=True)
    message = models.CharField(max_length=4000, verbose_name='Error Message', blank=True, null=True)
    stack_trace = models.CharField(max_length=4000, blank=True, null=True)
    async_apex_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, blank=True, null=True)
    queue_item = models.ForeignKey(ApexTestQueueItem, models.DO_NOTHING, blank=True, null=True)
    apex_log = models.ForeignKey(ApexLog, models.DO_NOTHING, blank=True, null=True)
    apex_test_run_result = models.ForeignKey('ApexTestRunResult', models.DO_NOTHING, blank=True, null=True)
    run_time = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestResult'
        verbose_name = 'Apex Test Result'
        verbose_name_plural = 'Apex Test Results'
        # keyPrefix = '07M'



class ApexTestResultLimits(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestresultlimits_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestresultlimits_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_test_result = models.ForeignKey(ApexTestResult, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    soql = models.IntegerField(verbose_name='Total number of SOQL queries issued')
    query_rows = models.IntegerField(verbose_name='Total number of records retrieved by SOQL queries')
    sosl = models.IntegerField(verbose_name='Total number of SOSL queries issued')
    dml = models.IntegerField(verbose_name='Total number of DML statements issued')
    dml_rows = models.IntegerField(verbose_name='Total number of records processed as a result of DML statements')
    cpu = models.IntegerField(verbose_name='Maximum CPU time on the Salesforce servers')
    callouts = models.IntegerField(verbose_name='Total number of callouts')
    email = models.IntegerField(verbose_name='Total number of sendEmail methods allowed')
    async_calls = models.IntegerField(verbose_name='Total number of async calls')
    mobile_push = models.IntegerField(verbose_name='Maximum number of push notification method calls allowed per Apex transaction')
    limit_context = models.CharField(max_length=255, verbose_name='LimitContext', blank=True, null=True)
    limit_exceptions = models.CharField(max_length=255, verbose_name='LimitExceptions', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestResultLimits'
        verbose_name = 'Apex Test Result Limit'
        verbose_name_plural = 'Apex Test Result Limit'
        # keyPrefix = '05n'



class ApexTestRunResult(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    async_apex_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_user_set', blank=True, null=True)
    job_name = models.CharField(max_length=255, verbose_name='Name of the job', blank=True, null=True)
    is_all_tests = models.BooleanField(verbose_name='allTests', default=models.DEFAULTED_ON_CREATE)
    source = models.CharField(max_length=255, verbose_name='Client that kicked off the test run', blank=True, null=True)
    start_time = models.DateTimeField(verbose_name='Start time of the test run')
    end_time = models.DateTimeField(verbose_name='End time of the test run', blank=True, null=True)
    test_time = models.IntegerField(verbose_name='Time(ms) actually spent running tests', blank=True, null=True)
    status = models.CharField(max_length=255, verbose_name='Status of the test run', choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    classes_enqueued = models.IntegerField(verbose_name='Number of classes enqueued in this test run')
    classes_completed = models.IntegerField(verbose_name='Number of classes completed in this test run', blank=True, null=True)
    methods_enqueued = models.IntegerField(verbose_name='Number of methods enqueued in this test run', blank=True, null=True)
    methods_completed = models.IntegerField(verbose_name='Number of methods completed in this test run', blank=True, null=True)
    methods_failed = models.IntegerField(verbose_name='Number of methods failed in this test run', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestRunResult'
        verbose_name = 'Apex Test Run Result'
        verbose_name_plural = 'Apex Test Run Result'
        # keyPrefix = '05m'



class ApexTestSuite(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestsuite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestsuite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    test_suite_name = models.CharField(max_length=255)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestSuite'
        verbose_name = 'Apex Test Suite'
        verbose_name_plural = 'Apex Test Suites'
        # keyPrefix = '05F'



class ApexTrigger(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', choices=[('Account', None), ('Asset', None), ('AssetRelationship', None), ('AssetTokenEvent', None), ('Attachment', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('CaseComment', None), ('ChatterMessage', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupRecord', None), ('Contact', None), ('ContentDistribution', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentVersion', None), ('Contract', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Event', None), ('FeedComment', None), ('FeedItem', None), ('Idea', None), ('IdeaComment', None), ('Lead', None), ('Macro', None), ('Note', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('OrgLifecycleNotification', None), ('Partner', None), ('Pricebook2', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('RecordOrigin', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('Task', None), ('Topic', None), ('TopicAssignment', None), ('User', None), ('UserProvAccount', None), ('UserProvAccountStaging', None), ('UserProvisioningLog', None), ('UserProvisioningRequest', None), ('UserProvMockTarget', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)], blank=True, null=True)
    usage_before_insert = models.BooleanField(verbose_name='BeforeInsert')
    usage_after_insert = models.BooleanField(verbose_name='AfterInsert')
    usage_before_update = models.BooleanField(verbose_name='BeforeUpdate')
    usage_after_update = models.BooleanField(verbose_name='AfterUpdate')
    usage_before_delete = models.BooleanField(verbose_name='BeforeDelete')
    usage_after_delete = models.BooleanField(verbose_name='AfterDelete')
    usage_is_bulk = models.BooleanField(verbose_name='IsBulk')
    usage_after_undelete = models.BooleanField(verbose_name='AfterUndelete')
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    status = models.CharField(max_length=40, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Deleted', 'Deleted')])
    is_valid = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    body_crc = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Body CRC', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    length_without_comments = models.IntegerField(verbose_name='Size Without Comments')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextrigger_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextrigger_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexTrigger'
        verbose_name = 'Apex Trigger'
        verbose_name_plural = 'Apex Triggers'
        # keyPrefix = '01q'



class AppMenuItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='appmenuitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='appmenuitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    logo_url = models.URLField(verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    info_url = models.URLField(verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_using_admin_authorization = models.BooleanField(verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY, default=False)
    mobile_platform = models.CharField(max_length=255, verbose_name='Mobile device OS platform', sf_read_only=models.READ_ONLY, choices=[('ios', 'iOS'), ('android', 'Android')], blank=True, null=True)
    mobile_min_os_ver = models.CharField(max_length=255, verbose_name='Minimum required mobile device OS version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_device_type = models.CharField(max_length=255, verbose_name='Type of mobile device', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_registered_device_only = models.BooleanField(verbose_name='App requires a registered mobile device', sf_read_only=models.READ_ONLY, default=False)
    mobile_app_ver = models.CharField(max_length=255, verbose_name='Version of the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_installed_date = models.DateTimeField(verbose_name='Date the mobile app was most recently installed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_installed_version = models.CharField(max_length=255, verbose_name='Most recently installed version of the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_binary_id = models.CharField(max_length=255, verbose_name='ID for the related mobile app binary', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_install_url = models.URLField(verbose_name='URL to install the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_enabled = models.BooleanField(verbose_name='Is this a canvas-enabled application', sf_read_only=models.READ_ONLY, default=False)
    canvas_reference_id = models.CharField(max_length=18, verbose_name='The identifier used to render the canvas application.', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_url = models.URLField(verbose_name='The canvas url for the canvas application', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_access_method = models.CharField(max_length=255, verbose_name='The configured access method for the canvas application', sf_read_only=models.READ_ONLY, default='Post', choices=[('Get', 'OAuth Webflow (GET)'), ('Post', 'Signed Request (POST)')], blank=True, null=True)
    canvas_selected_locations = models.CharField(max_length=255, verbose_name='The selected/supported locations of the canvas application', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_options = models.CharField(max_length=255, verbose_name='The options to hide publisher header or publisher share button', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True, null=True)
    application_id = models.CharField(max_length=18, verbose_name='Application ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    user_sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    is_accessible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AppMenuItem'
        verbose_name = 'AppMenuItem'
        verbose_name_plural = 'AppMenuItems'
        # keyPrefix = '0DS'



class Asset(models.Model):
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='asset_parent_set', blank=True, null=True)
    root_asset = models.ForeignKey('self', models.DO_NOTHING, related_name='asset_rootasset_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, blank=True, null=True)
    is_competitor_product = models.BooleanField(verbose_name='Competitor Asset', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='asset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='asset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Asset Name')
    serial_number = models.CharField(max_length=80, blank=True, null=True)
    install_date = models.DateField(blank=True, null=True)
    purchase_date = models.DateField(blank=True, null=True)
    usage_end_date = models.DateField(blank=True, null=True)
    status = models.CharField(max_length=40, choices=[('Purchased', 'Erworben'), ('Shipped', 'Geliefert'), ('Installed', 'Installiert'), ('Registered', 'Registriert'), ('Obsolete', 'Veraltet')], blank=True, null=True)
    price = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='asset_owner_set')
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Asset'
        verbose_name = 'Asset'
        verbose_name_plural = 'Assets'
        # keyPrefix = '02i'



class AssetFeed(models.Model):
    parent = models.ForeignKey(Asset, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetFeed'
        verbose_name = 'Asset Feed'
        verbose_name_plural = 'Asset Feed'
        # keyPrefix = 'None'



class AssetHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account'), ('AssetLevel', 'Asset Level'), ('Name', 'Asset Name'), ('Owner', 'Asset Owner'), ('AssetProvidedBy', 'Asset Provided By'), ('AssetServicedBy', 'Asset Serviced By'), ('IsCompetitorProduct', 'Competitor Asset'), ('Contact', 'Contact'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('InstallDate', 'Install Date'), ('IsInternal', 'Internal Asset'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent Asset'), ('Price', 'Price'), ('Product2', 'Product'), ('PurchaseDate', 'Purchase Date'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootAsset', 'Root Asset'), ('SerialNumber', 'Serial Number'), ('Status', 'Status'), ('UsageEndDate', 'Usage End Date')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetHistory'
        verbose_name = 'Asset History'
        verbose_name_plural = 'Asset History'
        # keyPrefix = 'None'



class AssetShare(models.Model):
    asset = models.ForeignKey(Asset, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    asset_access_level = models.CharField(max_length=40, verbose_name='Asset Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AssetShare'
        verbose_name = 'Asset Share'
        verbose_name_plural = 'Asset Share'
        # keyPrefix = '70a'



class AssignmentRule(models.Model):
    name = models.CharField(max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='SObject Type', sf_read_only=models.READ_ONLY, choices=[('Case', None), ('Lead', None)], blank=True, null=True)
    active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assignmentrule_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assignmentrule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'AssignmentRule'
        verbose_name = 'Assignment Rule'
        verbose_name_plural = 'Assignment Rules'
        # keyPrefix = '01Q'



class AsyncApexJob(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    job_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Future', 'Future'), ('SharingRecalculation', 'Sharing Recalculation'), ('ScheduledApex', 'Scheduled Apex'), ('BatchApex', 'Batch Apex'), ('BatchApexWorker', 'Batch Apex Worker'), ('TestRequest', 'Test Request'), ('TestWorker', 'Test Worker'), ('ApexToken', 'Apex Token'), ('Queueable', 'Queueable')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    job_items_processed = models.IntegerField(verbose_name='Batches Processed', sf_read_only=models.READ_ONLY)
    total_job_items = models.IntegerField(verbose_name='Total Batches', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_errors = models.IntegerField(verbose_name='Failures', sf_read_only=models.READ_ONLY, blank=True, null=True)
    completed_date = models.DateTimeField(verbose_name='Completion Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    method_name = models.CharField(max_length=255, verbose_name='Apex Method', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extended_status = models.CharField(max_length=255, verbose_name='Status Detail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_job = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_processed = models.CharField(max_length=15, verbose_name='Last ID processed and committed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_processed_offset = models.IntegerField(verbose_name='Offset of last ID processed and committed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AsyncApexJob'
        verbose_name = 'Apex Job'
        verbose_name_plural = 'Apex Jobs'
        # keyPrefix = '707'



class AttachedContentDocument(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentWorkspace, Contract, CustomerBankAccount__c, Dashboard, DashboardComponent, DegreeCourse__c, EmailMessage, EmailTemplate, Event, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, OrderItem, Organization, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, Report, Site, SocialPost, Solution, SystemSettings__c, Task, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('SimpleURL', None), ('Wrapper', None)], blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.READ_ONLY, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AttachedContentDocument'
        verbose_name = 'Attached Content Document'
        verbose_name_plural = 'Attached Content Documents'
        # keyPrefix = 'None'



class Attachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, Contact, Contract, CustomerBankAccount__c, DegreeCourse__c, EmailMessage, EmailTemplate, Event, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, SocialPost, Solution, Task, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    name = models.CharField(max_length=255, verbose_name='File Name')
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    content_type = models.CharField(max_length=120, blank=True, null=True)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField()
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='attachment_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Attachment'
        verbose_name = 'Attachment'
        verbose_name_plural = 'Attachments'
        # keyPrefix = '00P'



class AuraDefinition(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    aura_definition_bundle = models.ForeignKey('AuraDefinitionBundle', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    def_type = models.CharField(max_length=255, verbose_name='Definition Type', choices=[('APPLICATION', '0'), ('CONTROLLER', '1'), ('COMPONENT', '2'), ('EVENT', '3'), ('HELPER', '4'), ('INTERFACE', '5'), ('RENDERER', '7'), ('STYLE', '8'), ('PROVIDER', '9'), ('MODEL', '10'), ('TESTSUITE', '11'), ('DOCUMENTATION', '12'), ('TOKENS', '13'), ('DESIGN', '14'), ('SVG', '15')])
    format = models.CharField(max_length=255, choices=[('XML', 'XML'), ('JS', 'JS'), ('CSS', 'CSS'), ('TEMPLATE_CSS', 'TEMPLATE_CSS'), ('SVG', 'SVG')])
    source = models.TextField()
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinition'
        verbose_name = 'Lightning Component Definition'
        verbose_name_plural = 'Lightning Component Definitions'
        # keyPrefix = '0Ad'



class AuraDefinitionBundle(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinitionbundle_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinitionbundle_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    description = models.TextField()
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionBundle'
        verbose_name = 'Lightning Component Bundle'
        verbose_name_plural = 'Lightning Component Bundles'
        # keyPrefix = '0Ab'



class AuraDefinitionBundleInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_bundle_id = models.CharField(max_length=18, verbose_name='Lightning Definition Bundle ID', sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Bundle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionBundleInfo'
        verbose_name = 'AuraDefinitionBundle Info'
        verbose_name_plural = 'AuraDefinitionBundle Infos'
        # keyPrefix = '0ab'



class AuraDefinitionInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_bundle_info_id = models.CharField(max_length=100, verbose_name='Lightning Definition Bundle ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_id = models.CharField(max_length=18, verbose_name='Lightning Definition ID', sf_read_only=models.READ_ONLY)
    def_type = models.CharField(max_length=255, verbose_name='Definition Type', sf_read_only=models.READ_ONLY, choices=[('APPLICATION', '0'), ('CONTROLLER', '1'), ('COMPONENT', '2'), ('EVENT', '3'), ('HELPER', '4'), ('INTERFACE', '5'), ('RENDERER', '7'), ('STYLE', '8'), ('PROVIDER', '9'), ('MODEL', '10'), ('TESTSUITE', '11'), ('DOCUMENTATION', '12'), ('TOKENS', '13'), ('DESIGN', '14'), ('SVG', '15')])
    format = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('XML', 'XML'), ('JS', 'JS'), ('CSS', 'CSS'), ('TEMPLATE_CSS', 'TEMPLATE_CSS'), ('SVG', 'SVG')])
    source = models.TextField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Bundle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionInfo'
        verbose_name = 'AuraDefinition Info'
        verbose_name_plural = 'AuraDefinition Infos'
        # keyPrefix = '0ad'



class AuthConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    url = models.CharField(max_length=240, verbose_name='URL', sf_read_only=models.READ_ONLY)
    auth_options_username_password = models.BooleanField(verbose_name='UsernamePassword', sf_read_only=models.READ_ONLY)
    auth_options_saml = models.BooleanField(verbose_name='Saml', sf_read_only=models.READ_ONLY)
    auth_options_auth_provider = models.BooleanField(verbose_name='AuthProvider', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=255, verbose_name='Authentication Configuration Type', sf_read_only=models.READ_ONLY, choices=[('Org', 'Org'), ('Community', 'Community'), ('Site', 'Site'), ('Portal', 'Portal')])
    class Meta(models.Model.Meta):
        db_table = 'AuthConfig'
        verbose_name = 'Authentication Configuration'
        verbose_name_plural = 'Authentication Configurations'
        # keyPrefix = '07T'



class AuthConfigProviders(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfigproviders_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfigproviders_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    auth_config = models.ForeignKey(AuthConfig, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    auth_provider = models.ForeignKey('AuthProvider', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AuthProvider, SamlSsoConfig] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'AuthConfigProviders'
        verbose_name = 'Authentication Configuration Auth. Provider'
        verbose_name_plural = 'Authentication Configuration Auth. Providers'
        # keyPrefix = '07U'



class AuthProvider(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    provider_type = models.CharField(max_length=40, choices=[('Facebook', 'Facebook'), ('Janrain', 'Janrain'), ('Salesforce', 'Salesforce'), ('OpenIdConnect', 'Open ID Connect'), ('MicrosoftACS', 'Microsoft Access Control Service'), ('LinkedIn', 'LinkedIn'), ('Twitter', 'Twitter'), ('Google', 'Google'), ('GitHub', 'GitHub'), ('Custom', 'Custom')])
    friendly_name = models.CharField(max_length=32, verbose_name='Name')
    developer_name = models.CharField(max_length=32, verbose_name='URL Suffix')
    registration_handler = models.ForeignKey(ApexClass, models.DO_NOTHING, related_name='authprovider_registrationhandler_set', blank=True, null=True)
    execution_user = models.ForeignKey('User', models.DO_NOTHING, blank=True, null=True)
    consumer_key = models.CharField(max_length=256, blank=True, null=True)
    consumer_secret = models.CharField(max_length=100, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    error_url = models.CharField(max_length=500, verbose_name='Custom Error URL', blank=True, null=True)
    authorize_url = models.URLField(verbose_name='Authorize Endpoint URL', blank=True, null=True)
    token_url = models.URLField(verbose_name='Token Endpoint URL', blank=True, null=True)
    user_info_url = models.URLField(verbose_name='User Info Endpoint URL', blank=True, null=True)
    default_scopes = models.CharField(max_length=256, blank=True, null=True)
    id_token_issuer = models.CharField(max_length=1024, verbose_name='Token Issuer', blank=True, null=True)
    options_send_access_token_in_header = models.BooleanField(verbose_name='Send access token in header')
    options_send_client_credentials_in_header = models.BooleanField(verbose_name='Send client credentials in header')
    options_include_org_id_in_id = models.BooleanField(verbose_name="Include identity organization's organization ID for third-party account linkage")
    icon_url = models.URLField(verbose_name='Icon URL', blank=True, null=True)
    logout_url = models.URLField(verbose_name='Custom Logout URL', blank=True, null=True)
    plugin = models.ForeignKey(ApexClass, models.DO_NOTHING, related_name='authprovider_plugin_set', blank=True, null=True)
    custom_metadata_type_record = models.CharField(max_length=15, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuthProvider'
        verbose_name = 'Auth. Provider'
        verbose_name_plural = 'Auth. Providers'
        # keyPrefix = '0SO'



class AuthSession(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Updated', sf_read_only=models.READ_ONLY)
    num_seconds_valid = models.IntegerField(verbose_name='Valid For', sf_read_only=models.READ_ONLY)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')])
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    login_type = models.CharField(max_length=40, verbose_name='Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    session_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    session_security_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('LOW', None), ('STANDARD', None), ('HIGH_ASSURANCE', None)], blank=True, null=True)
    logout_url = models.CharField(max_length=1500, verbose_name='Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_history = models.ForeignKey('LoginHistory', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_geo = models.ForeignKey('LoginGeo', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_current = models.BooleanField(verbose_name='Current Session', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AuthSession'
        verbose_name = 'Auth Session'
        verbose_name_plural = 'Auth Sessions'
        # keyPrefix = '0Ak'



class BackgroundOperation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Background Operation Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='backgroundoperation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='backgroundoperation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    submitted_at = models.DateTimeField(verbose_name='Submitted', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('New', None), ('Scheduled', None), ('Canceled', None), ('Merged', None), ('Waiting', None), ('Running', None), ('Error', None), ('Complete', None)], blank=True, null=True)
    execution_group = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sequence_group = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sequence_number = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    group_leader = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    started_at = models.DateTimeField(verbose_name='Started', sf_read_only=models.READ_ONLY, blank=True, null=True)
    finished_at = models.DateTimeField(verbose_name='Finished', sf_read_only=models.READ_ONLY, blank=True, null=True)
    worker_uri = models.CharField(max_length=255, verbose_name='Worker URI', sf_read_only=models.READ_ONLY, blank=True, null=True)
    timeout = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    expires_at = models.DateTimeField(verbose_name='ExpiresAt', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_followers = models.IntegerField(verbose_name='NumFollowers', sf_read_only=models.READ_ONLY, blank=True, null=True)
    process_after = models.DateTimeField(verbose_name='ProcessAfter', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_key = models.CharField(max_length=255, verbose_name='ParentKey', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_limit = models.IntegerField(verbose_name='RetryLimit', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_count = models.IntegerField(verbose_name='RetryCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_backoff = models.IntegerField(verbose_name='RetryBackoff', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BackgroundOperation'
        verbose_name = 'Background Operation'
        verbose_name_plural = 'Background Operations'
        # keyPrefix = '08P'



class BrandTemplate(models.Model):
    name = models.CharField(max_length=255, verbose_name='Brand Template Name')
    developer_name = models.CharField(max_length=80, verbose_name='Letterhead Unique Name', default=models.DEFAULTED_ON_CREATE)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    description = models.CharField(max_length=1000, blank=True, null=True)
    value = models.TextField()
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BrandTemplate'
        verbose_name = 'Letterhead'
        verbose_name_plural = 'Letterheads'
        # keyPrefix = '016'



class BusinessHours(models.Model):
    name = models.CharField(max_length=80, verbose_name='Business Hours Name')
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    is_default = models.BooleanField(verbose_name='Default Business Hours', default=models.DEFAULTED_ON_CREATE)
    sunday_start_time = models.TimeField(verbose_name='Sunday Start', blank=True, null=True)
    sunday_end_time = models.TimeField(verbose_name='Sunday End', blank=True, null=True)
    monday_start_time = models.TimeField(verbose_name='Monday Start', blank=True, null=True)
    monday_end_time = models.TimeField(verbose_name='Monday End', blank=True, null=True)
    tuesday_start_time = models.TimeField(verbose_name='Tuesday Start', blank=True, null=True)
    tuesday_end_time = models.TimeField(verbose_name='Tuesday End', blank=True, null=True)
    wednesday_start_time = models.TimeField(verbose_name='Wednesday Start', blank=True, null=True)
    wednesday_end_time = models.TimeField(verbose_name='Wednesday End', blank=True, null=True)
    thursday_start_time = models.TimeField(verbose_name='Thursday Start', blank=True, null=True)
    thursday_end_time = models.TimeField(verbose_name='Thursday End', blank=True, null=True)
    friday_start_time = models.TimeField(verbose_name='Friday Start', blank=True, null=True)
    friday_end_time = models.TimeField(verbose_name='Friday End', blank=True, null=True)
    saturday_start_time = models.TimeField(verbose_name='Saturday Start', blank=True, null=True)
    saturday_end_time = models.TimeField(verbose_name='Saturday End', blank=True, null=True)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (New South Wales) (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (South Australia) (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) Eastern Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businesshours_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businesshours_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BusinessHours'
        verbose_name = 'Business Hours'
        verbose_name_plural = 'Business Hours'
        # keyPrefix = '01m'



class BusinessProcess(models.Model):
    name = models.CharField(max_length=80)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Entity Enumeration Or ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Case', None), ('Lead', None), ('Opportunity', None), ('Solution', None)])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.NOT_CREATEABLE, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businessprocess_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businessprocess_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BusinessProcess'
        verbose_name = 'Business Process'
        verbose_name_plural = 'Business Process'
        # keyPrefix = '019'



class CallCenter(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE)
    internal_name = models.CharField(max_length=240, sf_read_only=models.NOT_UPDATEABLE)
    version = models.DecimalField(max_digits=18, decimal_places=3, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    adapter_url = models.CharField(max_length=2000, verbose_name='CTI Adapter URL', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    custom_settings = models.CharField(max_length=3000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='callcenter_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='callcenter_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CallCenter'
        verbose_name = 'Call Center'
        verbose_name_plural = 'Call Centers'
        # keyPrefix = '04v'



class Campaign(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Advertisement', 'Werbung'), ('Email', 'E-Mail'), ('Telemarketing', 'Telemarketing'), ('Banner Ads', 'Bannerwerbung'), ('Seminar / Conference', 'Seminar/Konferenz'), ('Public Relations', 'Public Relations'), ('Partners', 'Partner'), ('Referral Program', 'Weiterempfehlungsprogramm'), ('Other', 'Andere')], blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('In Progress', 'Läuft'), ('Completed', 'Abgeschlossen'), ('Aborted', 'Abgebrochen'), ('Planned', 'Geplant')], blank=True, null=True)
    start_date = models.DateField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    expected_revenue = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Expected Revenue in Campaign', blank=True, null=True)
    budgeted_cost = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Budgeted Cost in Campaign', blank=True, null=True)
    actual_cost = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Actual Cost in Campaign', blank=True, null=True)
    expected_response = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Expected Response (%)', blank=True, null=True)
    number_sent = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Num Sent in Campaign', blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    description = models.TextField(blank=True, null=True)
    number_of_leads = models.IntegerField(verbose_name='Leads in Campaign', sf_read_only=models.READ_ONLY)
    number_of_converted_leads = models.IntegerField(verbose_name='Converted Leads in Campaign', sf_read_only=models.READ_ONLY)
    number_of_contacts = models.IntegerField(verbose_name='Contacts in Campaign', sf_read_only=models.READ_ONLY)
    number_of_responses = models.IntegerField(verbose_name='Responses in Campaign', sf_read_only=models.READ_ONLY)
    number_of_opportunities = models.IntegerField(verbose_name='Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    number_of_won_opportunities = models.IntegerField(verbose_name='Won Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    amount_all_opportunities = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Value Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    amount_won_opportunities = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Value Won Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaign_member_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Campaign'
        verbose_name = 'Campaign'
        verbose_name_plural = 'Campaigns'
        # keyPrefix = '701'



class CampaignFeed(models.Model):
    parent = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignFeed'
        verbose_name = 'Campaign Feed'
        verbose_name_plural = 'Campaign Feed'
        # keyPrefix = 'None'



class CampaignHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('ActualCost', 'Actual Cost in Campaign'), ('BudgetedCost', 'Budgeted Cost in Campaign'), ('CampaignMemberRecordType', 'Campaign Member Type'), ('Name', 'Campaign Name'), ('Owner', 'Campaign Owner'), ('created', 'Created.'), ('Description', 'Description'), ('EndDate', 'End Date'), ('ExpectedResponse', 'Expected Response (%)'), ('ExpectedRevenue', 'Expected Revenue in Campaign'), ('feedEvent', 'Feed event'), ('NumberSent', 'Num Sent in Campaign'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent Campaign'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('StartDate', 'Start Date'), ('Status', 'Status'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignHistory'
        verbose_name = 'Campaign Field History'
        verbose_name_plural = 'Campaign Field History'
        # keyPrefix = 'None'



class CampaignMember(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    lead = models.ForeignKey('Lead', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING, related_name='campaignmember_contact_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    status = models.CharField(max_length=40, choices=[('Responded', 'Geantwortet'), ('Sent', 'Gesendet')], blank=True, null=True)
    has_responded = models.BooleanField(verbose_name='Responded', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    first_responded_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    salutation = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Mr.', 'Herr'), ('Ms.', 'Frau'), ('Mrs.', 'Frau'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=40, verbose_name='State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, verbose_name='Mobile', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    do_not_call = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_opted_out_of_email = models.BooleanField(verbose_name='Email Opt Out', sf_read_only=models.READ_ONLY, default=False)
    has_opted_out_of_fax = models.BooleanField(verbose_name='Fax Opt Out', sf_read_only=models.READ_ONLY, default=False)
    lead_source = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Advertisement', 'Werbung'), ('Employee Referral', 'Mitarbeiterempfehlung'), ('External Referral', 'Externe Empfehlung'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Intern'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Messe'), ('Web', 'Web'), ('Word of mouth', 'Mundpropaganda'), ('Other', 'Andere')], blank=True, null=True)
    company_or_account = models.CharField(max_length=255, verbose_name='Company (Account)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_or_contact = models.ForeignKey('Contact', models.DO_NOTHING, related_name='campaignmember_leadorcontact_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    lead_or_contact_owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    class Meta(models.Model.Meta):
        db_table = 'CampaignMember'
        verbose_name = 'Campaign Member'
        verbose_name_plural = 'Campaign Members'
        # keyPrefix = '00v'



class CampaignMemberStatus(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    label = models.CharField(max_length=765, verbose_name='Member Status')
    sort_order = models.IntegerField(blank=True, null=True)
    is_default = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    has_responded = models.BooleanField(verbose_name='Responded', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmemberstatus_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmemberstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CampaignMemberStatus'
        verbose_name = 'Campaign Member Status'
        verbose_name_plural = 'Campaign Member Statuses'
        # keyPrefix = '01Y'



class CampaignShare(models.Model):
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    campaign_access_level = models.CharField(max_length=40, verbose_name='Campaign Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CampaignShare'
        verbose_name = 'Campaign Share'
        verbose_name_plural = 'Campaign Share'
        # keyPrefix = '08s'



class Case(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    case_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    supplied_name = models.CharField(max_length=80, verbose_name='Name', blank=True, null=True)
    supplied_email = models.EmailField(verbose_name='Email Address', blank=True, null=True)
    supplied_phone = models.CharField(max_length=40, verbose_name='Phone', blank=True, null=True)
    supplied_company = models.CharField(max_length=80, verbose_name='Company', blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Case Type', choices=[('Problem', 'Problem'), ('Feature Request', 'Funktionsanforderung'), ('Question', 'Frage')], blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('On Hold', 'In Warteschleife'), ('Escalated', 'Eskaliert'), ('Closed', 'Geschlossen'), ('New', 'Neu')], blank=True, null=True)
    reason = models.CharField(max_length=40, verbose_name='Case Reason', choices=[("User didn't attend training", 'Benutzer hat nicht an Schulung teilgenommen'), ('Complex functionality', 'Komplexe Funktion'), ('Existing problem', 'Bestehendes Problem'), ('Instructions not clear', 'Anweisungen unklar'), ('New problem', 'Neues Problem')], blank=True, null=True)
    origin = models.CharField(max_length=40, verbose_name='Case Origin', choices=[('Email', 'E-Mail'), ('Phone', 'Telefon'), ('Web', 'Web')], blank=True, null=True)
    subject = models.CharField(max_length=255, blank=True, null=True)
    priority = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('High', 'Hoch'), ('Medium', 'Mittel'), ('Low', 'Niedrig')], blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    closed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_escalated = models.BooleanField(verbose_name='Escalated', default=models.DEFAULTED_ON_CREATE)
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='case_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='case_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    contact_phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_mobile = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Case'
        verbose_name = 'Case'
        verbose_name_plural = 'Cases'
        # keyPrefix = '500'



class CaseComment(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_published = models.BooleanField(verbose_name='Published', default=models.DEFAULTED_ON_CREATE)
    comment_body = models.TextField(verbose_name='Body', blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecomment_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecomment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseComment'
        verbose_name = 'Case Comment'
        verbose_name_plural = 'Case Comments'
        # keyPrefix = '00a'



class CaseContactRole(models.Model):
    cases = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Technical Contact', 'Technischer Kontakt'), ('Business Contact', 'Geschäftskontakt'), ('Decision Maker', 'Entscheidungsträger'), ('Other', 'Andere')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseContactRole'
        verbose_name = 'Case Contact Role'
        verbose_name_plural = 'Case Contact Role'
        # keyPrefix = '03j'



class CaseFeed(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casefeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casefeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseFeed'
        verbose_name = 'Case Feed'
        verbose_name_plural = 'Case Feed'
        # keyPrefix = 'None'



class CaseHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('Asset', 'Asset'), ('BusinessHours', 'Business Hours'), ('Origin', 'Case Origin'), ('Owner', 'Case Owner'), ('Reason', 'Case Reason'), ('Source', 'Case Source'), ('closed', 'Closed.'), ('IsClosedOnCreate', 'Closed When Created'), ('Contact', 'Contact Name'), ('created', 'Created.'), ('Description', 'Description'), ('IsEscalated', 'Escalated'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ownerEscalated', 'Owner (Escalation)'), ('Parent', 'Parent Case'), ('Priority', 'Priority'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Status', 'Status'), ('Subject', 'Subject'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseHistory'
        verbose_name = 'Case History'
        verbose_name_plural = 'Case History'
        # keyPrefix = 'None'



class CaseShare(models.Model):
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    case_access_level = models.CharField(max_length=40, verbose_name='Case Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseShare'
        verbose_name = 'Case Share'
        verbose_name_plural = 'Case Share'
        # keyPrefix = '01n'



class CaseSolution(models.Model):
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    solution = models.ForeignKey('Solution', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseSolution'
        verbose_name = 'Case Solution'
        verbose_name_plural = 'Case Solution'
        # keyPrefix = '010'



class CaseStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casestatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casestatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseStatus'
        verbose_name = 'Case Status Value'
        verbose_name_plural = 'Case Status Value'
        # keyPrefix = 'None'



class CaseTeamMember(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    member = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Contact, User] Master Detail Relationship *
    team_template_member = models.ForeignKey('CaseTeamTemplateMember', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    team_role = models.ForeignKey('CaseTeamRole', models.DO_NOTHING)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteammember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteammember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamMember'
        verbose_name = 'Case Team Member'
        verbose_name_plural = 'Case Team Member'
        # keyPrefix = 'None'



class CaseTeamRole(models.Model):
    name = models.CharField(max_length=80)
    access_level = models.CharField(max_length=40, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    preferences_visible_in_csp = models.BooleanField(db_column='PreferencesVisibleInCSP', verbose_name='Visible in Customer Portal')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamRole'
        verbose_name = 'Case Team Member Role'
        verbose_name_plural = 'Case Team Member Role'
        # keyPrefix = 'None'



class CaseTeamTemplate(models.Model):
    name = models.CharField(max_length=80)
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplate'
        verbose_name = 'Predefined Case Team'
        verbose_name_plural = 'Predefined Case Team'
        # keyPrefix = 'None'



class CaseTeamTemplateMember(models.Model):
    team_template = models.ForeignKey(CaseTeamTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    member = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Contact, User] Master Detail Relationship *
    team_role = models.ForeignKey(CaseTeamRole, models.DO_NOTHING, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplatemember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplatemember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplateMember'
        verbose_name = 'Predefined Case Team Member'
        verbose_name_plural = 'Predefined Case Team Member'
        # keyPrefix = 'None'



class CaseTeamTemplateRecord(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    team_template = models.ForeignKey(CaseTeamTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplateRecord'
        verbose_name = 'Predefined Case Team Record'
        verbose_name_plural = 'Predefined Case Team Record'
        # keyPrefix = 'None'



class CategoryData(models.Model):
    category_node = models.ForeignKey('CategoryNode', models.DO_NOTHING)  # Master Detail Relationship *
    related_sobject = models.ForeignKey('Solution', models.DO_NOTHING)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorydata_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorydata_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryData'
        verbose_name = 'Category Data'
        verbose_name_plural = 'Category Data'
        # keyPrefix = '02o'



class CategoryNode(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    master_label = models.CharField(max_length=40, verbose_name='Name')
    sort_order = models.IntegerField(blank=True, null=True)
    sort_style = models.CharField(max_length=40, verbose_name='Subcategory Sort Style', choices=[('custom', 'Custom Order'), ('alphabetical', 'Alphabetical Order')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorynode_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorynode_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryNode'
        verbose_name = 'Category Node'
        verbose_name_plural = 'Category Nodes'
        # keyPrefix = '02n'



class CategoryNodeLocalization(models.Model):
    category_node = models.ForeignKey(CategoryNode, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    language = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    value = models.CharField(max_length=1000, verbose_name='Translation Text')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorynodelocalization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorynodelocalization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryNodeLocalization'
        verbose_name = 'Category Node Localization'
        verbose_name_plural = 'Category Node Localization'
        # keyPrefix = 'None'



class ChatterActivity(models.Model):
    parent = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    post_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    comment_received_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_received_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    influence_raw_rank = models.IntegerField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ChatterActivity'
        verbose_name = 'Chatter Activity'
        verbose_name_plural = 'Chatter Activity'
        # keyPrefix = '0ca'



class ClientBrowser(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    full_user_agent = models.CharField(max_length=1024, sf_read_only=models.READ_ONLY, blank=True, null=True)
    proxy_info = models.CharField(max_length=1024, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_update = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ClientBrowser'
        verbose_name = 'Client Browser'
        verbose_name_plural = 'Client Browser'
        # keyPrefix = '713'



class CollaborationGroup(models.Model):
    name = models.CharField(max_length=40)
    member_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_owner_set')
    collaboration_type = models.CharField(max_length=40, verbose_name='Access Type', choices=[('Public', 'Public'), ('Private', 'Private')])
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    full_photo_url = models.URLField(verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_feed_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    information_title = models.CharField(max_length=30, blank=True, null=True)
    information_body = models.TextField(verbose_name='Information', blank=True, null=True)
    has_private_fields_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    can_have_guests = models.BooleanField(verbose_name='Allow customers', default=models.DEFAULTED_ON_CREATE)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_archived = models.BooleanField(verbose_name='Archive', default=models.DEFAULTED_ON_CREATE)
    is_auto_archive_disabled = models.BooleanField(verbose_name='Disable automatic archiving', default=models.DEFAULTED_ON_CREATE)
    announcement = models.ForeignKey(Announcement, models.DO_NOTHING, blank=True, null=True)
    group_email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_broadcast = models.BooleanField(verbose_name='Broadcast Only', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroup'
        verbose_name = 'Group'
        verbose_name_plural = 'Groups'
        # keyPrefix = '0F9'



class CollaborationGroupFeed(models.Model):
    parent = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupFeed'
        verbose_name = 'Group Feed'
        verbose_name_plural = 'Group Feed'
        # keyPrefix = 'None'



class CollaborationGroupMember(models.Model):
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    member = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_member_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    collaboration_role = models.CharField(max_length=40, verbose_name='Group Member Role', choices=[('Admin', 'Manager'), ('Standard', 'Member')], blank=True, null=True)
    notification_frequency = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_feed_access_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Members'
        # keyPrefix = '0FB'



class CollaborationGroupMemberRequest(models.Model):
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    requester = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_requester_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    response_message = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Pending', None), ('Accepted', None), ('Declined', None)])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMemberRequest'
        verbose_name = 'Group Member Request'
        verbose_name_plural = 'Group Member Requests'
        # keyPrefix = '0I5'



class CollaborationGroupRecord(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgrouprecord_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgrouprecord_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    record = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Campaign, Case, Contact, Contract, CustomerBankAccount__c, DegreeCourse__c, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Payment__c, Rabatt__c, SystemSettings__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupRecord'
        verbose_name = 'Group Record'
        verbose_name_plural = 'Group Records'
        # keyPrefix = '0Aa'



class CollaborationInvitation(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shared_entity = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [CollaborationGroup, User] Master Detail Relationship *
    inviter = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_inviter_set', sf_read_only=models.READ_ONLY)
    invited_user_email = models.CharField(max_length=240, verbose_name='Invited Email', sf_read_only=models.NOT_UPDATEABLE)
    invited_user_email_normalized = models.EmailField(verbose_name='Invited Email (Normalized)', sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=40, verbose_name='Invitation Status', sf_read_only=models.READ_ONLY, choices=[('Sent', None), ('Accepted', None), ('Canceled', None)])
    optional_message = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationInvitation'
        verbose_name = 'Chatter Invitation'
        verbose_name_plural = 'Chatter Invitations'
        # keyPrefix = '0H1'



class CombinedAttachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentWorkspace, Contract, CustomerBankAccount__c, Dashboard, DashboardComponent, DegreeCourse__c, EmailMessage, EmailTemplate, Event, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, OrderItem, Organization, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, Report, Site, SocialPost, Solution, SystemSettings__c, Task, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    record_type = models.CharField(max_length=30, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='combinedattachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='combinedattachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('SimpleURL', None), ('Wrapper', None)], blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.READ_ONLY, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CombinedAttachment'
        verbose_name = 'Note, Attachment, Google Doc And File'
        verbose_name_plural = 'Notes, Attachments, Google Docs And Files'
        # keyPrefix = 'None'



class Community(models.Model):
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='community_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='community_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    is_published = models.BooleanField(verbose_name='Show In Portal', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Community'
        verbose_name = 'Zone'
        verbose_name_plural = 'Zones'
        # keyPrefix = '09a'



class ConnectedApplication(models.Model):
    name = models.CharField(max_length=80, verbose_name='Connected App Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='connectedapplication_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='connectedapplication_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    options_allow_admin_approved_users_only = models.BooleanField(verbose_name='AllowAdminApprovedUsersOnly', sf_read_only=models.READ_ONLY)
    options_refresh_token_validity_metric = models.BooleanField(verbose_name='RefreshTokenValidityMetric', sf_read_only=models.READ_ONLY)
    options_has_session_level_policy = models.BooleanField(verbose_name='HasSessionLevelPolicy', sf_read_only=models.READ_ONLY)
    options_is_internal = models.BooleanField(verbose_name='isInternal', sf_read_only=models.READ_ONLY)
    mobile_session_timeout = models.CharField(max_length=40, verbose_name='Require PIN after:', sf_read_only=models.READ_ONLY, default='10', choices=[('1', '1 minute'), ('5', '5 minutes'), ('10', '10 minutes'), ('30', '30 minutes'), ('60', '60 minutes'), ('120', '120 minutes'), ('180', '180 minutes'), ('240', '240 minutes')], blank=True, null=True)
    pin_length = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], blank=True, null=True)
    start_url = models.URLField(verbose_name='Start URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(verbose_name='Mobile Start URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    refresh_token_validity_period = models.IntegerField(verbose_name='Refresh Token Policy:', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ConnectedApplication'
        verbose_name = 'Connected App'
        verbose_name_plural = 'Connected Apps'
        # keyPrefix = '0H4'



class Contact(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Herr'), ('Ms.', 'Frau'), ('Mrs.', 'Frau'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    other_street = models.TextField(blank=True, null=True)
    other_city = models.CharField(max_length=40, blank=True, null=True)
    other_state = models.CharField(max_length=80, verbose_name='Other State/Province', blank=True, null=True)
    other_postal_code = models.CharField(max_length=20, verbose_name='Other Zip/Postal Code', blank=True, null=True)
    other_country = models.CharField(max_length=80, blank=True, null=True)
    other_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    other_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    other_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    other_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    mailing_street = models.TextField(blank=True, null=True)
    mailing_city = models.CharField(max_length=40, blank=True, null=True)
    mailing_state = models.CharField(max_length=80, verbose_name='Mailing State/Province', blank=True, null=True)
    mailing_postal_code = models.CharField(max_length=20, verbose_name='Mailing Zip/Postal Code', blank=True, null=True)
    mailing_country = models.CharField(max_length=80, blank=True, null=True)
    mailing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    mailing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Business Phone', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Business Fax', blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, blank=True, null=True)
    home_phone = models.CharField(max_length=40, blank=True, null=True)
    other_phone = models.CharField(max_length=40, blank=True, null=True)
    assistant_phone = models.CharField(max_length=40, verbose_name='Asst. Phone', blank=True, null=True)
    reports_to = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_reportsto_set', blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    title = models.CharField(max_length=128, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    assistant_name = models.CharField(max_length=40, verbose_name="Assistant's Name", blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Advertisement', 'Werbung'), ('Employee Referral', 'Mitarbeiterempfehlung'), ('External Referral', 'Externe Empfehlung'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Intern'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Messe'), ('Web', 'Web'), ('Word of mouth', 'Mundpropaganda'), ('Other', 'Andere')], blank=True, null=True)
    birthdate = models.DateField(blank=True, null=True)
    description = models.TextField(verbose_name='Contact Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_curequest_date = models.DateTimeField(db_column='LastCURequestDate', verbose_name='Last Stay-in-Touch Request Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_cuupdate_date = models.DateTimeField(db_column='LastCUUpdateDate', verbose_name='Last Stay-in-Touch Save Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, blank=True, null=True)
    email_bounced_date = models.DateTimeField(blank=True, null=True)
    is_email_bounced = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    bic = models.CharField(custom=True, db_column='BIC__c', max_length=255, verbose_name='BIC', blank=True, null=True)
    iban = models.CharField(custom=True, db_column='IBAN__c', max_length=255, verbose_name='IBAN', blank=True, null=True)
    kontoinhaber = models.CharField(custom=True, max_length=255, verbose_name='Account Holder', blank=True, null=True)
    sepalastschriftmandat_erteilt = models.BooleanField(custom=True, db_column='SEPALastschriftmandatErteilt__c', verbose_name='SEPA Direct Debit Mandate Granted?', default=models.DEFAULTED_ON_CREATE)
    zahlungskontakt_auto = models.BooleanField(custom=True, verbose_name='Payment Contact', sf_read_only=models.READ_ONLY)
    position = models.CharField(custom=True, max_length=255, blank=True, null=True)
    raumnummer = models.CharField(custom=True, max_length=255, verbose_name='Room Number', blank=True, null=True)
    language = models.CharField(custom=True, max_length=255, choices=[('English', 'English'), ('German', 'German')], blank=True, null=True)
    go_cardless_id = models.CharField(custom=True, max_length=255, verbose_name='GoCardless Id', blank=True, null=True)
    encrypted_ids = models.CharField(custom=True, max_length=255, blank=True, null=True)
    go_cardless_email = models.EmailField(custom=True, verbose_name='GoCardless Email', blank=True, null=True)
    go_cardless_first_name = models.CharField(custom=True, max_length=255, verbose_name='GoCardless First Name', blank=True, null=True)
    go_cardless_last_name = models.CharField(custom=True, max_length=255, verbose_name='GoCardless Last Name', blank=True, null=True)
    go_cardless_phone = models.CharField(custom=True, max_length=40, verbose_name='GoCardless Phone Number', blank=True, null=True)
    go_cardless_language = models.CharField(custom=True, max_length=50, verbose_name='GoCardless Language', blank=True, null=True)
    encrypted_id = models.CharField(custom=True, max_length=255, blank=True, null=True)
    go_cardless_country_code = models.CharField(custom=True, max_length=20, verbose_name='GoCardless Country Code', blank=True, null=True)
    cspassword_token = models.CharField(custom=True, db_column='CSPasswordToken__c', max_length=100, verbose_name='CS Password Token', blank=True, null=True)
    invoice_contact = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    sepamandate_form_auto = models.CharField(custom=True, db_column='SEPAMandateFormAuto__c', max_length=1300, verbose_name='SEPA Mandate Form', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_new_record_helper = models.BooleanField(custom=True, verbose_name='Is New Record?', sf_read_only=models.READ_ONLY)
    student_contact = models.BooleanField(custom=True, verbose_name='StudentContact', default=models.DEFAULTED_ON_CREATE)
    sepamandate_url_auto = models.CharField(custom=True, db_column='SEPAMandateUrlAuto__c', max_length=1300, verbose_name='SEPA Mandate Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recordcreated = models.BooleanField(custom=True, verbose_name='Record Created', default=models.DEFAULTED_ON_CREATE)
    cspassword_time = models.DateTimeField(custom=True, db_column='CSPasswordTime__c', verbose_name='CS Password Time', blank=True, null=True)
    password_change_requested = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    mandate_reference_number = models.CharField(custom=True, max_length=255, blank=True, null=True)
    accountnumber = models.CharField(custom=True, max_length=20, verbose_name='Accountnumber (Last two digits)', blank=True, null=True)
    bank_name = models.CharField(custom=True, max_length=255, blank=True, null=True)
    communication_language_student_ref = models.CharField(custom=True, max_length=1300, verbose_name='Communication Language Student', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cspassword_urlauto = models.CharField(custom=True, db_column='CSPasswordURLAuto__c', max_length=1300, verbose_name='CS Password URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Contact'
        verbose_name = 'Contact'
        verbose_name_plural = 'Contacts'
        # keyPrefix = '003'



class ContactFeed(models.Model):
    parent = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactFeed'
        verbose_name = 'Contact Feed'
        verbose_name_plural = 'Contact Feed'
        # keyPrefix = 'None'



class ContactHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Kontoinhaber__c', 'Account Holder'), ('Account', 'Account Name'), ('Accountnumber__c', 'Accountnumber (Last two digits)'), ('AssistantName', 'Assistant'), ('AssistantPhone', 'Asst. Phone'), ('BankName__c', 'Bank Name'), ('BIC__c', 'BIC'), ('Birthdate', 'Birthdate'), ('contactMerged', 'Contact Merged'), ('Owner', 'Contact Owner'), ('RecordType', 'Contact Record Type'), ('created', 'Created.'), ('contactCreatedFromLead', 'Created by lead convert'), ('CSPasswordTime__c', 'CS Password Time'), ('CSPasswordToken__c', 'CS Password Token'), ('Jigsaw', 'Data.com Key'), ('Department', 'Department'), ('Description', 'Description'), ('DoNotCall', 'Do Not Call'), ('Email', 'Email'), ('EmailBouncedDate', 'Email Bounced Date'), ('EmailBouncedReason', 'Email Bounced Reason'), ('HasOptedOutOfEmail', 'Email Opt Out'), ('EncryptedId__c', 'Encrypted Id'), ('EncryptedIds__c', 'Encrypted Ids'), ('Fax', 'Fax'), ('HasOptedOutOfFax', 'Fax Opt Out'), ('feedEvent', 'Feed event'), ('FirstName', 'First Name'), ('GoCardlessCountryCode__c', 'GoCardless Country Code'), ('GoCardlessEmail__c', 'GoCardless Email'), ('GoCardlessFirstName__c', 'GoCardless First Name'), ('GoCardlessId__c', 'GoCardless Id'), ('GoCardlessLanguage__c', 'GoCardless Language'), ('GoCardlessLastName__c', 'GoCardless Last Name'), ('GoCardlessPhone__c', 'GoCardless Phone Number'), ('HomePhone', 'Home Phone'), ('IBAN__c', 'IBAN'), ('InvoiceContact__c', 'Invoice Contact'), ('Language__c', 'Language'), ('LastName', 'Last Name'), ('contactUpdatedByLead', 'Lead converted to Contact'), ('LeadSource', 'Lead Source'), ('MailingAddress', 'Mailing Address'), ('MailingCity', 'Mailing City'), ('MailingCountry', 'Mailing Country'), ('MailingGeocodeAccuracy', 'Mailing Geocode Accuracy'), ('MailingLatitude', 'Mailing Latitude'), ('MailingLongitude', 'Mailing Longitude'), ('MailingState', 'Mailing State/Province'), ('MailingStreet', 'Mailing Street'), ('MailingPostalCode', 'Mailing Zip/Postal Code'), ('MandateReferenceNumber__c', 'Mandate Reference Number'), ('MobilePhone', 'Mobile'), ('Name', 'Name'), ('OtherAddress', 'Other Address'), ('OtherCity', 'Other City'), ('OtherCountry', 'Other Country'), ('OtherGeocodeAccuracy', 'Other Geocode Accuracy'), ('OtherLatitude', 'Other Latitude'), ('OtherLongitude', 'Other Longitude'), ('OtherPhone', 'Other Phone'), ('OtherState', 'Other State/Province'), ('OtherStreet', 'Other Street'), ('OtherPostalCode', 'Other Zip/Postal Code'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('PasswordChangeRequested__c', 'Password Change Requested'), ('Phone', 'Phone'), ('Position__c', 'Position'), ('Recordcreated__c', 'Record Created'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ReportsTo', 'Reports To'), ('Raumnummer__c', 'Room Number'), ('Salutation', 'Salutation'), ('SEPALastschriftmandatErteilt__c', 'SEPA Direct Debit Mandate Granted?'), ('StudentContact__c', 'StudentContact'), ('Title', 'Title')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactHistory'
        verbose_name = 'Contact History'
        verbose_name_plural = 'Contact History'
        # keyPrefix = 'None'



class ContactShare(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    contact_access_level = models.CharField(max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContactShare'
        verbose_name = 'Contact Share'
        verbose_name_plural = 'Contact Share'
        # keyPrefix = '03s'



class ContentAsset(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentasset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentasset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, related_name='contentasset_contentdocument_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentAsset'
        verbose_name = 'Asset File'
        verbose_name_plural = 'Asset Files'
        # keyPrefix = '03S'



class ContentDistribution(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_createdby_set', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_owner_set')  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=100, verbose_name='Content Delivery Name')
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_record = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Account, Campaign, Case, Contact, CustomerBankAccount__c, DegreeCourse__c, EmailMessage, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Payment__c, Rabatt__c, SystemSettings__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    preferences_allow_pdfdownload = models.BooleanField(db_column='PreferencesAllowPDFDownload', verbose_name='Allow Download as PDF')
    preferences_allow_original_download = models.BooleanField(verbose_name='Allow Download in Original Format')
    preferences_password_required = models.BooleanField(verbose_name='Require Password to Access Content')
    preferences_notify_on_visit = models.BooleanField(verbose_name='Notify Me of First View or Download')
    preferences_link_latest_version = models.BooleanField(verbose_name='Content Delivery Opens Latest Version')
    preferences_allow_view_in_browser = models.BooleanField(verbose_name='Allow View in the Browser')
    preferences_expires = models.BooleanField(verbose_name='Content Delivery Expires')
    preferences_notify_rndtn_complete = models.BooleanField(verbose_name='Email when Preview Images are Ready')
    expiry_date = models.DateTimeField(verbose_name='Expiration Date', blank=True, null=True)
    password = models.CharField(max_length=36, sf_read_only=models.READ_ONLY, blank=True, null=True)
    view_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_view_date = models.DateTimeField(verbose_name='First Viewed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_view_date = models.DateTimeField(verbose_name='Last Viewed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    distribution_public_url = models.CharField(max_length=256, verbose_name='External Link', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDistribution'
        verbose_name = 'Content Delivery'
        verbose_name_plural = 'Content Deliveries'
        # keyPrefix = '05D'



class ContentDistributionView(models.Model):
    distribution = models.ForeignKey(ContentDistribution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    parent_view = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='View Date', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_internal = models.BooleanField(verbose_name='Internal View', sf_read_only=models.READ_ONLY, default=False)
    is_download = models.BooleanField(verbose_name='File Downloaded', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentDistributionView'
        verbose_name = 'Content Delivery View'
        verbose_name_plural = 'Content Delivery Views'
        # keyPrefix = '05H'



class ContentDocument(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    archived_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_archivedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    archived_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_owner_set', sf_read_only=models.NOT_CREATEABLE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE)
    publish_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Private Library')])
    latest_published_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, related_name='contentdocument_latestpublishedversion_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('ContentWorkspace', models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)  # Master Detail Relationship *
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.NOT_CREATEABLE, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    content_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_asset = models.ForeignKey(ContentAsset, models.DO_NOTHING, related_name='contentdocument_contentasset_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocument'
        verbose_name = 'Content Document'
        verbose_name_plural = 'Content Documents'
        # keyPrefix = '069'



class ContentDocumentFeed(models.Model):
    parent = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocumentfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocumentfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentFeed'
        verbose_name = 'ContentDocument Feed'
        verbose_name_plural = 'ContentDocument Feed'
        # keyPrefix = 'None'



class ContentDocumentHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ArchivedBy', 'Archived By'), ('ArchivedDate', 'Archived Date'), ('ContentAsset', 'Asset File Details'), ('created', 'Created.'), ('DeletedBy', 'Deleted By'), ('DeletedDate', 'Deleted Date'), ('contentDocPublished', 'Document Added To Library'), ('contentDocFeatured', 'Document Featured'), ('contentDocRepublished', 'Document Re-added To Library'), ('contentDocUnpublished', 'Document Removed From Library'), ('contentDocSubscribed', 'Document Subscribed to'), ('contentDocUnsubscribed', 'Document Unsubscribed to'), ('feedEvent', 'Feed event'), ('IsArchived', 'Is Archived'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent'), ('PublishStatus', 'Publish Status'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentHistory'
        verbose_name = 'Content Document History'
        verbose_name_plural = 'Content Document History'
        # keyPrefix = 'None'



class ContentDocumentLink(models.Model):
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentWorkspace, Contract, CustomerBankAccount__c, Dashboard, DashboardComponent, DegreeCourse__c, EmailMessage, EmailTemplate, Event, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, OrderItem, Organization, OutgoingEmail, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, Report, Site, SocialPost, Solution, SystemSettings__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    share_type = models.CharField(max_length=40, choices=[('V', 'Viewer'), ('C', 'Collaborator'), ('I', 'Inferred')], blank=True, null=True)
    visibility = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('AllUsers', 'All Users'), ('InternalUsers', 'Standard Users'), ('SharedUsers', 'Shared Users'), ('NoUsers', 'No Users')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentLink'
        verbose_name = 'Content Document Link'
        verbose_name_plural = 'Content Document Link'
        # keyPrefix = '06A'



class ContentFolder(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolder_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolder_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent_content_folder = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentFolder'
        verbose_name = 'Content Folder'
        verbose_name_plural = 'Content Folders'
        # keyPrefix = '07H'



class ContentFolderItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_folder = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolderitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolderitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderItem'
        verbose_name = 'Content Folder Item'
        verbose_name_plural = 'Content Folder Items'
        # keyPrefix = 'None'



class ContentFolderLink(models.Model):
    parent_entity = models.ForeignKey('ContentWorkspace', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    enable_folder_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('S', 'Started'), ('C', 'Completed'), ('F', 'Failed')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderLink'
        verbose_name = 'Content Folder Link'
        verbose_name_plural = 'Content Folder Links'
        # keyPrefix = '07v'



class ContentFolderMember(models.Model):
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE)
    child_record = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfoldermember_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfoldermember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderMember'
        verbose_name = 'Content Folder Member'
        verbose_name_plural = 'Content Folder Members'
        # keyPrefix = '07I'



class ContentVersion(models.Model):
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_latest = models.BooleanField(sf_read_only=models.READ_ONLY)
    content_url = models.URLField(verbose_name='Content URL', blank=True, null=True)
    version_number = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    reason_for_change = models.CharField(max_length=1000, blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', default=models.DEFAULTED_ON_CREATE, choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')])
    path_on_client = models.CharField(max_length=500, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    content_modified_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    content_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_contentmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    positive_rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    negative_rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    featured_content_boost = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    featured_content_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_owner_set')
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    tag_csv = models.TextField(verbose_name='Tags', blank=True, null=True)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY)
    publish_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Private Library')])
    version_data = models.TextField(blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_publish_location = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentWorkspace, Contract, CustomerBankAccount__c, Dashboard, DashboardComponent, DegreeCourse__c, EmailMessage, EmailTemplate, Event, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, OrderItem, Organization, OutgoingEmail, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, Report, Site, SocialPost, Solution, SystemSettings__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c]
    origin = models.CharField(max_length=40, verbose_name='Content Origin', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('C', 'Content'), ('H', 'Chatter')])
    content_location = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('S', 'Salesforce'), ('E', 'External')])
    text_preview = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_document_info1 = models.CharField(max_length=1000, blank=True, null=True)
    external_document_info2 = models.CharField(max_length=1000, blank=True, null=True)
    external_data_source = models.ForeignKey('ExternalDataSource', models.DO_NOTHING, blank=True, null=True)
    checksum = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_major_version = models.BooleanField(verbose_name='Major Version', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_asset_enabled = models.BooleanField(verbose_name='Asset File Enabled', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersion'
        verbose_name = 'Content Version'
        verbose_name_plural = 'Content Versions'
        # keyPrefix = '068'



class ContentVersionHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_version = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ContentUrl', 'Content URL'), ('created', 'Created.'), ('Description', 'Description'), ('ExternalDataSource', 'External Data Source'), ('ExternalDocumentInfo1', 'External Document Info1'), ('ExternalDocumentInfo2', 'External Document Info2'), ('feedEvent', 'Feed event'), ('Language', 'Language'), ('IsMajorVersion', 'Major Version'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('SharingOption', 'Prevent others from sharing and unsharing'), ('ReasonForChange', 'Reason For Change'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title'), ('contentVersionCommented', 'Version Commented'), ('contentVersionCreated', 'Version Created'), ('contentVersionDataReplaced', 'Version Data Replaced'), ('contentVersionDeleted', 'Version Deleted'), ('contentVersionDownloaded', 'Version Downloaded'), ('contentVersionRated', 'Version Rated'), ('contentVersionUpdated', 'Version Updated'), ('contentVersionViewed', 'Version Viewed')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionHistory'
        verbose_name = 'Content Version History'
        verbose_name_plural = 'Content Version History'
        # keyPrefix = 'None'



class ContentWorkspace(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    tag_model = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Unrestricted'), ('G', 'Guided'), ('R', 'Restricted')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentworkspace_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentworkspace_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    default_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_restrict_content_types = models.BooleanField(verbose_name='Restrict Record Types', sf_read_only=models.READ_ONLY, default=False)
    is_restrict_linked_content_types = models.BooleanField(verbose_name='Restrict Linked Record Types', sf_read_only=models.READ_ONLY, default=False)
    workspace_type = models.CharField(max_length=40, verbose_name='Library Type', sf_read_only=models.READ_ONLY, default='R', choices=[('R', 'Regular'), ('B', 'Asset System')], blank=True, null=True)
    last_workspace_activity_date = models.DateTimeField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    root_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspace'
        verbose_name = 'Library'
        verbose_name_plural = 'Libraries'
        # keyPrefix = '058'



class ContentWorkspaceDoc(models.Model):
    content_workspace = models.ForeignKey(ContentWorkspace, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_owner = models.BooleanField(verbose_name='Is Owning Library', sf_read_only=models.READ_ONLY, default=False)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspaceDoc'
        verbose_name = 'Library Document'
        verbose_name_plural = 'Library Documents'
        # keyPrefix = '059'



class Contract(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='contract_account_set')  # Master Detail Relationship *
    owner_expiration_notice = models.CharField(max_length=40, choices=[('15', '15 Days'), ('30', '30 Days'), ('45', '45 Days'), ('60', '60 Days'), ('90', '90 Days'), ('120', '120 Days')], blank=True, null=True)
    start_date = models.DateField(verbose_name='Contract Start Date', blank=True, null=True)
    end_date = models.DateField(verbose_name='Contract End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    contract_term = models.IntegerField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_owner_set')
    status = models.CharField(max_length=40, choices=[('In Approval Process', 'Genehmigungsverfahren läuft'), ('Activated', 'Aktiviert'), ('Draft', 'Entwurf'), ('Deaktiviert', 'Deaktiviert')], default=models.DEFAULTED_ON_CREATE)
    company_signed = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_companysigned_set', blank=True, null=True)
    company_signed_date = models.DateField(blank=True, null=True)
    customer_signed = models.ForeignKey(Contact, models.DO_NOTHING, related_name='contract_customersigned_set', blank=True, null=True)
    customer_signed_title = models.CharField(max_length=40, blank=True, null=True)
    customer_signed_date = models.DateField(blank=True, null=True)
    special_terms = models.TextField(blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_activatedby_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activated_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_code = models.CharField(max_length=40, verbose_name='Status Category', sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')])
    description = models.TextField(blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    last_approved_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    university_ref = models.ForeignKey(Account, models.DO_NOTHING, custom=True, related_name='contract_universityref_set', blank=True, null=True)
    studiengang_ref = models.ForeignKey('DegreeCourse', models.DO_NOTHING, custom=True, blank=True, null=True)
    active = models.BooleanField(custom=True, verbose_name='Aktiv', default=models.DEFAULTED_ON_CREATE)
    payment_interval = models.CharField(custom=True, max_length=255, choices=[('Zu Beginn jeden Monats', 'Beginning of each Month'), ('Zu Beginn jeden Semesters', 'Beginning of each Semester')], blank=True, null=True)
    first_payment = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    cost_per_month = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Cost per Month>Standard Study Period', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_tuition_fees_ref = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Tuition Fees Total', sf_read_only=models.READ_ONLY, blank=True, null=True)
    standard_period_of_study_ref = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Standard Study Period (No. of Semesters)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    payment_terms_auto = models.CharField(custom=True, max_length=1300, verbose_name='Payment Terms', sf_read_only=models.READ_ONLY, blank=True, null=True)
    matriculation_fee_ref = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Matriculation Fee', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_summer_semester_ref = models.CharField(custom=True, max_length=1300, verbose_name='Starting Month Summer Semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    semester_fee_ref = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Semester Fee', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_amount_of_rates_auto = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Rates Total', sf_read_only=models.READ_ONLY, blank=True, null=True)
    student_id_ref = models.CharField(custom=True, max_length=1300, verbose_name='Student ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cost_per_month2 = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Cost per Month', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cost_per_semester = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Cost per Semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    count_invoices = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Count of Invoices', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_of_studies_month_ref = models.CharField(custom=True, max_length=1300, verbose_name='Startmonat Studienbeginn', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_winter_semester_ref = models.CharField(custom=True, max_length=1300, verbose_name='Starting Month Winter Semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    discount_helper_auto = models.DecimalField(custom=True, max_digits=3, decimal_places=0, verbose_name='Discount Helper', sf_read_only=models.READ_ONLY, blank=True, null=True)
    active_discounts = models.BooleanField(custom=True, verbose_name='Aktive Rabatte', sf_read_only=models.READ_ONLY)
    include_in_invoice_creation_process_auto = models.BooleanField(custom=True, verbose_name='Include In Invoice Creation Process', sf_read_only=models.READ_ONLY)
    number_of_invoices_auto = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Invoices', sf_read_only=models.READ_ONLY, blank=True, null=True)
    payment_contact_trig = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, related_name='contract_paymentcontacttrig_set', blank=True, null=True)
    special_fee_auto = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Special Fee', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etsalutation_name_ref = models.CharField(custom=True, db_column='ETSalutationNameRef__c', max_length=1300, verbose_name='ETSalutationName', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_paid_rates_auto = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Number of paid rates', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Contract'
        verbose_name = 'Contract'
        verbose_name_plural = 'Contracts'
        # keyPrefix = '800'



class ContractContactRole(models.Model):
    contract = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Geschäftsbenutzer'), ('Decision Maker', 'Entscheidungsträger'), ('Economic Buyer', 'Einkäufer in der Wirtschaft'), ('Economic Decision Maker', 'Entscheidungsträger in der Wirtschaft'), ('Evaluator', 'Gutachter'), ('Executive Sponsor', 'Leitender Auftraggeber'), ('Influencer', 'Beeinflusser'), ('Technical Buyer', 'Technischer Einkäufer'), ('Other', 'Andere')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractcontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractcontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContractContactRole'
        verbose_name = 'Contract Contact Role'
        verbose_name_plural = 'Contract Contact Role'
        # keyPrefix = '02a'



class ContractFeed(models.Model):
    parent = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractFeed'
        verbose_name = 'Contract Feed'
        verbose_name_plural = 'Contract Feed'
        # keyPrefix = 'None'



class ContractHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActivatedBy', 'Activated By'), ('ActivatedDate', 'Activated Date'), ('Active__c', 'Aktiv'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('CompanySigned', 'Company Signed By'), ('CompanySignedDate', 'Company Signed Date'), ('contractActivation', 'Contract Activated.'), ('contractConversion', 'Contract Converted.'), ('contractDraft', 'Contract Draft.'), ('EndDate', 'Contract End Date'), ('contractExpiration', 'Contract Expired.'), ('contractApproval', 'Contract in Approval.'), ('Name', 'Contract Name'), ('Owner', 'Contract Owner'), ('RecordType', 'Contract Record Type'), ('StartDate', 'Contract Start Date'), ('ContractTerm', 'Contract Term (months)'), ('contractTermination', 'Contract Terminated.'), ('created', 'Created.'), ('CustomerSigned', 'Customer Signed By'), ('CustomerSignedDate', 'Customer Signed Date'), ('CustomerSignedTitle', 'Customer Signed Title'), ('StudiengangRef__c', 'Degree Course'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('FirstPayment__c', 'First Payment'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('OwnerExpirationNotice', 'Owner Expiration Notice'), ('PaymentContactTrig__c', 'Payment Contact'), ('PaymentInterval__c', 'Payment Interval'), ('Pricebook2', 'Price Book'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('SpecialTerms', 'Special Terms'), ('Status', 'Status'), ('UniversityRef__c', 'University')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractHistory'
        verbose_name = 'Contract History'
        verbose_name_plural = 'Contract History'
        # keyPrefix = 'None'



class ContractStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContractStatus'
        verbose_name = 'Contract Status Value'
        verbose_name_plural = 'Contract Status Value'
        # keyPrefix = 'None'



class CorsWhitelistEntry(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='corswhitelistentry_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='corswhitelistentry_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    url_pattern = models.CharField(max_length=255, verbose_name='Origin URL Pattern')
    class Meta(models.Model.Meta):
        db_table = 'CorsWhitelistEntry'
        verbose_name = 'CORS Whitelist Origin'
        verbose_name_plural = 'CORS Whitelist Origins'
        # keyPrefix = '074'



class CountryMappingMdt(models.Model):
    developer_name = models.CharField(max_length=40, verbose_name='Custom Metadata Record Name', sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=40, verbose_name='Label', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_code = models.CharField(custom=True, max_length=3, sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_name = models.CharField(custom=True, max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CountryMapping__mdt'
        verbose_name = 'CountryMapping'
        verbose_name_plural = 'CountryMappings'
        # keyPrefix = 'm02'



class CronJobDetail(models.Model):
    name = models.CharField(max_length=255, verbose_name='Job Name', sf_read_only=models.READ_ONLY)
    job_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('1', 'Data Export'), ('3', 'Dashboard Refresh'), ('4', 'Reporting Snapshot'), ('7', 'Scheduled Apex'), ('8', 'Report Run'), ('9', 'Batch Job'), ('A', 'Reporting Notification')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CronJobDetail'
        verbose_name = 'Cron Job'
        verbose_name_plural = 'Cron Job'
        # keyPrefix = '08a'



class CronTrigger(models.Model):
    cron_job_detail = models.ForeignKey(CronJobDetail, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    next_fire_time = models.DateTimeField(verbose_name='Next Run Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    previous_fire_time = models.DateTimeField(verbose_name='Previous Run Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=16, verbose_name='Job State', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_time = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_time = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    cron_expression = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Java Time Zone Id', sf_read_only=models.READ_ONLY, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (New South Wales) (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (South Australia) (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) Eastern Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    times_triggered = models.IntegerField(verbose_name='Job Fired Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CronTrigger'
        verbose_name = 'Scheduled Jobs'
        verbose_name_plural = 'Scheduled Jobs'
        # keyPrefix = '08e'



class CspTrustedSite(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Trusted Site Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='csptrustedsite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='csptrustedsite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    endpoint_url = models.CharField(max_length=255, verbose_name='Trusted Site URL')
    description = models.TextField(blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'CspTrustedSite'
        verbose_name = 'Content Security Policy Trusted Site'
        verbose_name_plural = 'Content Security Policy Trusted Sites'
        # keyPrefix = '08y'



class CustomBrand(models.Model):
    parent = models.ForeignKey('Organization', models.DO_NOTHING)  # Reference to tables [Organization, Stamp, Topic] Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrand_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrand_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomBrand'
        verbose_name = 'Custom Brand'
        verbose_name_plural = 'Custom Brand'
        # keyPrefix = '07W'



class CustomBrandAsset(models.Model):
    custom_brand = models.ForeignKey(CustomBrand, models.DO_NOTHING)  # Master Detail Relationship *
    asset_category = models.CharField(max_length=40, choices=[('MotifZeronaryColor', 'Zeronary motif color'), ('MotifPrimaryColor', 'Primary motif color'), ('MotifSecondaryColor', 'Secondary motif color'), ('MotifTertiaryColor', 'Tertiary motif color'), ('MotifQuaternaryColor', 'Quaternary motif color'), ('MotifZeronaryComplementColor', 'Zeronary motif colors compelement color'), ('MotifPrimaryComplementColor', 'Primary motif colors compelement color'), ('MotifTertiaryComplementColor', 'Tertiary motif colors compelement color'), ('MotifQuaternaryComplementColor', 'Quaternary motif colors complement color'), ('PageHeader', 'Page Header'), ('PageFooter', 'Page Footer'), ('LoginFooterText', 'Footer text displayed on the login page'), ('LoginLogoImageId', 'Logo image displayed on the login page'), ('LargeLogoImageId', 'Large logo image'), ('MediumLogoImageId', 'Medium logo image'), ('SmallLogoImageId', 'Small logo image')])
    text_asset = models.CharField(max_length=333, blank=True, null=True)
    foreign_key_asset = models.ForeignKey('Document', models.DO_NOTHING, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrandasset_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrandasset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomBrandAsset'
        verbose_name = 'Custom Brand Asset'
        verbose_name_plural = 'Custom Brand Asset'
        # keyPrefix = '07X'



class CustomObjectUserLicenseMetrics(models.Model):
    metrics_date = models.DateField(sf_read_only=models.READ_ONLY)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    custom_object_id = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    custom_object_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Enterprise', 'Enterprise'), ('Light', 'Light')], blank=True, null=True)
    custom_object_name = models.CharField(max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    object_count = models.IntegerField(verbose_name='Count of Objects assigned', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomObjectUserLicenseMetrics'
        verbose_name = 'Custom Object Usage By User License Metric'
        verbose_name_plural = 'Custom Object Usage By User License Metrics'
        # keyPrefix = '3NA'



class CustomPermission(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_protected = models.BooleanField(verbose_name='Protected Component', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermission_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermission_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomPermission'
        verbose_name = 'Custom Permission'
        verbose_name_plural = 'Custom Permissions'
        # keyPrefix = '0CP'



class CustomPermissionDependency(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermissiondependency_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermissiondependency_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, related_name='custompermissiondependency_custompermission_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    required_custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, related_name='custompermissiondependency_requiredcustompermission_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'CustomPermissionDependency'
        verbose_name = 'Custom Permission Dependency'
        verbose_name_plural = 'Custom Permission Dependencies'
        # keyPrefix = '0PD'



class CustomerBankAccountHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('CustomerBankAccount', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AccountHolderName__c', 'Account Holder Name'), ('AccountNumber__c', 'Account Number(last 2 digits)'), ('BankName__c', 'Bank Name'), ('CountryCode__c', 'Country Code'), ('created', 'Created.'), ('CurrencyIsoCode__c', 'Currency'), ('CustomerRef__c', 'Customer'), ('CustomerBankAccountGoCardlessId__c', 'Customer Bank Account GoCardless Id'), ('Name', 'Customer Bank Account Name'), ('Enabled__c', 'Enabled'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomerBankAccount__History'
        verbose_name = 'History: Customer Bank Account'
        verbose_name_plural = 'History: Customer Bank Account'
        # keyPrefix = 'None'



class CustomerBankAccount(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Customer Bank Account Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='customerbankaccount_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='customerbankaccount_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    customer_ref = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    account_holder_name = models.CharField(custom=True, max_length=255, blank=True, null=True)
    account_number = models.CharField(custom=True, max_length=20, verbose_name='Account Number(last 2 digits)', blank=True, null=True)
    bank_name = models.CharField(custom=True, max_length=255, blank=True, null=True)
    country_code = models.CharField(custom=True, max_length=4, blank=True, null=True)
    enabled = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    customer_bank_account_go_cardless_id = models.CharField(custom=True, max_length=255, verbose_name='Customer Bank Account GoCardless Id', blank=True, null=True)
    currency_iso_code = models.CharField(custom=True, max_length=10, verbose_name='Currency', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomerBankAccount__c'
        verbose_name = 'Customer Bank Account'
        verbose_name_plural = 'Customer Bank Accounts'
        # keyPrefix = 'a0D'



class Dashboard(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    folder = models.ForeignKey('Folder', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Folder, User]
    folder_name = models.CharField(max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Dashboard Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    left_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    middle_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')], blank=True, null=True)
    right_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    running_user = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_runninguser_set', sf_read_only=models.READ_ONLY)
    title_color = models.IntegerField(sf_read_only=models.READ_ONLY)
    title_size = models.IntegerField(sf_read_only=models.READ_ONLY)
    text_color = models.IntegerField(sf_read_only=models.READ_ONLY)
    background_start = models.IntegerField(verbose_name='Starting Color', sf_read_only=models.READ_ONLY)
    background_end = models.IntegerField(verbose_name='Ending Color', sf_read_only=models.READ_ONLY)
    background_direction = models.CharField(max_length=40, verbose_name='Background Fade Direction', sf_read_only=models.READ_ONLY, default='Diagonal', choices=[('TopToBottom', 'Top to Bottom'), ('LeftToRight', 'Left to Right'), ('Diagonal', 'Diagonal')])
    type = models.CharField(max_length=40, verbose_name='Dashboard Running User', sf_read_only=models.READ_ONLY, default='SpecifiedUser', choices=[('SpecifiedUser', 'Run as specified user'), ('LoggedInUser', 'Run as logged-in user'), ('MyTeamUser', 'Let authorized users change running user')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard_result_refreshed_date = models.CharField(max_length=256, verbose_name='Last refreshed for this user', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard_result_running_user = models.CharField(max_length=256, verbose_name='Running as', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Dashboard'
        verbose_name = 'Dashboard'
        verbose_name_plural = 'Dashboards'
        # keyPrefix = '01Z'



class DashboardComponent(models.Model):
    name = models.CharField(max_length=80, verbose_name='Dashboard Component Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard = models.ForeignKey(Dashboard, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    custom_report = models.ForeignKey('Report', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponent'
        verbose_name = 'Dashboard Component'
        verbose_name_plural = 'Dashboard Components'
        # keyPrefix = '01a'



class DashboardComponentFeed(models.Model):
    parent = models.ForeignKey(DashboardComponent, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardcomponentfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardcomponentfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponentFeed'
        verbose_name = 'Dashboard Component Feed'
        verbose_name_plural = 'Dashboard Component Feed'
        # keyPrefix = 'None'



class DashboardFeed(models.Model):
    parent = models.ForeignKey(Dashboard, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardFeed'
        verbose_name = 'Dashboard Feed'
        verbose_name_plural = 'Dashboard Feed'
        # keyPrefix = 'None'



class DataAssessmentFieldMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Field Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentfieldmetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentfieldmetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    data_assessment_metric = models.ForeignKey('DataAssessmentMetric', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    field_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_in_sync = models.IntegerField(verbose_name='Number of Matched Records that have the same value for this field as Data.com', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_different = models.IntegerField(verbose_name='Number of Matched Records that have different value for this field than Data.com', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_blanks = models.IntegerField(verbose_name='Number of Matched Records that have blanks for this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_unmatched_blanks = models.IntegerField(verbose_name='Number of Unmatched Records that have blanks for this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentFieldMetric'
        verbose_name = 'Data Assessment Field Metric'
        verbose_name_plural = 'Data Assessment Field Metrics'
        # keyPrefix = '03Q'



class DataAssessmentMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentmetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentmetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    num_total = models.IntegerField(verbose_name='Total Number of Records to access', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_processed = models.IntegerField(verbose_name='Number of Processed Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched = models.IntegerField(verbose_name='Number of Matched Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_different = models.IntegerField(verbose_name='Number of Matched Records with different field values', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_unmatched = models.IntegerField(verbose_name='Number of Unmatched Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_duplicates = models.IntegerField(verbose_name='Number of Duplicates', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentMetric'
        verbose_name = 'Data Assessment Metric'
        verbose_name_plural = 'Data Assessment Metrics'
        # keyPrefix = '03P'



class DataAssessmentValueMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Field Value Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentvaluemetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentvaluemetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    data_assessment_field_metric = models.ForeignKey(DataAssessmentFieldMetric, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    field_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_count = models.IntegerField(verbose_name='Number of times this value appears in this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentValueMetric'
        verbose_name = 'Data Assessment Field Value Metric'
        verbose_name_plural = 'Data Assessment Field Value Metrics'
        # keyPrefix = '03R'



class DataStatistics(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='ExternalId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stat_type = models.CharField(max_length=255, verbose_name='StatType', sf_read_only=models.READ_ONLY, choices=[('RecordCount', 'RecordCount'), ('UserAccessRecordCount', 'UserAccessRecordCount'), ('DeletedCount', 'DeletedCount')], blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('AcceptedEventRelation', None), ('AcceptedRecommendation', None), ('Account', None), ('AccountContactRole', None), ('AccountPartner', None), ('ActionApex', None), ('ActionAssignEscalate', None), ('ActionAssignTeam', None), ('ActionChatterPost', None), ('ActionChatterPostRecipient', None), ('ActionEmail', None), ('ActionEmailRecipient', None), ('ActionFieldUpdate', None), ('ActionFlow', None), ('ActionFlowParam', None), ('ActionLink', None), ('ActionLinkGroup', None), ('ActionLinkGroupAssoc', None), ('ActionLinkGroupTemplate', None), ('ActionLinkTemplate', None), ('ActionLinkTemplateBinding', None), ('ActionLinkUserState', None), ('ActionOutboundMessage', None), ('ActionOverride', None), ('ActionQuickCreate', None), ('ActionResponse', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('ActivityHistory', None), ('ActivityRelation', None), ('AdditionalNumber', None), ('AddressCountry', None), ('AddressState', None), ('AdminUser', None), ('AggregateResult', None), ('AllInstalledPackageVersion', None), ('AllManagedClassRelationship', None), ('AllManagedMemberOption', None), ('AllManagedPackageMember', None), ('AllOrganization', None), ('AllOrganizationValue', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllPackageVersionLm', None), ('AllUsersBasic', None), ('AnalyticAction', None), ('AnalyticActionConfiguration', None), ('AnalyticCondition', None), ('AnalyticNotification', None), ('AnalyticThreshold', None), ('AndroidPushApplicationSetup', None), ('Announcement', None), ('ApexClass', None), ('ApexClassIdentifier', None), ('ApexClassIdentifierRelationship', None), ('ApexClassMember', None), ('ApexCodeCoverage', None), ('ApexCodeCoverageAggregate', None), ('ApexComponent', None), ('ApexComponentAttribute', None), ('ApexComponentMember', None), ('ApexDebuggerEvent', None), ('ApexDebuggerSession', None), ('ApexEmailNotification', None), ('ApexExecutionOverlayAction', None), ('ApexExecutionOverlayResult', None), ('ApexLog', None), ('ApexOrgWideCoverage', None), ('ApexPackage', None), ('ApexPackageIdentifier', None), ('ApexPage', None), ('ApexPageInfo', None), ('ApexPageMember', None), ('ApexTestQueueItem', None), ('ApexTestResult', None), ('ApexTestResultLimits', None), ('ApexTestRunResult', None), ('ApexTestSuite', None), ('ApexTrigger', None), ('ApexTriggerMember', None), ('ApiCapture', None), ('ApiLoginKey', None), ('ApiUsage', None), ('AppBrand', None), ('AppDefinition', None), ('AppIpRange', None), ('ApplePushApplicationSetup', None), ('Application', None), ('ApplicationDependency', None), ('AppManifest', None), ('AppManifestVersion', None), ('AppMenuItem', None), ('AppNotificationType', None), ('AppNotifTypeOrgSetting', None), ('AppNotifTypeUserSetting', None), ('AppTabMember', None), ('AqtAwrData', None), ('AqtCompoundRecommendedIndex', None), ('AqtCreatedIndex', None), ('AqtImportRequest', None), ('AqtImportRequestIndex', None), ('AqtLongRunningRequestData', None), ('AqtRecommendedIndex', None), ('AqtRIRequestMap', None), ('AQTWorkloadData', None), ('Asset', None), ('AssetRelationship', None), ('AssetTokenEvent', None), ('AssignmentRule', None), ('AssistantInteraction', None), ('AssistantProgress', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiBatchOptions', None), ('AsyncApiChunkResults', None), ('AsyncApiJob', None), ('AsyncApiJobOptions', None), ('AsyncApiQueryResult', None), ('AsyncApiTransformationSpec', None), ('AsyncRequest', None), ('AsyncRequestFFX', None), ('AsyncRequestFFXResult', None), ('AttachedContentDocument', None), ('Attachment', None), ('AudienceMembership', None), ('Auditable', None), ('AuraDefinition', None), ('AuraDefinitionBundle', None), ('AuraDefinitionBundleInfo', None), ('AuraDefinitionChange', None), ('AuraDefinitionInfo', None), ('AuraResource', None), ('AuthConfig', None), ('AuthConfigProviders', None), ('AuthProvider', None), ('AuthSecurityLevel', None), ('AuthSession', None), ('AutoActivityCaptureMetrics', None), ('AutoResponseRule', None), ('AvroSchema', None), ('BackgroundOperation', None), ('BatchApexRelationship', None), ('BlacklistedConsumer', None), ('Branch', None), ('BranchMerge', None), ('BrandingValue', None), ('BrandTemplate', None), ('BuffaloMigrationEvent', None), ('BuffaloMigrationManagement', None), ('BuffaloOrgEstimate', None), ('BulkDedupeJob', None), ('BusinessHours', None), ('BusinessProcess', None), ('BusinessProcessPicklist', None), ('Calendar', None), ('CalendarShare', None), ('CallCenter', None), ('Campaign', None), ('CampaignInfluenceAdjustment', None), ('CampaignInfluenceModel', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Canvas', None), ('CanvasFeedItem', None), ('CaptchaKey', None), ('Case', None), ('CaseContactRole', None), ('CaseEscalation', None), ('CaseHistory2', None), ('CaseSolution', None), ('CaseStatus', None), ('CategoryAccess', None), ('CategoryData', None), ('CategoryJobTask', None), ('CategoryNode', None), ('Certificate', None), ('CertificateIp', None), ('ChangeList', None), ('ChangeListBranch', None), ('ChangeSetDeployHistory', None), ('ChangeSetDeployMessage', None), ('ChangeSetUploadHistory', None), ('ChatSession', None), ('ChatSessionMembers', None), ('ChatterActivity', None), ('ChatterActivityDailyMetrics', None), ('ChatterConversation', None), ('ChatterConversationMember', None), ('ChatterExtension', None), ('ChatterExtensionInstance', None), ('ChatterGroupConMetrics', None), ('ChatterMessage', None), ('ChatterMessageThread', None), ('ChatterMetrics', None), ('ChatterNowUserFavorites', None), ('ChatterNowUserSettings', None), ('ChatterOrgWideMetrics', None), ('ChatterUniqueContributorDailyMetrics', None), ('ChatterUserNetworkMetrics', None), ('ChunkableEntityChunk', None), ('ChunkableEntityChunk2', None), ('ChunkableEntityTally', None), ('ChunkableEntityTally2', None), ('ChunkableTask', None), ('ChunkableTask2', None), ('CleanActivityLog', None), ('CleanDataService', None), ('CleanEntityError', None), ('CleanInfo', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupMemberRequest', None), ('CollaborationGroupRecord', None), ('CollaborationInvitation', None), ('CollaborativeFilteringItem_to_Item', None), ('CollaborativeFilteringItem2Item', None), ('ColorDefinition', None), ('CombinedAttachment', None), ('CommChannelLayout', None), ('CommChannelLayoutItem', None), ('CommChannelLayoutMapping', None), ('Community', None), ('CompactLayout', None), ('CompactLayoutInfo', None), ('CompactLayoutItem', None), ('CompactLayoutItemInfo', None), ('CompactLayoutMapping', None), ('ComponentAppVersion', None), ('ComponentFeatureDependency', None), ('ComponentInstance', None), ('ComponentInstanceProperty', None), ('ComponentObjectDependency', None), ('ComponentResourceLink', None), ('ComponentResponseCache', None), ('ConnectedApplication', None), ('ConnectedApplication2', None), ('ConnectedAppOauthPolicy', None), ('ConnectedAppPlugin', None), ('ConnectedAppSessionPolicy', None), ('ConnectivityAttributes', None), ('ConnectivityDevConfig', None), ('ConsoleConfig', None), ('ConsoleConfigItem', None), ('ConsolePersonalization', None), ('ConsoleSidebarContainer', None), ('Contact', None), ('ContainerAsyncRequest', None), ('ContentAsset', None), ('ContentBody', None), ('ContentDispositionAssignment', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentDocumentSubscription', None), ('ContentFolder', None), ('ContentFolderItem', None), ('ContentFolderLink', None), ('ContentFolderMember', None), ('ContentLogMetricsByFileType', None), ('ContentLogMetricsByOrg', None), ('ContentMetrics', None), ('ContentNote', None), ('ContentNotification', None), ('ContentNotificationParam', None), ('ContentOrgMetrics', None), ('ContentReference', None), ('ContentRenditionPolicy', None), ('ContentTagName', None), ('ContentTagSubscription', None), ('ContentUserSubscription', None), ('ContentVersion', None), ('ContentVersionComment', None), ('ContentVersioningPolicy', None), ('ContentVersionMap', None), ('ContentVersionRating', None), ('ContentVersionRenditionContent', None), ('ContentVersionTagName', None), ('ContentWorkspace', None), ('ContentWorkspaceAllowedRecType', None), ('ContentWorkspaceDoc', None), ('ContentWorkspaceMember', None), ('ContentWorkspacePermission', None), ('ContentWorkspaceRecentEvent', None), ('ContentWorkspaceSubscription', None), ('ContextFieldAttributes', None), ('Contract', None), ('ContractContactRole', None), ('ContractStatus', None), ('CooperSettingsMetrics', None), ('CopyEntityTally', None), ('CopyEntityTally2', None), ('CopyExport', None), ('CopyExportChunk', None), ('CopyExportChunk2', None), ('CopyExportObserverInfo', None), ('CopyImport', None), ('CopyImportChunk', None), ('CopyImportChunk2', None), ('CopySuspension', None), ('CorsWhitelistEntry', None), ('CronFiredTrigger', None), ('CronJobDetail', None), ('CronTrigger', None), ('CrtColumn', None), ('CrtLayoutSection', None), ('CrtObject', None), ('CsnDomain', None), ('CspFrameAncestor', None), ('CspTrustedSite', None), ('CustomAppMetrics', None), ('CustomBrand', None), ('CustomBrandAsset', None), ('CustomConsoleComponent', None), ('CustomDataType', None), ('CustomDataTypeComponent', None), ('CustomEntityDefinition', None), ('CustomEntityTranslation', None), ('CustomEntityTruncateInfo', None), ('CustomFieldDataColumn', None), ('CustomFieldDefinition', None), ('CustomFieldMap', None), ('CustomFieldMember', None), ('CustomIndex', None), ('CustomIndexUsage', None), ('CustomObjectUsageMetrics', None), ('CustomObjectUserLicenseMetrics', None), ('CustomPage', None), ('CustomPageItem', None), ('CustomPageProfile', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('CustomSetup', None), ('CustomSetupDefinition', None), ('CustomShareRowCause', None), ('CustomTabDefinition', None), ('Dashboard', None), ('DashboardComponent', None), ('DashboardFilter', None), ('DashboardFilterItem', None), ('DashboardFilterRepCol', None), ('DashboardGridComponent', None), ('DashboardGridLayout', None), ('DashboardStickyFilter', None), ('DataAssessmentBIMetrics', None), ('DataAssessmentConfigItem', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentRecord', None), ('DataAssessmentValueMetric', None), ('DataCategory', None), ('DataCategoryGroup', None), ('DatacloudAddress', None), ('DatacloudDandBCompany', None), ('DatacloudIndustry', None), ('DatacloudIndustryChapter', None), ('DatacloudIndustryCode', None), ('DatacloudIndustryContent', None), ('DatacloudIndustrySubChapter', None), ('DataDotComListPoolMetrics', None), ('Dataflow', None), ('DataflowGroupDependency', None), ('DataflowGroupMember', None), ('DataflowGroupTrigger', None), ('DataflowInstance', None), ('DataflowNode', None), ('DataflowNotification', None), ('DataflowRequest', None), ('DataflowVersion', None), ('DatasetAccess', None), ('DatasetRegister', None), ('DataStatistics', None), ('DataType', None), ('DBCThumbnail', None), ('DBCThumbnailFilter', None), ('DbLockUsage', None), ('DebugLevel', None), ('DeclarativePlatformMetrics', None), ('DeclinedEventRelation', None), ('DelegateGroup', None), ('DelegateGroupGrant', None), ('DelegateGroupMember', None), ('DependentPicklist', None), ('DeployDirection', None), ('DeployMessage', None), ('DeployRequest', None), ('DeployTestResult', None), ('DevelopmentPackageVersion', None), ('DirectGroupMember', None), ('DirectMessage', None), ('DirectMessageMember', None), ('DirectMessageMemberActivity', None), ('DiscoveryUserLicense', None), ('DivTransferEvent', None), ('Document', None), ('DocumentAttachmentMap', None), ('Domain', None), ('DomainCookieStore', None), ('DomainProvision', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('DuplicateRuleFilter', None), ('DuplicateRuleFilterItem', None), ('DuplicateRuleJob', None), ('DuplicateRuleMatchRule', None), ('EclairNgMap', None), ('EclairNgMapGeoJson', None), ('EltWorkflow', None), ('EmailBrand', None), ('EmailCapture', None), ('EmailConfigEntitySetting', None), ('EmailDisclaimer', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailSyncAdvancedSetting', None), ('EmailSyncConfig', None), ('EmailSyncEntitySetting', None), ('EmailSyncFieldMapping', None), ('EmailSyncValueMapping', None), ('EmailTemp', None), ('EmailTempAttachmentMap', None), ('EmailTemplate', None), ('EmailUserEntitySetting', None), ('EmbeddedServiceBranding', None), ('EmbeddedServiceConfig', None), ('EmbeddedServiceDetail', None), ('Endorsement', None), ('EntityBlacklist', None), ('EntityCategoryGroup', None), ('EntityDataSize', None), ('EntityDefinition', None), ('EntityFeedLayout', None), ('EntityHistory', None), ('EntityImplements', None), ('EntityIndexingPriority', None), ('EntityLimit', None), ('EntityLock', None), ('EntityParticle', None), ('EntitySharingModel', None), ('EntitySubscription', None), ('EscalationRule', None), ('Event', None), ('EventAssociationItem', None), ('EventAttendee', None), ('EventBusSchemaHistory', None), ('EventBusSubscriber', None), ('EventComments', None), ('EventDeliveryData', None), ('EventLogFile', None), ('EventLogFileMetrics', None), ('EventParameterData', None), ('EventRecurrenceException', None), ('EventRelation', None), ('EventSubscriptionData', None), ('EventSubscriptionHandleData', None), ('EventWhoRelation', None), ('ExchangeUserMapping', None), ('ExecutionPlan', None), ('Experiment', None), ('ExperimentRequest', None), ('ExternalCredential', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalIdMap', None), ('ExternalizedReference', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('ExtIdentityLoginMetrics', None), ('FeatureLicense', None), ('FeedActionDefinition', None), ('FeedActionState', None), ('FeedAttachment', None), ('FeedChannel', None), ('FeedChannelSubscription', None), ('FeedClumpInfo', None), ('FeedClumpMapping', None), ('FeedComment', None), ('FeedCrossReference', None), ('FeedEntityRead', None), ('FeedEntityUnpublished', None), ('FeedEntry', None), ('FeedFavorite', None), ('FeedFieldHistory', None), ('FeedFilterCriterion', None), ('FeedFilterDefinition', None), ('FeedItem', None), ('FeedLike', None), ('FeedMapping', None), ('FeedMute', None), ('FeedPollChoice', None), ('FeedPollVote', None), ('FeedPost', None), ('FeedPostTemplate', None), ('FeedPostTemplateItem', None), ('FeedRead', None), ('FeedRecommendationInfo', None), ('FeedRevision', None), ('FeedTrackedChange', None), ('FieldAttributes', None), ('FieldDefinition', None), ('FieldHistory', None), ('FieldImplements', None), ('FieldMapping', None), ('FieldMappingField', None), ('FieldMappingRow', None), ('FieldPermissions', None), ('FieldSet', None), ('FieldSetItem', None), ('FileFieldData', None), ('FileSearchActivity', None), ('FirehoseCheckpoint', None), ('FiscalYearSettings', None), ('FlexiPage', None), ('FlexiPageRegion', None), ('FlexQueueItem', None), ('FlowDefinition', None), ('FlowInterview', None), ('FlowVariableAssignment', None), ('Folder', None), ('FolderedContentDocument', None), ('ForecastingCategoryMapping', None), ('ForecastingCompositeKey', None), ('ForecastingDisplayedFamily', None), ('ForecastShare', None), ('FormulaFunction', None), ('FormulaFunctionCategory', None), ('FormulaOperator', None), ('FormulaParticle', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('FTestMetadataCatalogEntity', None), ('FTestSystemCatalogEntity', None), ('FTestToolingFLUInfo', None), ('GatherStatsTaskInfo', None), ('GitHubPushOperation', None), ('GitHubRepositoryLink', None), ('GlobalDbKey', None), ('GlobalOrganization', None), ('GlobalVariable', None), ('GlobalVariableType', None), ('GrantedByLicense', None), ('GridforceJob', None), ('Group', None), ('GroupBlowout', None), ('GroupMember', None), ('GroupSubscription', None), ('HadoopCounter', None), ('HadoopJob', None), ('HistoricalDataFilter', None), ('HistoricalDataFilterItem', None), ('HistoricalEntityConfig', None), ('HistoricalFieldConfig', None), ('HistoricalSelector', None), ('HistoricalSelectorValue', None), ('HistoricalStaging', None), ('HistoricalTransactionPrefix', None), ('Holiday', None), ('IconDefinition', None), ('Idea', None), ('IdeaMetrics', None), ('IdeaReputationLevel', None), ('IDEPerspective', None), ('IDEWorkspace', None), ('IdpEventLog', None), ('ImportQueue', None), ('InboundChangeSet', None), ('InboundSocialPost', None), ('IncrementalCandidate', None), ('IndexKeyDefinition', None), ('IndexKeyDefinitionItem', None), ('InstalledMobileApp', None), ('InstalledPackageVersion', None), ('InstalledSubscriberPackage', None), ('InstanceDirective', None), ('InstancePerm', None), ('InstanceSizeJob', None), ('IntelligenceField', None), ('InteractionActionCall', None), ('InteractionActionCallParam', None), ('InteractionAllocation', None), ('InteractionAllocator', None), ('InteractionApexCall', None), ('InteractionChoice', None), ('InteractionChoiceLookup', None), ('InteractionCondition', None), ('InteractionConnector', None), ('InteractionConstant', None), ('InteractionCountReport', None), ('InteractionDataColumn', None), ('InteractionDataInput', None), ('InteractionDataOutput', None), ('InteractionDataSource', None), ('InteractionDecision', None), ('InteractionDefinitionVersion', None), ('InteractionFieldValue', None), ('InteractionForm', None), ('InteractionFormula', None), ('InteractionLayoutDetail', None), ('InteractionLayoutGroup', None), ('InteractionLoop', None), ('InteractionMetadataValue', None), ('InteractionOperand', None), ('InteractionQuestion', None), ('InteractionReference', None), ('InteractionRefOrValue', None), ('InteractionResource', None), ('InteractionScreenRule', None), ('InteractionScreenRuleAction', None), ('InteractionStatement', None), ('InteractionSwitch', None), ('InteractionTodo', None), ('InteractionValueList', None), ('InteractionValueListEntry', None), ('InteractionVariable', None), ('InteractionWait', None), ('InteractionWaitEvent', None), ('InteractionWaitEventParam', None), ('InvocableAction', None), ('InvocableActionParameter', None), ('InvocableActionPicklist', None), ('IpWhitelist', None), ('JiffyTrace', None), ('JigsawSavedSearch', None), ('KanbanView', None), ('KnowledgeableUser', None), ('LabelData', None), ('LabelDefinition', None), ('Layout', None), ('LayoutItem', None), ('LayoutItemActionRef', None), ('LayoutItemColumn', None), ('LayoutParticle', None), ('LayoutRightPanel', None), ('LayoutSection', None), ('LayoutSectionState', None), ('Lead', None), ('LeadConvertMapping', None), ('LeadConvertSettings', None), ('LeadStatus', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('LightningComponentMetrics', None), ('LightningServiceMetrics', None), ('LimitUsageHistory', None), ('ListColumn', None), ('ListLayout', None), ('ListLayoutItem', None), ('ListPoolUsage', None), ('ListView', None), ('ListViewChart', None), ('ListViewChartInstance', None), ('ListViewCriterion', None), ('ListViewDisplayColumn', None), ('LmaApiSession', None), ('LocalizedValue', None), ('LocalNamespace', None), ('LogAnalysisItem', None), ('LogAnalysisRun', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginGeo', None), ('LoginHistory', None), ('LoginHours', None), ('LoginIp', None), ('LoginIpEmail', None), ('LoginIpRange', None), ('LogSearch', None), ('LogSearchResult', None), ('LookedUpFromActivity', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('MailAppExchangeUserMap', None), ('MailAppExchangeWhitelist', None), ('MailAppOwaWhitelist', None), ('MailAppSettings', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('ManagedTopicLocation', None), ('MassMail', None), ('MatchIndexDefinition', None), ('MatchIndexValue', None), ('MatchingInformation', None), ('MatchingRule', None), ('MatchingRuleItem', None), ('MatchingRuleJob', None), ('MaterializedFeedEntry', None), ('MenuItem', None), ('MessageIdentifier', None), ('MetadataChangeTemplate', None), ('MetadataContainer', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetadataContent', None), ('MetadataIdentifier', None), ('MetadataPackage', None), ('MetadataPackageVersion', None), ('MetricsDataFile', None), ('MetricsTransmissionHistory', None), ('MobileApplicationDetail', None), ('MobileConfig', None), ('MobileDevice', None), ('MobileEntitySetting', None), ('MobileExcludedField', None), ('MobileMarkedRecord', None), ('MobilePushServiceDevice', None), ('MobilePushSetupRegistry', None), ('MobilePushUserUpdate', None), ('MobileSession', None), ('MobileTab', None), ('MobileView', None), ('MobileViewDisplayColumn', None), ('MobileViewFilter', None), ('MobileViewSortColumn', None), ('Module', None), ('ModuleDependency', None), ('MqSlaJob', None), ('MqSlaRequest', None), ('Mru', None), ('MultiCurrency', None), ('Name', None), ('Nameable', None), ('NamedCredential', None), ('NamedFilter', None), ('NameUnion', None), ('NetworkCustomerLoginMetrics', None), ('NetworkPartnerLoginMetrics', None), ('NetworkPowerCustomerLoginMetrics', None), ('NewsFeed', None), ('Note', None), ('NoteAndAttachment', None), ('NotifDeliveryUserPref', None), ('NotificationMember', None), ('NotifTypeOrgSetting', None), ('NotifTypeUserSetting', None), ('OauthConsumer', None), ('OauthConsumerAsset', None), ('OauthConsumerScope', None), ('OauthToken', None), ('OauthTokenLocal', None), ('ObjectMapping', None), ('ObjectMappingField', None), ('ObjectPermissions', None), ('OpenActivity', None), ('OperationLog', None), ('Opportunity', None), ('OpportunityAlert', None), ('OpportunityCompetitor', None), ('OpportunityContactRole', None), ('OpportunityHistory', None), ('OpportunityLineItem', None), ('OpportunityMetrics', None), ('OpportunityPartner', None), ('OpportunitySplitMetrics', None), ('OpportunityStage', None), ('OpportunityUpdateReminder', None), ('OpptyAndPricingMetrics', None), ('OptimizerMetricsAverage', None), ('OracleAwrSqlignore', None), ('OracleAwrSqlstat', None), ('OracleAwrSqltext', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('OrganizationValue', None), ('OrganizationValueInfo', None), ('OrgEmailAddressSecurity', None), ('OrgLifecycleNotification', None), ('OrgObjectsMetrics', None), ('OrgRecommendation', None), ('OrgSigningKey', None), ('OrgSizingDataHolder', None), ('OrgSizingInfo', None), ('OrgStandardObjectsMetrics', None), ('OrgWideEmailAddress', None), ('OutboundField', None), ('OutboundMessage', None), ('OutgoingEmail', None), ('OutgoingEmailRelation', None), ('OvenExperiment', None), ('OwnedContentDocument', None), ('Owner', None), ('OwnerChangeOptionInfo', None), ('PacCrudPermission', None), ('Package2OauthConsumer', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageDependency', None), ('PackageEvent', None), ('PackageExtension', None), ('PackageIdMapping', None), ('PackageInstallRequest', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageMember', None), ('PackageOperationError', None), ('PackageSupportAccess', None), ('PackageUploadRequest', None), ('PackageVersionPatchOrg', None), ('PageComponent', None), ('ParallelJobItemData', None), ('ParallelJobStatus', None), ('PartitionStatus', None), ('Partner', None), ('PartnerNetworkSetup', None), ('PartnerRole', None), ('PathAssistant', None), ('PathAssistantStepInfo', None), ('PathAssistantStepItem', None), ('PendingChange', None), ('PendingChangeContainer', None), ('Period', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PermissionSetLicenseMetrics', None), ('PermissionSetMetricsByOrg', None), ('PermissionSetTabSetting', None), ('Personalization', None), ('PhoenixDataSync', None), ('Photo', None), ('PhotoItem', None), ('PicklistItemProperty', None), ('PicklistMaster', None), ('PicklistSet', None), ('PicklistValueInfo', None), ('PinPlan', None), ('PlatformAction', None), ('PlatformActionList', None), ('PlatformActionListItem', None), ('PlatformCachePartition', None), ('PlatformCachePartitionType', None), ('PlatformCacheTrial', None), ('PlatformOrgObjectMetrics', None), ('Portal', None), ('PortalAccount', None), ('PortalLanguageConfig', None), ('PortalLanguageTabConfig', None), ('PortalMember', None), ('PortalStyleConfig', None), ('PostArchivalDeletionRequest', None), ('PredictiveModel', None), ('Pricebook', None), ('Pricebook2', None), ('Pricebook2Old', None), ('PricebookEntry', None), ('PricebookShare', None), ('ProcessActionItem', None), ('ProcessAllowedSubmitter', None), ('ProcessDefinition', None), ('ProcessInstance', None), ('ProcessInstanceHistory', None), ('ProcessInstanceNode', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessMetrics', None), ('ProcessNode', None), ('ProcessNodeSecurity', None), ('ProcessTimeQueue', None), ('ProcessTransition', None), ('ProcessTransitionAction', None), ('ProcessTransitionApprover', None), ('ProcessTransitionCondition', None), ('ProcessTransitionSecurity', None), ('ProcessWorkitemProperties', None), ('Product', None), ('Product2', None), ('Profile', None), ('ProfileActionOverride', None), ('ProfileClientSettings', None), ('ProfileIpRestrictionMetrics', None), ('ProfileLayout', None), ('ProfilePasswordPolicy', None), ('ProfilePortalDelegate', None), ('ProfileRecordType', None), ('ProfileSessionSetting', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('ProfileTabSetConfiguration', None), ('Project', None), ('ProposedEventResponse', None), ('ProposedEventTime', None), ('PublicSolution', None), ('Publisher', None), ('PushIntent', None), ('PushProfileMapping', None), ('PushTopic', None), ('PushUpgradeExcludedOrg', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerLimitOverride', None), ('QoptimizerOption', None), ('QuerySet', None), ('QuerySetItem', None), ('Queue', None), ('QueueMember', None), ('QueueSobject', None), ('QuickActionDefinition', None), ('QuickActionList', None), ('QuickActionListItem', None), ('QuickActionMetrics', None), ('RateLimitingNotification', None), ('RateLimitIntBuckets', None), ('RawEmail', None), ('ReadOnlyAppserver', None), ('ReadOnlyAuthSession', None), ('ReadOnlyClientBrowser', None), ('ReadOnlyLoginHistory', None), ('ReadOnlyLoginIp', None), ('ReadOnlyLoginIpEmail', None), ('ReadOnlyLoginMessage', None), ('ReadOnlyMemcachedServer', None), ('ReadOnlyOauthToken', None), ('ReadOnlyOauthTokenScope', None), ('ReadOnlyRedisServer', None), ('ReadOnlySecurityToken', None), ('ReadOnlyUserLogin', None), ('RecalcCampaignStats', None), ('RecentlyViewed', None), ('RecommendationAudience', None), ('RecommendationBlacklist', None), ('RecommendationDefinition', None), ('RecommendationMetric', None), ('RecommendationSimilarity', None), ('RecommendationUserActivity', None), ('RecordOrigin', None), ('RecordSalt', None), ('RecordType', None), ('RecordTypePicklist', None), ('RecordUserAccessInterface', None), ('RelatedEntity', None), ('RelationshipDomain', None), ('RelationshipInfo', None), ('RemoteProxy', None), ('Report', None), ('ReportAggregate', None), ('ReportBlock', None), ('ReportBlockAggregate', None), ('ReportBreak', None), ('ReportBucketField', None), ('ReportBucketFieldSourceValue', None), ('ReportBucketFieldValue', None), ('ReportChart', None), ('ReportColorRange', None), ('ReportColumn', None), ('ReportFilterItem', None), ('ReportInstance', None), ('ReportJob', None), ('ReportJobFieldMap', None), ('ReportJobRun', None), ('ReportJobRunError', None), ('ReportObjectFilterItem', None), ('ReportParam', None), ('ReportRunTracker', None), ('Repository', None), ('RequestThrottle', None), ('RequestTrace', None), ('ResetAsyncRequest', None), ('RichTextAreaFieldData', None), ('RuleFilter', None), ('RuleFilterAction', None), ('RuleFilterItem', None), ('S2XAdminError', None), ('S2XContactMap', None), ('S2XEventMap', None), ('S2XEventRecordMap', None), ('S2XEventTxnProps', None), ('S2XExchOAuthCredential', None), ('S2XGoogleServiceAccount', None), ('S2XRecordMap', None), ('S2XSandmanError', None), ('S2XServiceAccount', None), ('S2XTransaction', None), ('S2XTransactionLock', None), ('S2XUserMap', None), ('SamlSsoConfig', None), ('SampledEntity', None), ('SandboxDimensionMetrics', None), ('SandboxOrgDimensionMetrics', None), ('SandOmExportedBlob', None), ('SandOmImportInfo', None), ('SandOmImportInfoDetail', None), ('SandOmInfo', None), ('SandOmInfoDetail', None), ('SandOmObserver', None), ('SandstormWhitelist', None), ('ScheduledRecommendation', None), ('SchemaBuilderLayout', None), ('SchemaBuilderLayoutItem', None), ('Scontrol', None), ('ScrutinyPkChunkData', None), ('ScrutinyRun', None), ('SCSInboundSettings', None), ('SCSTermsOfService', None), ('SearchActivity', None), ('SearchLayout', None), ('SearchPromotionRule', None), ('SearchQuerySuggestion', None), ('SecureAgent', None), ('SecureAgentPlugin', None), ('SecureAgentPluginProperty', None), ('SecureAgentsCluster', None), ('SecurityCustomBaseline', None), ('SecurityHealthCheck', None), ('SecurityHealthCheckRisks', None), ('SegmentSpace', None), ('SegmentSpaceChunk', None), ('SendEmailActionDefinition', None), ('Service', None), ('ServiceDataType', None), ('ServiceDeskAttributes', None), ('ServiceDeskComponent', None), ('ServiceDeskCustomStyling', None), ('ServiceDeskHotkey', None), ('ServiceFieldDataType', None), ('ServiceProvider', None), ('ServiceVersion', None), ('SessionLevelPolicy', None), ('SessionPermSetActivation', None), ('SettingsTemplate', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SetupAuditTrail', None), ('SetupCustomNode', None), ('SetupEntityAccess', None), ('SetupNode', None), ('SfdcOutboundMessage', None), ('SfdcPartner', None), ('SharedPicklistDefinition', None), ('ShareInterface', None), ('SharingMetrics', None), ('SharingOperation', None), ('SharingRowCauseMetrics', None), ('SharingUserMetrics', None), ('SidebarComponentLayout', None), ('Site', None), ('SiteDetail', None), ('SiteDomain', None), ('SitePageOverride', None), ('SitePub', None), ('SitePubDomain', None), ('SitePubDomainSite', None), ('SiteRedirectMapping', None), ('SkinnyIndex', None), ('SkinnyIndexColumn', None), ('SkinnyTable', None), ('SkinnyTableExt', None), ('SkinnyTableField', None), ('SocialPersona', None), ('SocialPost', None), ('SocialUserAuth', None), ('SoftDeletable', None), ('SoftphoneLayout', None), ('SoftphoneLayoutCallType', None), ('SoftphoneLayoutInfoField', None), ('SoftphoneLayoutItem', None), ('SoftphoneLayoutSection', None), ('SoftphoneScreenPopOption', None), ('Solution', None), ('SolutionStatus', None), ('Split', None), ('SplitAction', None), ('SplitActionResult', None), ('SplitFrameworkResult', None), ('SplitMapping', None), ('SplitPod', None), ('SPSamlAttributes', None), ('SqlIdToRequestMap', None), ('StagingArea', None), ('Stamp', None), ('StampAssignment', None), ('StandardAction', None), ('StandardEvent', None), ('StandardReportType', None), ('StandardValueSet', None), ('StaticResource', None), ('StorageConfigAuditTrail', None), ('StreamingChannel', None), ('Subinteraction', None), ('SubinteractionVariableAssignment', None), ('SubscriberPackage', None), ('SubscriberPackageVersion', None), ('SubscriberTabSetMember', None), ('SummaryLayout', None), ('SummaryLayoutItem', None), ('SummaryLayoutSliceInfo', None), ('SupportOrgWideMetrics', None), ('SyncTransactionLog', None), ('SynonymDictionary', None), ('SystemStreamingChannel', None), ('TabDefinition', None), ('TabSet', None), ('TabSetMember', None), ('Task', None), ('TaskAssociationItem', None), ('TaskGroup', None), ('TaskPriority', None), ('TaskRecurrenceException', None), ('TaskRelation', None), ('TaskStatus', None), ('TaskWhoRelation', None), ('TemplateDeployment', None), ('TemplateDeploymentItem', None), ('TempStore', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantSecret', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('TestSuiteMembership', None), ('ThirdPartyAccountLink', None), ('ThirdPartyAccountLinkLocal', None), ('TodayCard', None), ('TodayCardProperty', None), ('TodayGoal', None), ('Tombstone', None), ('Topic', None), ('TopicAssignment', None), ('TopicComputeStatus', None), ('TopicDataCategoryRule', None), ('TopicGroupActivity', None), ('TopicIndex', None), ('TopicNameChange', None), ('TopicOntology', None), ('TopicRecordSetting', None), ('TopicSuggestionSetting', None), ('TopicTerm', None), ('TopicUserActivity', None), ('TopicUserEvent', None), ('TraceFlag', None), ('Training', None), ('TransitionMessage', None), ('Translation', None), ('TranslationUser', None), ('TrendingTopic', None), ('TrendIntervalLookup', None), ('TrialMaster', None), ('TwoFactorAuthPairing', None), ('TwoFactorInfo', None), ('TwoFactorMethodsInfo', None), ('TwoFactorMethodsInfoLocal', None), ('TwoFactorMetrics', None), ('TwoFactorTempCode', None), ('TwoFactorU2F', None), ('UiFormulaCriterion', None), ('UiFormulaRule', None), ('UiFormulaRuleAssignment', None), ('UndecidedEventRelation', None), ('UninstallExport', None), ('User', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserAppMenuItem', None), ('UserComponentData', None), ('UserDimMetrics', None), ('UserEntityAccess', None), ('UserFavorite', None), ('UserFeedChannel', None), ('UserFieldAccess', None), ('UserLicense', None), ('UserListPreference', None), ('UserListPrefs', None), ('UserListView', None), ('UserListViewCriterion', None), ('UserLogin', None), ('UserMembershipSharingRule', None), ('UserMetrics', None), ('UserPackageLicense', None), ('UserPreference', None), ('UserProfile', None), ('UserProfileFeed', None), ('UserProvAccount', None), ('UserProvAccountStaging', None), ('UserProvisioningConfig', None), ('UserProvisioningLog', None), ('UserProvisioningRequest', None), ('UserProvMockTarget', None), ('UserRecommendation', None), ('UserRecordAccess', None), ('UserRecSummary', None), ('UserRole', None), ('UserSetupAppInfo', None), ('UtilityBarMetrics', None), ('ValidationFormula', None), ('ValidationRuleMember', None), ('VerificationHistory', None), ('VersionedContentEntity', None), ('VersionSet', None), ('VisualforceAccessMetrics', None), ('VisualforceMetrics', None), ('Vote', None), ('VoteConfig', None), ('VoteStats', None), ('WaveBaseDataset', None), ('WaveBaseField', None), ('WaveDataConnector', None), ('WaveExternalConnProperty', None), ('WaveReplicationFilterItem', None), ('WebLink', None), ('WebServiceDefinition', None), ('WindowsPushApplicationSetup', None), ('WorkAccess', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkflowAlertMember', None), ('WorkflowFieldUpdateMember', None), ('WorkflowOutboundMessageMember', None), ('WorkflowRule', None), ('WorkflowRuleMember', None), ('WorkflowTaskMember', None), ('WorkflowTimeAction', None), ('WorkflowTimeQueue', None), ('WorkflowTimeTrigger', None), ('WorkThanks', None), ('WsdlDataType', None), ('XCleanBulkJob', None), ('XCleanMatchRateMetrics', None), ('XinstanceInfo', None), ('XmlSchema', None)], blank=True, null=True)
    stat_value = models.IntegerField(verbose_name='StatValue', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataStatistics'
        verbose_name = 'Data Statistics'
        verbose_name_plural = 'Data Statistics'
        # keyPrefix = '05a'



class DataType(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Data Type Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=70, verbose_name='Data Type Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_complex = models.BooleanField(verbose_name='Is this Data Type Complex?', sf_read_only=models.READ_ONLY, default=False)
    context_service_data_type_id = models.CharField(max_length=70, verbose_name='Service Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    context_wsdl_data_type_id = models.CharField(max_length=70, verbose_name='WSDL Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataType'
        verbose_name = 'Data Type'
        verbose_name_plural = 'Data Types'
        # keyPrefix = '4dt'



class DatacloudAddress(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='Data.com Address ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    address_line1 = models.CharField(max_length=255, verbose_name=' Address Line 1 ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    address_line2 = models.CharField(max_length=255, verbose_name=' Address Line 2 ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=255, verbose_name='Country/Territory', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=255, verbose_name='PostalCode', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.CharField(max_length=11, verbose_name=' Latitude ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.CharField(max_length=11, verbose_name='Longitude ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_accuracy_code = models.CharField(max_length=15, verbose_name=' GeoAccuracy Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_accuracy_num = models.CharField(max_length=3, verbose_name=' GeoAccuracy Num', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudAddress'
        verbose_name = 'Data.com Address'
        verbose_name_plural = 'Data.com Addresses'
        # keyPrefix = '07m'



class DeclinedEventRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    event = models.ForeignKey('Event', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='declinedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='declinedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DeclinedEventRelation'
        verbose_name = 'Declined Event Relation'
        verbose_name_plural = 'Declined Event Relations'
        # keyPrefix = 'None'



class DegreeCourseHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('DegreeCourse', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('CostPerMonth__c', 'Cost per Month'), ('CostPerMonthBeyondStandard__c', 'Cost per Month > Standard Study Period'), ('CostPerSemester__c', 'Cost per Semester'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('FeeSemesterAbroad__c', 'Fee Semester abroad'), ('FeeSemesterOff__c', 'Fee Semester off'), ('MatriculationFee__c', 'Matriculation Fee'), ('NumberOfSofortzahlerTrig__c', 'Number of Sofortzahler'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SemesterFee__c', 'Semester Fee'), ('StandardPeriodOfStudy__c', 'Standard Study Period (No. of Semesters)'), ('StartOfStudiesMonth__c', 'Starting Month of Studies'), ('StartSummerSemester__c', 'Starting Month Summer Semester'), ('StartWinterSemester__c', 'Starting Month Winter Semester'), ('StartOfStudies__c', 'Start of Studies'), ('Name', 'Studiengang Name'), ('University__c', 'University')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DegreeCourse__History'
        verbose_name = 'History: Degree Course'
        verbose_name_plural = 'History: Degree Course'
        # keyPrefix = 'None'



class DegreeCourse(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Studiengang Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='degreecourse_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='degreecourse_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    university = models.ForeignKey(Account, models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    standard_period_of_study = models.DecimalField(custom=True, max_digits=3, decimal_places=0, verbose_name='Standard Study Period (No. of Semesters)', blank=True, null=True)
    start_of_studies = models.DateField(custom=True, verbose_name='Start of Studies', blank=True, null=True)
    cost_per_month_beyond_standard = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Cost per Month > Standard Study Period', blank=True, null=True)
    number_of_sofortzahler_trig = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Sofortzahler', blank=True, null=True)
    matriculation_fee = models.DecimalField(custom=True, max_digits=18, decimal_places=2, blank=True, null=True)
    semester_fee = models.DecimalField(custom=True, max_digits=18, decimal_places=2, blank=True, null=True)
    course_id = models.CharField(custom=True, max_length=1300, verbose_name='Course of Study ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_tuition_fees_auto = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Tuition Fees Total', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cost_per_month = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Cost per Month', blank=True, null=True)
    cost_per_semester = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Cost per Semester', blank=True, null=True)
    start_summer_semester = models.CharField(custom=True, max_length=255, verbose_name='Starting Month Summer Semester', choices=[('Januar', 'Januar'), ('Februar', 'Februar'), ('März', 'März'), ('April', 'April'), ('Mai', 'Mai'), ('Juni', 'Juni'), ('Juli', 'Juli'), ('August', 'August'), ('September', 'September'), ('Oktober', 'Oktober'), ('November', 'November'), ('Dezember', 'Dezember')], blank=True, null=True)
    start_winter_semester = models.CharField(custom=True, max_length=255, verbose_name='Starting Month Winter Semester', choices=[('Januar', 'Januar'), ('Februar', 'Februar'), ('März', 'März'), ('April', 'April'), ('Mai', 'Mai'), ('Juni', 'Juni'), ('Juli', 'Juli'), ('August', 'August'), ('September', 'September'), ('Oktober', 'Oktober'), ('November', 'November'), ('Dezember', 'Dezember')], blank=True, null=True)
    start_of_studies_month = models.CharField(custom=True, max_length=255, verbose_name='Starting Month of Studies', choices=[('Januar', 'Januar'), ('Februar', 'Februar'), ('März', 'März'), ('April', 'April'), ('Mai', 'Mai'), ('Juni', 'Juni'), ('Juli', 'Juli'), ('August', 'August'), ('September', 'September'), ('Oktober', 'Oktober'), ('November', 'November'), ('Dezember', 'Dezember')], blank=True, null=True)
    fee_semester_abroad = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Fee Semester abroad', blank=True, null=True)
    fee_semester_off = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Fee Semester off', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DegreeCourse__c'
        verbose_name = 'Degree Course'
        verbose_name_plural = 'Degree Courses'
        # keyPrefix = 'a00'



class Document(models.Model):
    folder = models.ForeignKey('Folder', models.DO_NOTHING)  # Reference to tables [Folder, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Document Name')
    developer_name = models.CharField(max_length=80, verbose_name='Document Unique Name', default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_type = models.CharField(max_length=120, verbose_name='MIME Type', blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='File Extension', blank=True, null=True)
    is_public = models.BooleanField(verbose_name='Externally Available', default=models.DEFAULTED_ON_CREATE)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY)
    body = models.TextField(blank=True, null=True)
    url = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    keywords = models.CharField(max_length=255, blank=True, null=True)
    is_internal_use_only = models.BooleanField(verbose_name='Internal Use Only', default=models.DEFAULTED_ON_CREATE)
    author = models.ForeignKey('User', models.DO_NOTHING, related_name='document_author_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='document_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='document_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_body_searchable = models.BooleanField(verbose_name='Document Content Searchable', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Document'
        verbose_name = 'Document'
        verbose_name_plural = 'Documents'
        # keyPrefix = '015'



class DocumentAttachmentMap(models.Model):
    parent = models.ForeignKey('EmailTemplate', models.DO_NOTHING)  # Master Detail Relationship *
    document = models.ForeignKey(Document, models.DO_NOTHING)
    document_sequence = models.IntegerField(verbose_name='Attachment Sequence')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'DocumentAttachmentMap'
        verbose_name = 'Document Entity Map'
        verbose_name_plural = 'Document Entity Map'
        # keyPrefix = '05X'



class Domain(models.Model):
    domain_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('DNS', 'Domain Name System (DNS)'), ('FacebookPage', 'Facebook Page')])
    domain = models.CharField(max_length=765, verbose_name='Domain Name', sf_read_only=models.READ_ONLY)
    options_external_https = models.BooleanField(verbose_name='Enable External HTTPS', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domain_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domain_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Domain'
        verbose_name = 'Domain'
        verbose_name_plural = 'Domains'
        # keyPrefix = '0I4'



class DomainSite(models.Model):
    domain = models.ForeignKey(Domain, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    site = models.ForeignKey('Site', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    path_prefix = models.CharField(max_length=255, verbose_name='Path', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domainsite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domainsite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'DomainSite'
        verbose_name = 'Custom URL'
        verbose_name_plural = 'Custom URLs'
        # keyPrefix = '0Jf'



class DuplicateRecordItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Duplicate Record Item Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecorditem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecorditem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    duplicate_record_set = models.ForeignKey('DuplicateRecordSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    record = models.ForeignKey(Account, models.DO_NOTHING)  # Reference to tables [Account, Contact, CustomerBankAccount__c, DegreeCourse__c, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Payment__c, Rabatt__c, SystemSettings__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRecordItem'
        verbose_name = 'Duplicate Record Item'
        verbose_name_plural = 'Duplicate Record Items'
        # keyPrefix = '0GL'



class DuplicateRecordSet(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Duplicate Record Set Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecordset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecordset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    duplicate_rule = models.ForeignKey('DuplicateRule', models.DO_NOTHING)  # Master Detail Relationship *
    record_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRecordSet'
        verbose_name = 'Duplicate Record Set'
        verbose_name_plural = 'Duplicate Record Sets'
        # keyPrefix = '0GK'



class DuplicateRule(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Contact', None), ('Lead', None)])
    developer_name = models.CharField(max_length=80, verbose_name='Object Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Rule Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterule_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    sobject_subtype = models.CharField(max_length=255, verbose_name='Object Subtype', sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRule'
        verbose_name = 'Duplicate Rule'
        verbose_name_plural = 'Duplicate Rules'
        # keyPrefix = '0Bm'



class EmailCapture(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailcapture_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailcapture_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    to_pattern = models.CharField(max_length=255, verbose_name='To', sf_read_only=models.NOT_UPDATEABLE)
    from_pattern = models.CharField(max_length=255, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    sender = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    recipient = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    capture_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    raw_message_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    raw_message = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailCapture'
        verbose_name = 'EmailCapture'
        verbose_name_plural = 'Email Captures'
        # keyPrefix = '06F'



class EmailDomainKey(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emaildomainkey_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emaildomainkey_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    selector = models.CharField(max_length=63)
    domain = models.CharField(max_length=255)
    domain_match = models.CharField(max_length=255, choices=[('DomainOnly', 'Exact domain only'), ('SubdomainsOnly', 'Subdomains of the domain only'), ('DomainAndSubdomains', 'Exact domain and subdomains')])
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    public_key = models.TextField(blank=True, null=True)
    private_key = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailDomainKey'
        verbose_name = 'Email Domain Key'
        verbose_name_plural = 'Email Domain Keys'
        # keyPrefix = '09P'



class EmailMessage(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    activity = models.ForeignKey('Task', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailmessage_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailmessage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    text_body = models.TextField(blank=True, null=True)
    html_body = models.TextField(verbose_name='HTML Body', blank=True, null=True)
    headers = models.TextField(blank=True, null=True)
    subject = models.CharField(max_length=3000, blank=True, null=True)
    from_name = models.CharField(max_length=1000, blank=True, null=True)
    from_address = models.EmailField(blank=True, null=True)
    validated_from_address = models.CharField(max_length=40, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, choices=[('florian@empaua.com', 'Ben Irle <florian@empaua.com>'), ('billing@chancen.services', 'Billing <billing@chancen.services>'), ('info@chancen.services', 'Info <info@chancen.services>'), ('support@chancen.services', 'Support <support@chancen.services>')], blank=True, null=True)
    to_address = models.CharField(max_length=4000, blank=True, null=True)
    cc_address = models.CharField(max_length=4000, verbose_name='CC Address', blank=True, null=True)
    bcc_address = models.CharField(max_length=4000, verbose_name='BCC Address', blank=True, null=True)
    incoming = models.BooleanField(verbose_name='Is Incoming', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    has_attachment = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(max_length=40, choices=[('0', 'New'), ('1', 'Read'), ('2', 'Replied'), ('3', 'Sent'), ('4', 'Forwarded'), ('5', 'Draft')])
    message_date = models.DateTimeField(blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reply_to_email_message = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_externally_visible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    message_identifier = models.CharField(max_length=255, verbose_name='Message ID', blank=True, null=True)
    thread_identifier = models.CharField(max_length=255, verbose_name='Thread ID', blank=True, null=True)
    related_to = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, CustomerBankAccount__c, DegreeCourse__c, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Mandate__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, Solution, SystemSettings__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c]
    class Meta(models.Model.Meta):
        db_table = 'EmailMessage'
        verbose_name = 'Email Message'
        verbose_name_plural = 'Email Messages'
        # keyPrefix = '02s'



class EmailMessageRelation(models.Model):
    email_message = models.ForeignKey(EmailMessage, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    relation = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead, User] Master Detail Relationship *
    relation_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('ToAddress', 'To Address'), ('CcAddress', 'Cc Address'), ('BccAddress', 'Bcc Address'), ('FromAddress', 'From Address')])
    relation_address = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relation_object_type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EmailMessageRelation'
        verbose_name = 'Email Message Relation'
        verbose_name_plural = 'Email Message Relations'
        # keyPrefix = '0CZ'



class EmailServicesAddress(models.Model):
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    local_part = models.CharField(max_length=64, verbose_name='Email address')
    email_domain_name = models.CharField(max_length=255, verbose_name='Email address domain', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authorized_senders = models.TextField(verbose_name='Accept Email From', blank=True, null=True)
    run_as_user = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_runasuser_set')
    function = models.ForeignKey('EmailServicesFunction', models.DO_NOTHING)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesAddress'
        verbose_name = 'Email Services Address'
        verbose_name_plural = 'Email Services Address'
        # keyPrefix = '093'



class EmailServicesFunction(models.Model):
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    function_name = models.CharField(max_length=64, verbose_name='Email Service Name')
    authorized_senders = models.TextField(verbose_name='Accept Email From', blank=True, null=True)
    is_authentication_required = models.BooleanField(verbose_name='Advanced Email Security Settings', default=models.DEFAULTED_ON_CREATE)
    is_tls_required = models.BooleanField(verbose_name='TLS Required', default=models.DEFAULTED_ON_CREATE)
    attachment_option = models.CharField(max_length=40, verbose_name='Accept Attachments', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'None'), ('1', 'Text attachments only'), ('2', 'Binary attachments only'), ('3', 'All'), ('4', 'Attachment names only, no content')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, blank=True, null=True)
    over_limit_action = models.CharField(max_length=40, verbose_name='Over Email Rate Limit Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    function_inactive_action = models.CharField(max_length=40, verbose_name='Deactivated Email Service Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    address_inactive_action = models.CharField(max_length=40, verbose_name='Deactivated Email Address Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    authentication_failure_action = models.CharField(max_length=40, verbose_name='Unauthenticated Sender Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    authorization_failure_action = models.CharField(max_length=40, verbose_name='Unauthorized Sender Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    is_error_routing_enabled = models.BooleanField(verbose_name='Enable Error Routing', default=models.DEFAULTED_ON_CREATE)
    error_routing_address = models.EmailField(verbose_name='Route Error Emails to This Email Address', blank=True, null=True)
    is_text_attachments_as_binary = models.BooleanField(verbose_name='Convert Text Attachments to Binary Attachments', default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesfunction_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesfunction_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesFunction'
        verbose_name = 'Email Service'
        verbose_name_plural = 'Email Services'
        # keyPrefix = '091'



class EmailStatus(models.Model):
    task = models.ForeignKey('Task', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailstatus_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    times_opened = models.IntegerField(verbose_name='# Times Opened', sf_read_only=models.READ_ONLY)
    first_open_date = models.DateTimeField(verbose_name='Date Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_open_date = models.DateTimeField(verbose_name='Last Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_template_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailStatus'
        verbose_name = 'Email Status'
        verbose_name_plural = 'Email Status'
        # keyPrefix = '018'



class EmailTemplate(models.Model):
    name = models.CharField(max_length=80, verbose_name='Email Template Name')
    developer_name = models.CharField(max_length=80, verbose_name='Template Unique Name', default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_owner_set')
    folder = models.ForeignKey('Folder', models.DO_NOTHING)  # Reference to tables [Folder, Organization, User]
    brand_template = models.ForeignKey(BrandTemplate, models.DO_NOTHING, blank=True, null=True)
    template_style = models.CharField(max_length=40, verbose_name='Style', sf_read_only=models.NOT_UPDATEABLE, choices=[('none', 'No Email Layout'), ('freeForm', 'Free Form Letter'), ('formalLetter', 'Formal Letter'), ('promotionRight', 'Promotion (Right)'), ('promotionLeft', 'Promotion (Left)'), ('newsletter', 'Newsletter'), ('products', 'Products')])
    is_active = models.BooleanField(verbose_name='Available For Use', default=models.DEFAULTED_ON_CREATE)
    template_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('text', 'Text'), ('html', 'HTML'), ('custom', 'Custom'), ('visualforce', 'Visualforce')])
    encoding = models.CharField(max_length=40, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')], blank=True, null=True)
    description = models.CharField(max_length=4000, blank=True, null=True)
    subject = models.CharField(max_length=255, blank=True, null=True)
    html_value = models.TextField(verbose_name='HTML Value', blank=True, null=True)
    body = models.TextField(verbose_name='Email Body', blank=True, null=True)
    times_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', blank=True, null=True)
    markup = models.TextField(blank=True, null=True)
    ui_type = models.CharField(max_length=40, verbose_name='UI Type', choices=[('1', 'Aloha'), ('2', 'SFX'), ('3', 'SFXSample')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    related_entity_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', choices=[('AcceptedEventRelation', None), ('AcceptedRecommendation', None), ('Account', None), ('AccountContactRole', None), ('AccountPartner', None), ('ActionLink', None), ('ActionLinkGroup', None), ('ActionLinkGroupAssoc', None), ('ActionLinkTemplateBinding', None), ('ActionLinkUserState', None), ('Activity', None), ('ActivityHistory', None), ('ActivityRelation', None), ('AggregateResult', None), ('AnalyticAction', None), ('AnalyticActionConfiguration', None), ('AnalyticCondition', None), ('AnalyticNotification', None), ('AnalyticThreshold', None), ('Announcement', None), ('ApexDebuggerEvent', None), ('ApexDebuggerSession', None), ('ApexTestQueueItem', None), ('Asset', None), ('AssetRelationship', None), ('AssistantInteraction', None), ('AssistantProgress', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiJob', None), ('AsyncApiQueryResult', None), ('AttachedContentDocument', None), ('Attachment', None), ('AudienceMembership', None), ('Auditable', None), ('AvroSchema', None), ('BackgroundOperation', None), ('BulkDedupeJob', None), ('Campaign', None), ('CampaignInfluenceAdjustment', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('CanvasFeedItem', None), ('Case', None), ('CaseContactRole', None), ('CaseEscalation', None), ('CaseHistory2', None), ('CaseSolution', None), ('CategoryData', None), ('ChangeSetUploadHistory', None), ('ChatSession', None), ('ChatSessionMembers', None), ('ChatterConversation', None), ('ChatterConversationMember', None), ('ChatterExtensionInstance', None), ('ChatterMessage', None), ('ChatterMessageThread', None), ('CleanActivityLog', None), ('CleanEntityError', None), ('CleanInfo', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupMemberRequest', None), ('CollaborationGroupRecord', None), ('CollaborationInvitation', None), ('CollaborativeFilteringItem_to_Item', None), ('CollaborativeFilteringItem2Item', None), ('CombinedAttachment', None), ('ComponentResponseCache', None), ('Contact', None), ('ContentBody', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentDocumentSubscription', None), ('ContentFolder', None), ('ContentFolderItem', None), ('ContentFolderLink', None), ('ContentFolderMember', None), ('ContentNote', None), ('ContentNotification', None), ('ContentNotificationParam', None), ('ContentReference', None), ('ContentVersion', None), ('ContentVersionComment', None), ('ContentVersionMap', None), ('ContentVersionRating', None), ('ContentVersionRenditionContent', None), ('ContentVersionTagName', None), ('ContentWorkspaceDoc', None), ('ContentWorkspaceRecentEvent', None), ('Contract', None), ('ContractContactRole', None), ('Dashboard', None), ('DashboardComponent', None), ('DashboardFilter', None), ('DashboardFilterItem', None), ('DashboardFilterRepCol', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentValueMetric', None), ('DBCThumbnail', None), ('DBCThumbnailFilter', None), ('DeclinedEventRelation', None), ('DirectMessage', None), ('DirectMessageMember', None), ('DirectMessageMemberActivity', None), ('Document', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRuleJob', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailStatus', None), ('EmailTemp', None), ('Endorsement', None), ('EntityBlacklist', None), ('EntityHistory', None), ('EntityLock', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('EventAttendee', None), ('EventBusSchemaHistory', None), ('EventComments', None), ('EventDeliveryData', None), ('EventParameterData', None), ('EventRecurrenceException', None), ('EventRelation', None), ('EventSubscriptionData', None), ('EventSubscriptionHandleData', None), ('EventWhoRelation', None), ('ExchangeUserMapping', None), ('ExternalCredential', None), ('ExternalIdMap', None), ('FeedActionState', None), ('FeedAttachment', None), ('FeedChannel', None), ('FeedChannelSubscription', None), ('FeedClumpInfo', None), ('FeedClumpMapping', None), ('FeedComment', None), ('FeedCrossReference', None), ('FeedEntry', None), ('FeedFavorite', None), ('FeedItem', None), ('FeedLike', None), ('FeedMute', None), ('FeedPollChoice', None), ('FeedPollVote', None), ('FeedPost', None), ('FeedRecommendationInfo', None), ('FeedRevision', None), ('FeedTrackedChange', None), ('FileSearchActivity', None), ('FlowInterview', None), ('FolderedContentDocument', None), ('ForecastingCompositeKey', None), ('ForecastShare', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('GroupSubscription', None), ('Idea', None), ('InboundSocialPost', None), ('IncrementalCandidate', None), ('InstalledMobileApp', None), ('InteractionCountReport', None), ('JigsawSavedSearch', None), ('KnowledgeableUser', None), ('Lead', None), ('LogSearch', None), ('LogSearchResult', None), ('LookedUpFromActivity', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('MailAssociationItem', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('ManagedTopicLocation', None), ('MatchingInformation', None), ('MatchingRuleJob', None), ('MaterializedFeedEntry', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetricsTransmissionHistory', None), ('MobileMarkedRecord', None), ('MqSlaJob', None), ('MqSlaRequest', None), ('MultiCurrency', None), ('Name', None), ('Nameable', None), ('NameUnion', None), ('NewsFeed', None), ('Note', None), ('NoteAndAttachment', None), ('NotifDeliveryUserPref', None), ('NotificationMember', None), ('OpenActivity', None), ('Opportunity', None), ('OpportunityAlert', None), ('OpportunityCompetitor', None), ('OpportunityContactRole', None), ('OpportunityHistory', None), ('OpportunityLineItem', None), ('OpportunityPartner', None), ('OpportunityUpdateReminder', None), ('Order', None), ('OrderItem', None), ('OrgRecommendation', None), ('OwnedContentDocument', None), ('Partner', None), ('PendingChangeContainer', None), ('Photo', None), ('PhotoItem', None), ('PortalAccount', None), ('Pricebook', None), ('Pricebook2', None), ('Pricebook2Old', None), ('PricebookEntry', None), ('PricebookShare', None), ('ProcessInstance', None), ('ProcessInstanceHistory', None), ('ProcessInstanceNode', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('Product', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('ProposedEventResponse', None), ('ProposedEventTime', None), ('PushIntent', None), ('PushProfileMapping', None), ('PushTopic', None), ('RecommendationAudience', None), ('RecommendationBlacklist', None), ('RecommendationDefinition', None), ('RecommendationMetric', None), ('RecommendationSimilarity', None), ('RecommendationUserActivity', None), ('RecordOrigin', None), ('RecordUserAccessInterface', None), ('Report', None), ('ReportAggregate', None), ('ReportBlock', None), ('ReportBlockAggregate', None), ('ReportBreak', None), ('ReportBucketField', None), ('ReportBucketFieldSourceValue', None), ('ReportBucketFieldValue', None), ('ReportChart', None), ('ReportColorRange', None), ('ReportColumn', None), ('ReportFilterItem', None), ('ReportJobRun', None), ('ReportJobRunError', None), ('ReportObjectFilterItem', None), ('ReportParam', None), ('ReportRunTracker', None), ('S2XAdminError', None), ('S2XContactMap', None), ('S2XEventMap', None), ('S2XEventRecordMap', None), ('S2XEventTxnProps', None), ('S2XRecordMap', None), ('S2XSandmanError', None), ('S2XTransaction', None), ('ScheduledRecommendation', None), ('SearchActivity', None), ('SegmentSpace', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('ShareInterface', None), ('SitePub', None), ('SitePubDomain', None), ('SitePubDomainSite', None), ('SocialPersona', None), ('SocialPost', None), ('SoftDeletable', None), ('Solution', None), ('StandardEvent', None), ('StreamingChannel', None), ('SyncTransactionLog', None), ('SystemStreamingChannel', None), ('Task', None), ('TaskAssociationItem', None), ('TaskRecurrenceException', None), ('TaskRelation', None), ('TaskWhoRelation', None), ('TempStore', None), ('TodayGoal', None), ('Tombstone', None), ('Topic', None), ('TopicAssignment', None), ('TopicDataCategoryRule', None), ('TopicGroupActivity', None), ('TopicUserActivity', None), ('TopicUserEvent', None), ('TransitionMessage', None), ('TrendingTopic', None), ('UndecidedEventRelation', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserFeedChannel', None), ('UserMetrics', None), ('UserProfileFeed', None), ('UserProvAccount', None), ('UserProvAccountStaging', None), ('UserProvisioningLog', None), ('UserProvisioningRequest', None), ('UserProvMockTarget', None), ('UserRecommendation', None), ('UserRecSummary', None), ('UserSetupAppInfo', None), ('Vote', None), ('VoteStats', None), ('WorkAccess', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None), ('XinstanceInfo', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailTemplate'
        verbose_name = 'Email Template'
        verbose_name_plural = 'Email Templates'
        # keyPrefix = '00X'



class EmbeddedServiceDetail(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Snap-ins Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    site = models.CharField(max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_prechat_enabled = models.BooleanField(verbose_name='Pre-Chat Enabled', sf_read_only=models.READ_ONLY, default=False)
    primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    secondary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contrast_primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    nav_bar_color = models.CharField(max_length=255, verbose_name='NavBar Color', sf_read_only=models.READ_ONLY, blank=True, null=True)
    font = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmbeddedServiceDetail'
        verbose_name = 'Snap-ins'
        verbose_name_plural = 'Snap-ins'
        # keyPrefix = '0Lq'



class EntityDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    plural_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_compact_layout_id = models.CharField(max_length=70, verbose_name='Compact Layout ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_customizable = models.BooleanField(verbose_name='Is Customizable?', sf_read_only=models.READ_ONLY, default=False)
    is_apex_triggerable = models.BooleanField(verbose_name='Is Apex Triggerable?', sf_read_only=models.READ_ONLY, default=False)
    is_workflow_enabled = models.BooleanField(verbose_name='Is Workflow Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_process_enabled = models.BooleanField(verbose_name='Is Approval Process Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    key_prefix = models.CharField(max_length=3, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_custom_setting = models.BooleanField(verbose_name='Is Custom Setting?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_replicateable = models.BooleanField(verbose_name='Is Replicateable?', sf_read_only=models.READ_ONLY, default=False)
    is_retrieveable = models.BooleanField(verbose_name='Is Retrieveable?', sf_read_only=models.READ_ONLY, default=False)
    is_search_layoutable = models.BooleanField(verbose_name='Is Search Layoutable?', sf_read_only=models.READ_ONLY, default=False)
    is_searchable = models.BooleanField(verbose_name='Is Searchable?', sf_read_only=models.READ_ONLY, default=False)
    is_triggerable = models.BooleanField(verbose_name='Is Triggerable?', sf_read_only=models.READ_ONLY, default=False)
    is_id_enabled = models.BooleanField(verbose_name='Is Id Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_creatable = models.BooleanField(verbose_name='Is Ever Creatable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_updatable = models.BooleanField(verbose_name='Is Ever Updatable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_deletable = models.BooleanField(verbose_name='Is Ever Deletable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_feed_enabled = models.BooleanField(verbose_name='Is Feed Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_queryable = models.BooleanField(verbose_name='Queryable', sf_read_only=models.READ_ONLY, default=False)
    is_mru_enabled = models.BooleanField(verbose_name='Is MRU List Functionality Enabled for This Object?', sf_read_only=models.READ_ONLY, default=False)
    detail_url = models.URLField(verbose_name='Detail URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    edit_url = models.URLField(verbose_name='Edit URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_url = models.URLField(verbose_name='New URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    edit_definition_url = models.URLField(verbose_name='Edit Definition URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    help_setting_page_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    help_setting_page_url = models.URLField(verbose_name='Help Setting Page URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    running_user_entity_access_id = models.CharField(max_length=150, verbose_name='User Entity Access ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    publisher_id = models.CharField(max_length=70, verbose_name='Publisher ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_layoutable = models.BooleanField(verbose_name='Is Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    record_types_supported = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    internal_sharing_model = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    external_sharing_model = models.CharField(max_length=255, verbose_name='External sharing Model', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    has_subtypes = models.BooleanField(verbose_name='Has Subtypes?', sf_read_only=models.READ_ONLY, default=False)
    is_subtype = models.BooleanField(verbose_name='Is Subtype?', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntityDefinition'
        verbose_name = 'Entity Definition'
        verbose_name_plural = 'Entity Definitions'
        # keyPrefix = '4ie'



class EntityParticle(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_data_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extra_type_info = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_autonumber = models.BooleanField(verbose_name='Is Field an Autonumber?', sf_read_only=models.READ_ONLY, default=False)
    byte_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_case_sensitive = models.BooleanField(verbose_name='Is Field Case Sensitive?', sf_read_only=models.READ_ONLY, default=False)
    is_unique = models.BooleanField(verbose_name='Is Field Unique?', sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(verbose_name='Is Field Creatable?', sf_read_only=models.READ_ONLY, default=False)
    is_updatable = models.BooleanField(verbose_name='Is Field Updatable?', sf_read_only=models.READ_ONLY, default=False)
    is_defaulted_on_create = models.BooleanField(verbose_name='Is Field Defaulted On Create?', sf_read_only=models.READ_ONLY, default=False)
    is_write_requires_master_read = models.BooleanField(verbose_name='Does Write Require Master Read?', sf_read_only=models.READ_ONLY, default=False)
    is_calculated = models.BooleanField(verbose_name='Is Field calculated?', sf_read_only=models.READ_ONLY, default=False)
    is_high_scale_number = models.BooleanField(verbose_name='Is Field a high scale number?', sf_read_only=models.READ_ONLY, default=False)
    is_html_formatted = models.BooleanField(verbose_name='Is Field a HTML formatted?', sf_read_only=models.READ_ONLY, default=False)
    is_name_field = models.BooleanField(verbose_name='Is Field a Name field?', sf_read_only=models.READ_ONLY, default=False)
    is_nillable = models.BooleanField(verbose_name='Is Field a nillable?', sf_read_only=models.READ_ONLY, default=False)
    is_permissionable = models.BooleanField(verbose_name='Is Field Permissionable?', sf_read_only=models.READ_ONLY, default=False)
    is_encrypted = models.BooleanField(verbose_name='Is Field Encrypted?', sf_read_only=models.READ_ONLY, default=False)
    digits = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    inline_help_text = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_target_field = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mask = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mask_type = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_workflow_filterable = models.BooleanField(verbose_name='Is Workflow Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    precision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    scale = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_field_history_tracked = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_api_filterable = models.BooleanField(verbose_name='Is Field Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_sortable = models.BooleanField(verbose_name='Is Field Sortable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_groupable = models.BooleanField(verbose_name='Is Field Groupable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_visible = models.BooleanField(verbose_name='Is Field visible in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_layoutable = models.BooleanField(verbose_name='Is Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_dependent_picklist = models.BooleanField(verbose_name='Is Field a Dependent Picklist?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Field a Deprecated and Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_display_location_in_decimal = models.BooleanField(verbose_name='Is Field Displays Location in Decimals?', sf_read_only=models.READ_ONLY, default=False)
    default_value_formula = models.CharField(max_length=150, verbose_name='Default Value if Formula is Not Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_id_lookup = models.BooleanField(verbose_name='Can this Field be Used to Specify a Record in Upsert?', sf_read_only=models.READ_ONLY, default=False)
    is_name_pointing = models.BooleanField(verbose_name='Does this Field Contain the Name of the Parent?', sf_read_only=models.READ_ONLY, default=False)
    relationship_order = models.IntegerField(verbose_name='Type of Relationship for a Master-Detail Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_to = models.TextField(verbose_name='Entities Referenced by Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    is_component = models.BooleanField(verbose_name='Is Field a component of a compound field', sf_read_only=models.READ_ONLY, default=False)
    is_compound = models.BooleanField(verbose_name='Is Field a compound field', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntityParticle'
        verbose_name = 'Entity Particle'
        verbose_name_plural = 'Entity Particles'
        # keyPrefix = '0Nv'



class EntitySubscription(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentDocument, Contract, CustomerBankAccount__c, Dashboard, DashboardComponent, DegreeCourse__c, Event, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, OrderItem, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, Report, Site, SocialPost, Solution, SystemSettings__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    subscriber = models.ForeignKey('User', models.DO_NOTHING, related_name='entitysubscription_subscriber_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='entitysubscription_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntitySubscription'
        verbose_name = 'Entity Subscription'
        verbose_name_plural = 'Entity Subscriptions'
        # keyPrefix = '0E8'



class Event(models.Model):
    who = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='event_what_set', blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, DegreeCourse__c, GoCardlessError__c, InvoiceLineItem__c, Invoice__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, Solution] Master Detail Relationship *
    subject = models.CharField(max_length=255, choices=[('Call', 'Anruf'), ('Email', 'E-Mail'), ('Meeting', 'Konferenz'), ('Send Letter/Quote', 'Brief/Angebot senden'), ('Other', 'Andere')], blank=True, null=True)
    location = models.CharField(max_length=255, blank=True, null=True)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', default=models.DEFAULTED_ON_CREATE)
    activity_date_time = models.DateTimeField(verbose_name='Due Date Time', blank=True, null=True)
    activity_date = models.DateField(verbose_name='Due Date Only', blank=True, null=True)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', blank=True, null=True)
    start_date_time = models.DateTimeField(blank=True, null=True)
    end_date_time = models.DateTimeField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='event_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='event_owner_set')
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    show_as = models.CharField(max_length=40, verbose_name='Show Time As', default=models.DEFAULTED_ON_CREATE, choices=[('Busy', 'Busy'), ('OutOfOffice', 'Out of Office'), ('Free', 'Free')], blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_child = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_group_event = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    group_event_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='0', choices=[('0', 'Non-group Event'), ('1', 'Group Event'), ('2', 'Proposed Event')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='event_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='event_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    recurrence_activity = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(verbose_name='Create Recurring Series of Events', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date_time = models.DateTimeField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(max_length=40, verbose_name='Recurrence Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (New South Wales) (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (South Australia) (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) Eastern Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', default=models.DEFAULTED_ON_CREATE)
    event_subtype = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Event', 'Event')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Event'
        verbose_name = 'Event'
        verbose_name_plural = 'Events'
        # keyPrefix = '00U'



class EventBusSubscriber(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80, verbose_name='Subscriber Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    topic = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    position = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    tip = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Running', 'Running'), ('Suspended', 'Suspended'), ('Expired', 'Expired'), ('Error', 'Error')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventBusSubscriber'
        verbose_name = 'Platform Event Subscription'
        verbose_name_plural = 'Platform Event Subscription'
        # keyPrefix = '0Cd'



class EventFeed(models.Model):
    parent = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventFeed'
        verbose_name = 'Event Feed'
        verbose_name_plural = 'Event Feed'
        # keyPrefix = 'None'



class EventLogFile(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventlogfile_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventlogfile_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    event_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('API', 'API'), ('ApexCallout', 'Apex Callout'), ('ApexExecution', 'Apex Execution'), ('ApexSoap', 'Apex SOAP'), ('ApexTrigger', 'Apex Trigger'), ('AsyncReportRun', 'Asynchronous Report Run'), ('ExternalCrossOrgCallout', 'External Cross-Org Callout'), ('ExternalCustomApexCallout', 'External Custom Apex Callout'), ('ExternalODataCallout', 'External OData Callout'), ('BulkApi', 'Bulk API'), ('ChangeSetOperation', 'Change Set Operation'), ('Console', 'Console'), ('ContentDistribution', 'Content Distribution'), ('ContentDocumentLink', 'Content Document Link'), ('ContentTransfer', 'Content Transfer'), ('Dashboard', 'Dashboard'), ('DocumentAttachmentDownloads', 'Document Attachment Downloads'), ('LightningError', 'Lightning Error'), ('LightningInteraction', 'Lightning Interaction'), ('LightningPageView', 'Lightning Page View'), ('LightningPerformance', 'Lightning Performance'), ('Login', 'Login'), ('LoginAs', 'Login As'), ('Logout', 'Logout'), ('MetadataApiOperation', 'Metadata API Operation'), ('MultiBlockReport', 'Multiblock Report'), ('PackageInstall', 'Package Install'), ('QueuedExecution', 'Queued Execution'), ('Report', 'Report'), ('ReportExport', 'Report Export'), ('RestApi', 'Rest API'), ('Sandbox', 'Sandbox'), ('Sites', 'Sites'), ('TimeBasedWorkflow', 'Time-Based Workflow'), ('TransactionSecurity', 'Transaction Security'), ('UITracking', 'UI Tracking'), ('URI', 'URI'), ('VisualforceRequest', 'Visualforce Request'), ('WaveChange', 'Wave Change'), ('WaveInteraction', 'Wave Interaction'), ('WavePerformance', 'Wave Performance')])
    log_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    log_file_length = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY)
    log_file_content_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', sf_read_only=models.READ_ONLY)
    log_file_field_names = models.CharField(max_length=1333, sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_file_field_types = models.CharField(max_length=1333, sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_file = models.TextField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EventLogFile'
        verbose_name = 'Event Log File'
        verbose_name_plural = 'Event Log Files'
        # keyPrefix = '0AT'



class EventRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Contact, Lead, User] Master Detail Relationship *
    event = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    status = models.CharField(max_length=40, choices=[('New', 'New'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('Uninvited', 'Uninvited'), ('Maybe', 'Maybe')], blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', blank=True, null=True)
    response = models.CharField(max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EventRelation'
        verbose_name = 'Event Relation'
        verbose_name_plural = 'Event Relations'
        # keyPrefix = '0RE'



class ExternalDataSource(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatasource_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatasource_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=255, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('SimpleURL', None), ('Wrapper', None)])
    endpoint = models.TextField(verbose_name='URL', sf_read_only=models.READ_ONLY, help_text='The URL for connecting to the external system.', blank=True, null=True)
    repository = models.CharField(max_length=255, verbose_name='Default External Repository', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_writable = models.BooleanField(verbose_name='Writable External Objects', sf_read_only=models.READ_ONLY, default=False)
    principal_type = models.CharField(max_length=255, verbose_name='Identity Type', sf_read_only=models.READ_ONLY, help_text='Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', choices=[('Anonymous', 'Anonymous'), ('PerUser', 'Per User'), ('NamedUser', 'Named Principal')])
    protocol = models.CharField(max_length=255, verbose_name='Authentication Protocol', sf_read_only=models.READ_ONLY, help_text='Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', choices=[('NoAuthentication', 'No Authentication'), ('Oauth', 'OAuth 2.0'), ('Password', 'Password Authentication')])
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    large_icon = models.ForeignKey('StaticResource', models.DO_NOTHING, related_name='externaldatasource_largeicon_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_icon = models.ForeignKey('StaticResource', models.DO_NOTHING, related_name='externaldatasource_smallicon_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    custom_configuration = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataSource'
        verbose_name = 'External Data Source'
        verbose_name_plural = 'External Data Sources'
        # keyPrefix = '0XC'



class ExternalDataUserAuth(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ExternalDataSource, NamedCredential] Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_user_set', blank=True, null=True)
    protocol = models.CharField(max_length=255, verbose_name='Authentication Protocol', help_text='Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', choices=[('NoAuthentication', 'No Authentication'), ('Oauth', 'OAuth 2.0'), ('Password', 'Password Authentication')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    username = models.CharField(max_length=255, blank=True, null=True)
    password = models.TextField(blank=True, null=True)
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataUserAuth'
        verbose_name = 'External Data User Authentication'
        verbose_name_plural = 'External Data User Authentications'
        # keyPrefix = '0XU'



class ExternalSocialAccount(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externalsocialaccount_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externalsocialaccount_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    external_account_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    username = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    provider = models.CharField(max_length=255, verbose_name='Social Network', sf_read_only=models.READ_ONLY, choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('Other', 'Other Media Type')])
    provider_user_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    external_picture_url = models.URLField(db_column='ExternalPictureURL', verbose_name='Provider External Picture URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Is Active Account', sf_read_only=models.READ_ONLY, default=False)
    social_property_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_authenticated = models.BooleanField(verbose_name='Is Account Authenticated', sf_read_only=models.READ_ONLY, default=False)
    topic_id = models.CharField(max_length=255, verbose_name='Topic Profile Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_source_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    rule_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_data_source_active = models.BooleanField(verbose_name='Active Data Source', sf_read_only=models.READ_ONLY, default=False)
    unique_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_response_account = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    profile_url = models.URLField(verbose_name='Profile URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authorized_by = models.CharField(max_length=255, verbose_name='Authorized by', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_case_creation_enabled = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ExternalSocialAccount'
        verbose_name = 'Managed Social Account'
        verbose_name_plural = 'Managed Social Accounts'
        # keyPrefix = '0AL'



class FeedAttachment(models.Model):
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedComment, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed] Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Attachment Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('Content', None), ('InlineImage', None), ('Link', None), ('FeedEntity', None), ('ChatterExtension', None)])
    record = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentDocument, ContentVersion, FeedItem]
    title = models.CharField(max_length=255, verbose_name='Feed Attachment Title', blank=True, null=True)
    value = models.CharField(max_length=1000, verbose_name='Feed Attachment Value', blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedAttachment'
        verbose_name = 'Feed Attachment'
        verbose_name_plural = 'Feed Attachments'
        # keyPrefix = '08M'



class FeedComment(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed] Master Detail Relationship *
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentDocument, Contract, CustomerBankAccount__c, Dashboard, DashboardComponent, DegreeCourse__c, Event, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, OrderItem, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, Report, Site, SocialPost, Solution, SystemSettings__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c]
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    revision = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_lasteditby_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    comment_body = models.TextField()
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_insertedby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    comment_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('TextComment', None), ('ContentComment', None)], blank=True, null=True)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    is_rich_text = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(max_length=40, choices=[('Published', 'Published'), ('PendingReview', 'PendingReview')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedComment'
        verbose_name = 'Feed Comment'
        verbose_name_plural = 'Feed Comments'
        # keyPrefix = '0D7'



class FeedItem(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentDocument, Contract, CustomerBankAccount__c, Dashboard, DashboardComponent, DegreeCourse__c, Event, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, OrderItem, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, Report, Site, SocialPost, Solution, SystemSettings__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    revision = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_lasteditby_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_rich_text = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentVersion, ProfileSkillUser, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_insertedby_set', sf_read_only=models.READ_ONLY)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, related_name='feeditem_bestcomment_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_content = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_link = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_feed_entity = models.BooleanField(verbose_name='Has Feed Entity Attachment', sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(max_length=40, choices=[('Published', 'Published'), ('PendingReview', 'PendingReview')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedItem'
        verbose_name = 'Feed Item'
        verbose_name_plural = 'Feed Items'
        # keyPrefix = '0D5'



class FeedLike(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, related_name='feedlike_feeditem_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed] Master Detail Relationship *
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, related_name='feedlike_feedentity_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedComment, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed] Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedlike_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedlike_insertedby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'FeedLike'
        verbose_name = 'Feed Like'
        verbose_name_plural = 'Feed Likes'
        # keyPrefix = '0I0'



class FeedPollChoice(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed] Master Detail Relationship *
    position = models.IntegerField(sf_read_only=models.READ_ONLY)
    choice_body = models.TextField(verbose_name='ChoiceBody', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedPollChoice'
        verbose_name = 'Feed Poll Choice'
        verbose_name_plural = 'Feed Poll Choices'
        # keyPrefix = '09A'



class FeedPollVote(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed] Master Detail Relationship *
    choice = models.ForeignKey(FeedPollChoice, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedPollVote'
        verbose_name = 'Feed Poll Vote'
        verbose_name_plural = 'Feed Poll Votes'
        # keyPrefix = '09B'



class FeedRevision(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    feed_entity = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [FeedComment, FeedItem] Master Detail Relationship *
    revision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    action = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Changed', None)], blank=True, null=True)
    edited_attribute = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('FeedCommentBody', None), ('FeedElementBody', None), ('FeedElementQuestionTitle', None), ('FeedElementVisibility', None)], blank=True, null=True)
    value = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_value_rich_text = models.BooleanField(verbose_name='Is Value RichText', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedRevision'
        verbose_name = 'Feed Revision'
        verbose_name_plural = 'Feed Revisions'
        # keyPrefix = '08U'



class FeedTrackedChange(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ProfileSkillEndorsementFeed, ProfileSkillFeed, ProfileSkillUserFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed] Master Detail Relationship *
    field_name = models.CharField(max_length=120, verbose_name='Field', sf_read_only=models.READ_ONLY)
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedTrackedChange'
        verbose_name = 'Feed Tracked Change'
        verbose_name_plural = 'Feed Tracked Changes'
        # keyPrefix = '0D6'



class FieldDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_data_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extra_type_info = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_calculated = models.BooleanField(verbose_name='Is Field calculated?', sf_read_only=models.READ_ONLY, default=False)
    is_high_scale_number = models.BooleanField(verbose_name='Is Field a high scale number?', sf_read_only=models.READ_ONLY, default=False)
    is_html_formatted = models.BooleanField(verbose_name='Is Field a HTML formatted?', sf_read_only=models.READ_ONLY, default=False)
    is_name_field = models.BooleanField(verbose_name='Is Field a Name field?', sf_read_only=models.READ_ONLY, default=False)
    is_nillable = models.BooleanField(verbose_name='Is Field a nillable?', sf_read_only=models.READ_ONLY, default=False)
    is_workflow_filterable = models.BooleanField(verbose_name='Is Workflow Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    precision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    scale = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_field_history_tracked = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_indexed = models.BooleanField(verbose_name='Is Field indexed?', sf_read_only=models.READ_ONLY, default=False)
    is_api_filterable = models.BooleanField(verbose_name='Is Field Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_sortable = models.BooleanField(verbose_name='Is Field Sortable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_filterable = models.BooleanField(verbose_name='Is Field Filterable in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_list_sortable = models.BooleanField(verbose_name='Is Field Sortable in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_api_groupable = models.BooleanField(verbose_name='Is Field Groupable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_visible = models.BooleanField(verbose_name='Is Field visible in Lists?', sf_read_only=models.READ_ONLY, default=False)
    controlling_field_definition_id = models.CharField(max_length=150, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    publisher_id = models.CharField(max_length=70, verbose_name='Publisher ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    running_user_field_access_id = models.CharField(max_length=150, verbose_name='User Field Access ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_to = models.TextField(verbose_name='Entities Referenced by Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    reference_target_field = models.CharField(max_length=80, verbose_name='Target Field on Entities to Which the Foreign Key Points', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_compound = models.BooleanField(verbose_name='Is Field a compound field', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FieldDefinition'
        verbose_name = 'Field Definition'
        verbose_name_plural = 'Field Definitions'
        # keyPrefix = '4fe'



class FieldPermissions(models.Model):
    parent = models.ForeignKey('PermissionSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Asset', None), ('AssetRelationship', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Contact', None), ('Contract', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Event', None), ('Idea', None), ('Lead', None), ('Macro', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Pricebook2', None), ('PricebookEntry', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('Task', None), ('User', None), ('UserProvisioningRequest', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)])
    field = models.CharField(max_length=40, verbose_name='Field Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account.AbwicklungsgebuhrProEinzugProStudent__c', None), ('Account.AccountNumber', None), ('Account.AccountSource', None), ('Account.AnnualRevenue', None), ('Account.BICAuto__c', None), ('Account.BICHSAuto__c', None), ('Account.BillingAddress', None), ('Account.CreateTaskForStaff__c', None), ('Account.CSPasswordTime__c', None), ('Account.CSPasswordToken__c', None), ('Account.CSPasswordURLAuto__c', None), ('Account.DaysSinceCreation__c', None), ('Account.Description', None), ('Account.ETFirstNameRef__c', None), ('Account.ETFullNameRef__c', None), ('Account.ETSalutation__c', None), ('Account.ETSalutationNameRef__c', None), ('Account.Fax', None), ('Account.Geburtsdatum__c', None), ('Account.Geburtsland__c', None), ('Account.Geburtsort__c', None), ('Account.Geschlecht__c', None), ('Account.HochschuleRef__c', None), ('Account.IBANAuto__c', None), ('Account.IBANHSAuto__c', None), ('Account.Immatrikulationsnummer__c', None), ('Account.Industry', None), ('Account.InitialReviewCompleted__c', None), ('Account.InitialReviewCompletedAuto__c', None), ('Account.Jigsaw', None), ('Account.Kommunikationssprache__c', None), ('Account.KontoinhaberAuto__c', None), ('Account.KontoinhaberHSAuto__c', None), ('Account.LanguageCodeAuto__c', None), ('Account.NumberOfEmployees', None), ('Account.Ownership', None), ('Account.Parent', None), ('Account.PasswordChangeRequested__c', None), ('Account.PaymentOptions__c', None), ('Account.Phone', None), ('Account.Rating', None), ('Account.Recordcreated__c', None), ('Account.SemesterFeeNew__c', None), ('Account.SemesterFeeRef__c', None), ('Account.SendEmailRemiderAuto__c', None), ('Account.SEPALastschriftmandatErteiltAuto__c', None), ('Account.ShippingAddress', None), ('Account.Sic', None), ('Account.SicDesc', None), ('Account.Site', None), ('Account.Staatsangehoerigkeit__c', None), ('Account.Status__c', None), ('Account.STFirstName__c', None), ('Account.StudentApproved__c', None), ('Account.StudentContact__c', None), ('Account.StudentContactRef__c', None), ('Account.StudentIdAuto__c', None), ('Account.StudiengebuehrenGesamt__c', None), ('Account.TickerSymbol', None), ('Account.Traegergesellschaft__c', None), ('Account.Type', None), ('Account.Unimailadresse__c', None), ('Account.UniversityId__c', None), ('Account.UniversityIdRef__c', None), ('Account.Website', None), ('Account.ZahlungskontaktRef__c', None), ('Asset.Account', None), ('Asset.AssetLevel', None), ('Asset.AssetProvidedBy', None), ('Asset.AssetServicedBy', None), ('Asset.Contact', None), ('Asset.Description', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsInternal', None), ('Asset.Price', None), ('Asset.Product2', None), ('Asset.ProductCode', None), ('Asset.ProductDescription', None), ('Asset.ProductFamily', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.UsageEndDate', None), ('AssetRelationship.RelationshipType', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.HierarchyActualCost', None), ('Campaign.HierarchyAmountAllOpportunities', None), ('Campaign.HierarchyAmountWonOpportunities', None), ('Campaign.HierarchyBudgetedCost', None), ('Campaign.HierarchyExpectedRevenue', None), ('Campaign.HierarchyNumberOfContacts', None), ('Campaign.HierarchyNumberOfConvertedLeads', None), ('Campaign.HierarchyNumberOfLeads', None), ('Campaign.HierarchyNumberOfOpportunities', None), ('Campaign.HierarchyNumberOfResponses', None), ('Campaign.HierarchyNumberOfWonOpportunities', None), ('Campaign.HierarchyNumberSent', None), ('Campaign.IsActive', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.Parent', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.Type', None), ('Case.Account', None), ('Case.Asset', None), ('Case.BusinessHours', None), ('Case.ClosedDate', None), ('Case.Contact', None), ('Case.Description', None), ('Case.IsClosedOnCreate', None), ('Case.IsEscalated', None), ('Case.Origin', None), ('Case.Parent', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.Source', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.Type', None), ('Contact.Account', None), ('Contact.Accountnumber__c', None), ('Contact.AssistantName', None), ('Contact.AssistantPhone', None), ('Contact.BankName__c', None), ('Contact.BIC__c', None), ('Contact.Birthdate', None), ('Contact.CommunicationLanguageStudentRef__c', None), ('Contact.CSPasswordTime__c', None), ('Contact.CSPasswordToken__c', None), ('Contact.CSPasswordURLAuto__c', None), ('Contact.Department', None), ('Contact.Description', None), ('Contact.DoNotCall', None), ('Contact.Email', None), ('Contact.EncryptedId__c', None), ('Contact.EncryptedIds__c', None), ('Contact.Fax', None), ('Contact.GoCardlessCountryCode__c', None), ('Contact.GoCardlessEmail__c', None), ('Contact.GoCardlessFirstName__c', None), ('Contact.GoCardlessId__c', None), ('Contact.GoCardlessLanguage__c', None), ('Contact.GoCardlessLastName__c', None), ('Contact.GoCardlessPhone__c', None), ('Contact.HasOptedOutOfEmail', None), ('Contact.HasOptedOutOfFax', None), ('Contact.HomePhone', None), ('Contact.IBAN__c', None), ('Contact.InvoiceContact__c', None), ('Contact.IsNewRecordHelper__c', None), ('Contact.Jigsaw', None), ('Contact.Kontoinhaber__c', None), ('Contact.Language__c', None), ('Contact.LeadSource', None), ('Contact.MailingAddress', None), ('Contact.MandateReferenceNumber__c', None), ('Contact.MobilePhone', None), ('Contact.OtherAddress', None), ('Contact.OtherPhone', None), ('Contact.PasswordChangeRequested__c', None), ('Contact.Phone', None), ('Contact.Position__c', None), ('Contact.Raumnummer__c', None), ('Contact.Recordcreated__c', None), ('Contact.ReportsTo', None), ('Contact.SEPALastschriftmandatErteilt__c', None), ('Contact.SEPAMandateFormAuto__c', None), ('Contact.SEPAMandateUrlAuto__c', None), ('Contact.StudentContact__c', None), ('Contact.Title', None), ('Contact.ZahlungskontaktAuto__c', None), ('Contract.ActivatedBy', None), ('Contract.ActivatedDate', None), ('Contract.Active__c', None), ('Contract.ActiveDiscounts__c', None), ('Contract.BillingAddress', None), ('Contract.CompanySigned', None), ('Contract.CompanySignedDate', None), ('Contract.ContractTerm', None), ('Contract.CostPerMonth__c', None), ('Contract.CostPerMonth2__c', None), ('Contract.CostPerSemester__c', None), ('Contract.CountInvoices__c', None), ('Contract.CustomerSigned', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.DiscountHelperAuto__c', None), ('Contract.EndDate', None), ('Contract.ETSalutationNameRef__c', None), ('Contract.FirstPayment__c', None), ('Contract.IncludeInInvoiceCreationProcessAuto__c', None), ('Contract.MatriculationFeeRef__c', None), ('Contract.Name', None), ('Contract.NumberOfInvoicesAuto__c', None), ('Contract.NumberOfPaidRatesAuto__c', None), ('Contract.OwnerExpirationNotice', None), ('Contract.PaymentContactTrig__c', None), ('Contract.PaymentInterval__c', None), ('Contract.PaymentTermsAuto__c', None), ('Contract.Pricebook2', None), ('Contract.SemesterFeeRef__c', None), ('Contract.ShippingAddress', None), ('Contract.SpecialFeeAuto__c', None), ('Contract.SpecialTerms', None), ('Contract.StandardPeriodOfStudyRef__c', None), ('Contract.StartDate', None), ('Contract.StartOfStudiesMonthRef__c', None), ('Contract.StartSummerSemesterRef__c', None), ('Contract.StartWinterSemesterRef__c', None), ('Contract.StudentIdRef__c', None), ('Contract.StudiengangRef__c', None), ('Contract.TotalAmountOfRatesAuto__c', None), ('Contract.TotalTuitionFeesRef__c', None), ('Contract.UniversityRef__c', None), ('CustomerBankAccount__c.AccountHolderName__c', None), ('CustomerBankAccount__c.AccountNumber__c', None), ('CustomerBankAccount__c.BankName__c', None), ('CustomerBankAccount__c.CountryCode__c', None), ('CustomerBankAccount__c.CurrencyIsoCode__c', None), ('CustomerBankAccount__c.CustomerBankAccountGoCardlessId__c', None), ('CustomerBankAccount__c.Enabled__c', None), ('DegreeCourse__c.CostPerMonth__c', None), ('DegreeCourse__c.CostPerMonthBeyondStandard__c', None), ('DegreeCourse__c.CostPerSemester__c', None), ('DegreeCourse__c.CourseId__c', None), ('DegreeCourse__c.FeeSemesterAbroad__c', None), ('DegreeCourse__c.FeeSemesterOff__c', None), ('DegreeCourse__c.MatriculationFee__c', None), ('DegreeCourse__c.NumberOfSofortzahlerTrig__c', None), ('DegreeCourse__c.SemesterFee__c', None), ('DegreeCourse__c.StandardPeriodOfStudy__c', None), ('DegreeCourse__c.StartOfStudies__c', None), ('DegreeCourse__c.StartOfStudiesMonth__c', None), ('DegreeCourse__c.StartSummerSemester__c', None), ('DegreeCourse__c.StartWinterSemester__c', None), ('DegreeCourse__c.TotalTuitionFeesAuto__c', None), ('dlrs__LookupChild__c.dlrs__Amount__c', None), ('dlrs__LookupChild__c.dlrs__Color__c', None), ('dlrs__LookupChild__c.dlrs__Description__c', None), ('dlrs__LookupChild__c.dlrs__Description2__c', None), ('dlrs__LookupChild__c.dlrs__LookupParent__c', None), ('dlrs__LookupChild__c.dlrs__LookupParent2__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.dlrs__Amount__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.dlrs__LookupParent__c', None), ('dlrs__LookupParent__c.dlrs__Colours__c', None), ('dlrs__LookupParent__c.dlrs__Descriptions__c', None), ('dlrs__LookupParent__c.dlrs__Descriptions2__c', None), ('dlrs__LookupParent__c.dlrs__Total__c', None), ('dlrs__LookupParent__c.dlrs__Total2__c', None), ('dlrs__LookupRollupSummary__c.dlrs__Active__c', None), ('dlrs__LookupRollupSummary__c.dlrs__AggregateAllRows__c', None), ('dlrs__LookupRollupSummary__c.dlrs__AggregateOperation__c', None), ('dlrs__LookupRollupSummary__c.dlrs__CalculateJobId__c', None), ('dlrs__LookupRollupSummary__c.dlrs__CalculationMode__c', None), ('dlrs__LookupRollupSummary__c.dlrs__CalculationSharingMode__c', None), ('dlrs__LookupRollupSummary__c.dlrs__ConcatenateDelimiter__c', None), ('dlrs__LookupRollupSummary__c.dlrs__Description__c', None), ('dlrs__LookupRollupSummary__c.dlrs__FieldToOrderBy__c', None), ('dlrs__LookupRollupSummary__c.dlrs__RelationshipCriteria__c', None), ('dlrs__LookupRollupSummary__c.dlrs__RelationshipCriteriaFields__c', None), ('dlrs__LookupRollupSummary__c.dlrs__RowLimit__c', None), ('dlrs__LookupRollupSummary__c.dlrs__TestCode__c', None), ('dlrs__LookupRollupSummary__c.dlrs__TestCodeSeeAllData__c', None), ('dlrs__LookupRollupSummary__c.dlrs__UniqueName__c', None), ('dlrs__LookupRollupSummaryLog__c.dlrs__ErrorMessage__c', None), ('dlrs__LookupRollupSummaryLog__c.dlrs__ParentObject__c', None), ('dlrs__LookupRollupSummaryLog__c.dlrs__ParentRecord__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c.dlrs__LookupRollupSummary2__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c.dlrs__ParentId__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c.dlrs__ParentRecord__c', None), ('Event.Description', None), ('Event.IsAllDayEvent', None), ('Event.Location', None), ('Event.Type', None), ('Event.What', None), ('Event.Who', None), ('GoCardlessError__c.BankAccountRef__c', None), ('GoCardlessError__c.ContactRef__c', None), ('GoCardlessError__c.ErrorMessageTrig__c', None), ('GoCardlessError__c.MandateRef__c', None), ('GoCardlessError__c.PaymentRef__c', None), ('GoCardlessEvent__c.Action__c', None), ('GoCardlessEvent__c.Cause__c', None), ('GoCardlessEvent__c.CreatedAt__c', None), ('GoCardlessEvent__c.Description__c', None), ('GoCardlessEvent__c.MandateRef__c', None), ('GoCardlessEvent__c.Origin__c', None), ('GoCardlessEvent__c.PaymentRef__c', None), ('Idea.Attachment', None), ('Idea.Status', None), ('Invoice__c.AccountnumberRef__c', None), ('Invoice__c.BankNameRef__c', None), ('Invoice__c.Contact__c', None), ('Invoice__c.DontCountRatesTrig__c', None), ('Invoice__c.ETBillingCityRef__c', None), ('Invoice__c.ETBillingStreetRef__c', None), ('Invoice__c.ETBillingZipRef__c', None), ('Invoice__c.ETFirstNameRef__c', None), ('Invoice__c.ETLastNameRef__c', None), ('Invoice__c.ETSalutationRef__c', None), ('Invoice__c.InvoiceDate__c', None), ('Invoice__c.InvoiceHasSpecialFees__c', None), ('Invoice__c.InvoiceSent__c', None), ('Invoice__c.IsDunningInvoiceTrig__c', None), ('Invoice__c.MandateGoCardlessIdAuto__c', None), ('Invoice__c.MandateRef__c', None), ('Invoice__c.MandateReferenceNumber__c', None), ('Invoice__c.PaymentTermsRef__c', None), ('Invoice__c.Period__c', None), ('Invoice__c.ReferenceTrig__c', None), ('Invoice__c.Status__c', None), ('Invoice__c.StudentIdRef__c', None), ('Invoice__c.StudiengangRef__c', None), ('Invoice__c.Total__c', None), ('Invoice__c.UniversityRef__c', None), ('InvoiceLineItem__c.Amount__c', None), ('InvoiceLineItem__c.Type__c', None), ('InvoiceLineItem__c.UnitPrice__c', None), ('Lead.Address', None), ('Lead.AnnualRevenue', None), ('Lead.Description', None), ('Lead.DoNotCall', None), ('Lead.Email', None), ('Lead.Fax', None), ('Lead.HasOptedOutOfEmail', None), ('Lead.HasOptedOutOfFax', None), ('Lead.Industry', None), ('Lead.Jigsaw', None), ('Lead.LastTransferDate', None), ('Lead.LeadSource', None), ('Lead.MobilePhone', None), ('Lead.NumberOfEmployees', None), ('Lead.Phone', None), ('Lead.Rating', None), ('Lead.Title', None), ('Lead.Website', None), ('Mandate__c.CustomerRef__c', None), ('Mandate__c.MandateId__c', None), ('Mandate__c.MandatePdf__c', None), ('Mandate__c.Reference__c', None), ('Mandate__c.Status__c', None), ('Opportunity.Account', None), ('Opportunity.Amount', None), ('Opportunity.Campaign', None), ('Opportunity.Contract', None), ('Opportunity.Description', None), ('Opportunity.ExpectedRevenue', None), ('Opportunity.IsPrivate', None), ('Opportunity.LeadSource', None), ('Opportunity.NextStep', None), ('Opportunity.Probability', None), ('Opportunity.TotalOpportunityQuantity', None), ('Opportunity.Type', None), ('OpportunityLineItem.Description', None), ('OpportunityLineItem.Discount', None), ('OpportunityLineItem.ListPrice', None), ('OpportunityLineItem.ProductCode', None), ('OpportunityLineItem.ServiceDate', None), ('OpportunityLineItem.Subtotal', None), ('OpportunityLineItem.TotalPrice', None), ('Order.ActivatedBy', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillToContact', None), ('Order.CompanyAuthorizedBy', None), ('Order.CompanyAuthorizedDate', None), ('Order.ContractEndDate', None), ('Order.ContractName', None), ('Order.CustomerAuthorizedBy', None), ('Order.CustomerAuthorizedDate', None), ('Order.Description', None), ('Order.Name', None), ('Order.Opportunity', None), ('Order.OrderReferenceNumber', None), ('Order.PoDate', None), ('Order.PoNumber', None), ('Order.ShippingAddress', None), ('Order.ShipToContact', None), ('Order.TotalAmount', None), ('Order.Type', None), ('OrderItem.Description', None), ('OrderItem.EndDate', None), ('OrderItem.ListPrice', None), ('OrderItem.ProductCode', None), ('OrderItem.ServiceDate', None), ('Payment__c.Amount__c', None), ('Payment__c.ChargeDate__c', None), ('Payment__c.Description__c', None), ('Payment__c.ETCommunicationLanguage__c', None), ('Payment__c.ETEmail__c', None), ('Payment__c.ETSalutationAuto__c', None), ('Payment__c.ETStudentContact__c', None), ('Payment__c.ETStudentName__c', None), ('Payment__c.InvoiceRef__c', None), ('Payment__c.LastFailedDateTrig__c', None), ('Payment__c.MandateRef__c', None), ('Payment__c.NumberOfFailsTrig__c', None), ('Payment__c.PaymentContact__c', None), ('Payment__c.PaymentId__c', None), ('Payment__c.Reference__c', None), ('Payment__c.RetryPayment__c', None), ('Payment__c.Status__c', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSource', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Rabatt__c.Active__c', None), ('Rabatt__c.ApplicableMonths__c', None), ('Rabatt__c.DiscountSemesterFee__c', None), ('Rabatt__c.DiscountTuitionFee__c', None), ('Rabatt__c.DiscountType__c', None), ('Rabatt__c.Utilization__c', None), ('SocialPersona.AreWeFollowing', None), ('SocialPersona.Bio', None), ('SocialPersona.Followers', None), ('SocialPersona.Following', None), ('SocialPersona.IsBlacklisted', None), ('SocialPersona.IsFollowingUs', None), ('SocialPersona.Klout', None), ('SocialPersona.ListedCount', None), ('SocialPersona.MediaProvider', None), ('SocialPersona.MediaType', None), ('SocialPersona.NumberOfFriends', None), ('SocialPersona.NumberOfTweets', None), ('SocialPersona.ProfileType', None), ('SocialPersona.R6SourceId', None), ('SocialPersona.RealName', None), ('SocialPersona.SourceApp', None), ('SocialPersona.TopicType', None), ('SocialPost.AnalyzerScore', None), ('SocialPost.AssignedTo', None), ('SocialPost.AttachmentType', None), ('SocialPost.AttachmentUrl', None), ('SocialPost.Classification', None), ('SocialPost.CommentCount', None), ('SocialPost.Content', None), ('SocialPost.DeletedBy', None), ('SocialPost.EngagementLevel', None), ('SocialPost.ExternalPostId', None), ('SocialPost.HarvestDate', None), ('SocialPost.InboundLinkCount', None), ('SocialPost.IsOutbound', None), ('SocialPost.KeywordGroupName', None), ('SocialPost.Language', None), ('SocialPost.LikesAndVotes', None), ('SocialPost.MediaProvider', None), ('SocialPost.MediaType', None), ('SocialPost.MessageType', None), ('SocialPost.OutboundSocialAccount', None), ('SocialPost.Parent', None), ('SocialPost.Persona', None), ('SocialPost.PostPriority', None), ('SocialPost.PostTags', None), ('SocialPost.PostUrl', None), ('SocialPost.R6PostId', None), ('SocialPost.R6SourceId', None), ('SocialPost.R6TopicId', None), ('SocialPost.Recipient', None), ('SocialPost.RecipientType', None), ('SocialPost.ReplyTo', None), ('SocialPost.ResponseContextExternalId', None), ('SocialPost.ReviewedStatus', None), ('SocialPost.ReviewScale', None), ('SocialPost.ReviewScore', None), ('SocialPost.Sentiment', None), ('SocialPost.Shares', None), ('SocialPost.SourceTags', None), ('SocialPost.SpamRating', None), ('SocialPost.Status', None), ('SocialPost.StatusMessage', None), ('SocialPost.ThreadSize', None), ('SocialPost.TopicProfileName', None), ('SocialPost.TopicType', None), ('SocialPost.UniqueCommentors', None), ('SocialPost.ViewCount', None), ('SocialPost.Who', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.SolutionNote', None), ('Task.ActivityDate', None), ('Task.Description', None), ('Task.Type', None), ('Task.What', None), ('Task.Who', None)])
    permissions_edit = models.BooleanField(verbose_name='Edit Field', default=models.DEFAULTED_ON_CREATE)
    permissions_read = models.BooleanField(verbose_name='Read Field', default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FieldPermissions'
        verbose_name = 'Field Permissions'
        verbose_name_plural = 'Field Permissions'
        # keyPrefix = '01k'



class FileSearchActivity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Search Activity Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='filesearchactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='filesearchactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    search_term = models.CharField(max_length=100, sf_read_only=models.READ_ONLY)
    query_date = models.DateField(verbose_name='Search Date', sf_read_only=models.READ_ONLY)
    count_queries = models.IntegerField(verbose_name='Number of Searches', sf_read_only=models.READ_ONLY)
    count_users = models.IntegerField(verbose_name='Number of Users', sf_read_only=models.READ_ONLY)
    avg_num_results = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='Average Number of Results', sf_read_only=models.READ_ONLY)
    period = models.CharField(max_length=255, verbose_name='Duration', sf_read_only=models.READ_ONLY, choices=[('DAY', 'Daily'), ('MONTH', 'Monthly'), ('YEAR', 'Yearly')])
    query_language = models.CharField(max_length=255, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    click_rank = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='Average Click Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FileSearchActivity'
        verbose_name = 'FileSearchActivity'
        verbose_name_plural = 'File Search Activity'
        # keyPrefix = '06h'



class FiscalYearSettings(models.Model):
    period = models.ForeignKey('Period', models.DO_NOTHING, related_name='fiscalyearsettings_period_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    start_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    is_standard_year = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    year_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', None), ('Custom', None), ('Placeholder', None)], blank=True, null=True)
    quarter_label_scheme = models.CharField(max_length=40, verbose_name='Quarter Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('Custom', 'Custom Quarter Names')], blank=True, null=True)
    period_label_scheme = models.CharField(max_length=40, verbose_name='Period Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('NumberByQuarter', 'Numbered By Quarter'), ('StandardMonths', 'Standard Month Names'), ('Custom', 'Custom Period Names')], blank=True, null=True)
    week_label_scheme = models.CharField(max_length=40, verbose_name='Week Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Year'), ('NumberByQuarter', 'Quarter'), ('NumberByPeriod', 'Period')], blank=True, null=True)
    quarter_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Quarter', choices=[('Quarter', 'Quartal'), ('FQ', 'GQ'), ('Q', 'Q'), ('Trimester', 'Trimester')], blank=True, null=True)
    period_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Period', choices=[('Period', 'Zeitraum'), ('FP', 'Geschäftszeitraum'), ('P', 'P'), ('Month', 'Monat')], blank=True, null=True)
    week_start_day = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FiscalYearSettings'
        verbose_name = 'Fiscal Year Settings'
        verbose_name_plural = 'Fiscal Year Settings'
        # keyPrefix = '022'



class FlexQueueItem(models.Model):
    flex_queue_item_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    job_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Future', 'Future'), ('SharingRecalculation', 'Sharing Recalculation'), ('ScheduledApex', 'Scheduled Apex'), ('BatchApex', 'Batch Apex'), ('BatchApexWorker', 'Batch Apex Worker'), ('TestRequest', 'Test Request'), ('TestWorker', 'Test Worker'), ('ApexToken', 'Apex Token'), ('Queueable', 'Queueable')])
    async_apex_job = models.ForeignKey(AsyncApexJob, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    job_position = models.IntegerField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FlexQueueItem'
        verbose_name = 'Flex Queue Item'
        verbose_name_plural = 'Flex Queue Items'
        # keyPrefix = '06i'



class FlowInterview(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowinterview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowinterview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    current_element = models.CharField(max_length=100, sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_label = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    pause_label = models.CharField(max_length=1000, verbose_name='Why Paused', sf_read_only=models.READ_ONLY, blank=True, null=True)
    guid = models.CharField(max_length=255, verbose_name='Flow Interview Guid', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterview'
        verbose_name = 'Flow Interview'
        verbose_name_plural = 'Flow Interviews'
        # keyPrefix = '0Fo'



class FlowInterviewShare(models.Model):
    parent = models.ForeignKey(FlowInterview, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterviewShare'
        verbose_name = 'Flow Interview Share'
        verbose_name_plural = 'Flow Interview Share'
        # keyPrefix = 'None'



class Folder(models.Model):
    name = models.CharField(max_length=40)
    developer_name = models.CharField(max_length=80, verbose_name='Folder Unique Name', blank=True, null=True)
    access_type = models.CharField(max_length=40, choices=[('Shared', 'Shared'), ('Public', 'Public'), ('Hidden', 'Hidden'), ('PublicInternal', 'Public Internal')])
    is_readonly = models.BooleanField(verbose_name='Read Only', default=models.DEFAULTED_ON_CREATE)
    type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Document', 'Document'), ('Email', 'Email Template'), ('Report', 'Report'), ('Dashboard', 'Dashboard')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folder_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folder_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Folder'
        verbose_name = 'Folder'
        verbose_name_plural = 'Folders'
        # keyPrefix = '00l'



class FolderedContentDocument(models.Model):
    is_folder = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folderedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folderedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FolderedContentDocument'
        verbose_name = 'Foldered Content Document'
        verbose_name_plural = 'Foldered Content Documents'
        # keyPrefix = 'None'



class ForecastShare(models.Model):
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Forecast Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    can_submit = models.BooleanField(verbose_name='Submit Allowed', sf_read_only=models.READ_ONLY, default=False)
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')])
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ForecastShare'
        verbose_name = 'Forecast Share'
        verbose_name_plural = 'Forecast Share'
        # keyPrefix = '608'



class GoCardlessApi(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey('Organization', models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='gocardlessapi_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='gocardlessapi_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    access_token = models.CharField(custom=True, max_length=255, blank=True, null=True)
    go_cardless_version = models.CharField(custom=True, max_length=255, verbose_name='GoCardless-Version', blank=True, null=True)
    endpoint = models.CharField(custom=True, max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'GoCardlessAPI__c'
        verbose_name = 'GoCardless API'
        verbose_name_plural = 'GoCardless API'
        # keyPrefix = 'a0B'



class GoCardlessErrorHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('GoCardlessError', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ContactRef__c', 'Contact'), ('created', 'Created.'), ('BankAccountRef__c', 'Customer Bank Account'), ('ErrorMessageTrig__c', 'Error Message'), ('feedEvent', 'Feed event'), ('Name', 'GoCardless Error Nr'), ('MandateRef__c', 'Mandate'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('PaymentRef__c', 'Payment'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'GoCardlessError__History'
        verbose_name = 'History: GoCardless Error'
        verbose_name_plural = 'History: GoCardless Error'
        # keyPrefix = 'None'



class GoCardlessError(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='GoCardless Error Nr', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='gocardlesserror_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='gocardlesserror_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_message_trig = models.TextField(custom=True, verbose_name='Error Message', blank=True, null=True)
    mandate_ref = models.ForeignKey('Mandate', models.DO_NOTHING, custom=True, blank=True, null=True)
    payment_ref = models.ForeignKey('Payment', models.DO_NOTHING, custom=True, blank=True, null=True)
    bank_account_ref = models.ForeignKey(CustomerBankAccount, models.DO_NOTHING, custom=True, blank=True, null=True)
    contact_ref = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'GoCardlessError__c'
        verbose_name = 'GoCardless Error'
        verbose_name_plural = 'GoCardless Errors'
        # keyPrefix = 'a0I'



class GoCardlessEvent(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='gocardlessevent_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='gocardlessevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    mandate_ref = models.ForeignKey('Mandate', models.DO_NOTHING, custom=True, blank=True, null=True)
    payment_ref = models.ForeignKey('Payment', models.DO_NOTHING, custom=True, blank=True, null=True)
    origin = models.CharField(custom=True, max_length=255, blank=True, null=True)
    description = models.TextField(custom=True, blank=True, null=True)
    cause = models.CharField(custom=True, max_length=255, blank=True, null=True)
    created_at = models.CharField(custom=True, max_length=255, blank=True, null=True)
    action = models.CharField(custom=True, max_length=255, choices=[('created', 'created'), ('customer_approval_granted', 'customer_approval_granted'), ('customer_approval_skipped', 'customer_approval_skipped'), ('submitted', 'submitted'), ('active', 'active'), ('reinstated', 'reinstated'), ('transferred', 'transferred'), ('cancelled', 'cancelled'), ('failed', 'failed'), ('expired', 'expired'), ('resubmission_requested', 'resubmission_requested'), ('replaced', 'replaced')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'GoCardlessEvent__c'
        verbose_name = 'GoCardless Event'
        verbose_name_plural = 'GoCardless Events'
        # keyPrefix = 'a0F'



class GrantedByLicense(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='grantedbylicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='grantedbylicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'GrantedByLicense'
        verbose_name = 'Setting Granted By License'
        verbose_name_plural = 'Settings Granted By Licenses'
        # keyPrefix = '06d'



class Group(models.Model):
    name = models.CharField(max_length=40)
    developer_name = models.CharField(max_length=80, blank=True, null=True)
    related = models.ForeignKey('User', models.DO_NOTHING, related_name='group_related_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [User, UserRole]
    type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('AllCustomerPortal', None), ('CollaborationGroup', None), ('Manager', None), ('ManagerAndSubordinatesInternal', None), ('Organization', None), ('PRMOrganization', None), ('Queue', None), ('Regular', None), ('Role', None), ('RoleAndSubordinates', None), ('RoleAndSubordinatesInternal', None), ('Territory', None), ('TerritoryAndSubordinates', None)])
    email = models.EmailField(blank=True, null=True)
    owner = models.ForeignKey('Organization', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Organization, User]
    does_send_email_to_members = models.BooleanField(verbose_name='Send Email to Members', default=models.DEFAULTED_ON_CREATE)
    does_include_bosses = models.BooleanField(verbose_name='Include Bosses', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='group_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='group_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Group'
        verbose_name = 'Group'
        verbose_name_plural = 'Group'
        # keyPrefix = '00G'



class GroupMember(models.Model):
    group = models.ForeignKey(Group, models.DO_NOTHING, related_name='groupmember_group_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, related_name='groupmember_userorgroup_set', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'GroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Member'
        # keyPrefix = '011'



class Holiday(models.Model):
    name = models.CharField(max_length=80, verbose_name='Holiday Name')
    description = models.CharField(max_length=100, blank=True, null=True)
    is_all_day = models.BooleanField(verbose_name='All Day', default=models.DEFAULTED_ON_CREATE)
    activity_date = models.DateField(verbose_name='Holiday Date', blank=True, null=True)
    start_time_in_minutes = models.IntegerField(verbose_name='Start Time In Minutes From Midnight', blank=True, null=True)
    end_time_in_minutes = models.IntegerField(verbose_name='End Time In Minutes From Midnight', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='holiday_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='holiday_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_recurrence = models.BooleanField(verbose_name='Recurring Holiday', default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date = models.DateField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Holiday'
        verbose_name = 'Holiday'
        verbose_name_plural = 'Holidays'
        # keyPrefix = '0C0'



class IbanisoMdt(models.Model):
    developer_name = models.CharField(max_length=40, verbose_name='Custom Metadata Record Name', sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=40, verbose_name='Label', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, default='Austria', choices=[('Austria', 'Austria'), ('Belgium', 'Belgium'), ('Bulgaria', 'Bulgaria'), ('Croatia', 'Croatia'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Faroe Islands', 'Faroe Islands'), ('Greenland', 'Greenland'), ('Denmark', 'Denmark'), ('Estonia', 'Estonia'), ('Finland', 'Finland'), ('France', 'France'), ('Germany', 'Germany'), ('Gibraltar', 'Gibraltar'), ('Greece', 'Greece'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('Ireland', 'Ireland'), ('Italy', 'Italy'), ('Latvia', 'Latvia'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Malta', 'Malta'), ('Monaco', 'Monaco'), ('Netherlands', 'Netherlands'), ('Norway', 'Norway'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Romania', 'Romania'), ('San Marino', 'San Marino'), ('Slovak Republic', 'Slovak Republic'), ('Slovenia', 'Slovenia'), ('Spain', 'Spain'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('United Kingdom', 'United Kingdom')], blank=True, null=True)
    iban = models.CharField(custom=True, db_column='IBAN__c', max_length=80, verbose_name='IBAN Example', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ibanlength = models.DecimalField(custom=True, db_column='IBANLength__c', max_digits=18, decimal_places=0, verbose_name='IBAN Length', sf_read_only=models.READ_ONLY, blank=True, null=True)
    language_0 = models.CharField(db_column='Language__c', custom=True, max_length=255, sf_read_only=models.READ_ONLY, default='English', choices=[('English', 'English'), ('German', 'German')], blank=True, null=True)  # Field renamed because of name conflict.
    language_code = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, default='en_US', choices=[('en_US', 'en_US'), ('de', 'de')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IBANIso__mdt'
        verbose_name = 'IBAN Iso'
        verbose_name_plural = 'IBAN Iso'
        # keyPrefix = 'm01'



class Idea(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    title = models.CharField(max_length=255)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='idea_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='idea_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    community = models.ForeignKey(Community, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    body = models.TextField(verbose_name='Idea Body', blank=True, null=True)
    num_comments = models.IntegerField(verbose_name='Number of Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    vote_score = models.DecimalField(max_digits=18, decimal_places=4, sf_read_only=models.READ_ONLY, blank=True, null=True)
    vote_total = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    categories = models.CharField(max_length=4099, blank=True, null=True)
    status = models.CharField(max_length=40, blank=True, null=True)
    last_comment_date = models.DateTimeField(verbose_name='Last Idea Comment Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_comment = models.ForeignKey('IdeaComment', models.DO_NOTHING, related_name='idea_lastcomment_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_idea = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    is_html = models.BooleanField(verbose_name='IsHtml', sf_read_only=models.READ_ONLY, default=False)
    is_merged = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    creator_full_photo_url = models.CharField(max_length=255, verbose_name="Url of Creator's Profile Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_small_photo_url = models.CharField(max_length=255, verbose_name="Url of Creator's Thumbnail Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_name = models.CharField(max_length=121, verbose_name='Name of Creator', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Idea'
        verbose_name = 'Idea'
        verbose_name_plural = 'Ideas'
        # keyPrefix = '087'



class IdeaComment(models.Model):
    idea = models.ForeignKey(Idea, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    community = models.ForeignKey(Community, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    comment_body = models.TextField(blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_html = models.BooleanField(verbose_name='IsHtml', sf_read_only=models.READ_ONLY, default=False)
    creator_full_photo_url = models.CharField(max_length=255, verbose_name="Url of Creator's Profile Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_small_photo_url = models.CharField(max_length=255, verbose_name="Url of Creator's Thumbnail Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_name = models.CharField(max_length=121, verbose_name='Name of Creator', sf_read_only=models.READ_ONLY, blank=True, null=True)
    up_votes = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IdeaComment'
        verbose_name = 'Idea Comment'
        verbose_name_plural = 'Idea Comments'
        # keyPrefix = '00a'



class InstalledMobileApp(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Installed Mobile App Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('downloaded', 'Downloaded'), ('installed', 'Installed')])
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_user_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    connected_application = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    version = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'InstalledMobileApp'
        verbose_name = 'Installed Mobile App'
        verbose_name_plural = 'Installed Mobile Apps'
        # keyPrefix = '0El'



class InvoiceLineItemHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('InvoiceLineItem', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Amount__c', 'Amount Total'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('Invoice__c', 'Invoice'), ('Type__c', 'Invoice Item'), ('Name', 'Invoice Line Item Name'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('UnitPrice__c', 'Unit Price')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'InvoiceLineItem__History'
        verbose_name = 'History: Invoice Line Item'
        verbose_name_plural = 'History: Invoice Line Item'
        # keyPrefix = 'None'



class InvoiceLineItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Invoice Line Item Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='invoicelineitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='invoicelineitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    invoice = models.ForeignKey('Invoice', models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    amount = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Amount Total', blank=True, null=True)
    unit_price = models.DecimalField(custom=True, max_digits=18, decimal_places=2, blank=True, null=True)
    type = models.CharField(custom=True, max_length=255, verbose_name='Invoice Item', choices=[('TuitionFee', 'Studiengebühr'), ('SemesterFee', 'Semesterbeitrag'), ('SemesterDiscount', 'Rabatt auf Semesterbeitrag'), ('OverdueFee', 'Mahngebühr'), ('MatriculationFee', 'Immatrikulationsgebühr'), ('Dunning Fee', 'Dunning Fee'), ('Fee Semester abroad', 'Fee Semester abroad'), ('Fee Semester off', 'Fee Semester off')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'InvoiceLineItem__c'
        verbose_name = 'Invoice Line Item'
        verbose_name_plural = 'Invoice Line Items'
        # keyPrefix = 'a0G'



class InvoiceHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Invoice', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Contract__c', 'Contract'), ('created', 'Created.'), ('DontCountRatesTrig__c', "Don't count rates"), ('feedEvent', 'Feed event'), ('InvoiceDate__c', 'Invoice Date'), ('InvoiceHasSpecialFees__c', 'Invoice Has Special Fees'), ('Name', 'Invoice Name'), ('InvoiceSent__c', 'Invoice Sent'), ('IsDunningInvoiceTrig__c', 'Is Dunning Invoice'), ('MandateRef__c', 'Mandate'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Contact__c', 'Payment Contact'), ('Period__c', 'Period'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ReferenceTrig__c', 'Reference'), ('Status__c', 'Status')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Invoice__History'
        verbose_name = 'History: Invoice'
        verbose_name_plural = 'History: Invoice'
        # keyPrefix = 'None'



class Invoice(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Invoice Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='invoice_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='invoice_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    university_ref = models.CharField(custom=True, max_length=1300, verbose_name='University', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, blank=True, null=True)
    mandate_ref = models.ForeignKey('Mandate', models.DO_NOTHING, custom=True, blank=True, null=True)
    student_id_ref = models.CharField(custom=True, max_length=1300, verbose_name='Student ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    period = models.CharField(custom=True, max_length=10, blank=True, null=True)
    total = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Invoice Amount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etsalutation_ref = models.CharField(custom=True, db_column='ETSalutationRef__c', max_length=1300, verbose_name='ETSalutation', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etfirst_name_ref = models.CharField(custom=True, db_column='ETFirstNameRef__c', max_length=1300, verbose_name='ETFirstName', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etlast_name_ref = models.CharField(custom=True, db_column='ETLastNameRef__c', max_length=1300, verbose_name='ETLastName', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etbilling_street_ref = models.CharField(custom=True, db_column='ETBillingStreetRef__c', max_length=1300, verbose_name='ETBillingStreet', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etbilling_zip_ref = models.CharField(custom=True, db_column='ETBillingZipRef__c', max_length=1300, verbose_name='ETBillingZip', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etbilling_city_ref = models.CharField(custom=True, db_column='ETBillingCityRef__c', max_length=1300, verbose_name='ETBillingCity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    studiengang_ref = models.CharField(custom=True, max_length=1300, verbose_name='Degree Course', sf_read_only=models.READ_ONLY, blank=True, null=True)
    payment_terms_ref = models.CharField(custom=True, max_length=1300, verbose_name='Payment Terms', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_dunning_invoice_trig = models.BooleanField(custom=True, verbose_name='Is Dunning Invoice', default=models.DEFAULTED_ON_CREATE)
    invoice_date = models.DateField(custom=True, blank=True, null=True)
    mandate_go_cardless_id_auto = models.CharField(custom=True, max_length=1300, verbose_name='Mandate GoCardless Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_trig = models.CharField(custom=True, max_length=255, verbose_name='Reference', blank=True, null=True)
    status = models.CharField(custom=True, max_length=255, choices=[('Draft', 'Draft'), ('Sent', 'Sent'), ('Paid', 'Paid'), ('Cancelled', 'Cancelled')], blank=True, null=True)
    dont_count_rates_trig = models.BooleanField(custom=True, verbose_name="Don't count rates", default=models.DEFAULTED_ON_CREATE)
    invoice_has_special_fees = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    invoice_sent = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    mandate_reference_number = models.CharField(custom=True, max_length=1300, sf_read_only=models.READ_ONLY, blank=True, null=True)
    accountnumber_ref = models.CharField(custom=True, max_length=1300, verbose_name='Accountnumber (Last two digits)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    bank_name_ref = models.CharField(custom=True, max_length=1300, verbose_name='Bank Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Invoice__c'
        verbose_name = 'Invoice'
        verbose_name_plural = 'Invoices'
        # keyPrefix = 'a09'



class KnowledgeableUser(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    topic = models.ForeignKey('Topic', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    raw_rank = models.IntegerField(verbose_name='Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'KnowledgeableUser'
        verbose_name = 'Knowledgeable User'
        verbose_name_plural = 'Knowledgeable Users'
        # keyPrefix = '0in'



class Lead(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Herr'), ('Ms.', 'Frau'), ('Mrs.', 'Frau'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=128, blank=True, null=True)
    company = models.CharField(max_length=255)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Advertisement', 'Werbung'), ('Employee Referral', 'Mitarbeiterempfehlung'), ('External Referral', 'Externe Empfehlung'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Intern'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Messe'), ('Web', 'Web'), ('Word of mouth', 'Mundpropaganda'), ('Other', 'Andere')], blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('New', 'New'), ('Contacted', 'Kontaktiert'), ('Nurturing', 'Nurturing'), ('Qualified', 'Qualifiziert'), ('Unqualified', 'Unqualifiziert')])
    industry = models.CharField(max_length=40, choices=[('Agriculture', 'Landwirtschaft'), ('Apparel', 'Bekleidung'), ('Banking', 'Bankwesen'), ('Biotechnology', 'Biotechnologie'), ('Chemicals', 'Chemie'), ('Communications', 'Kommunikation'), ('Construction', 'Bauwesen'), ('Consulting', 'Consulting'), ('Education', 'Bildungswesen'), ('Electronics', 'Elektronik'), ('Energy', 'Energie'), ('Engineering', 'Ingenieurwesen'), ('Entertainment', 'Unterhaltung'), ('Environmental', 'Umwelt'), ('Finance', 'Finanzen'), ('Food & Beverage', 'Nahrungsmittel & Getränke'), ('Government', 'Behörden'), ('Healthcare', 'Gesundheitswesen'), ('Hospitality', 'Gastronomie'), ('Insurance', 'Versicherungswesen'), ('Machinery', 'Maschinenbau'), ('Manufacturing', 'Fertigung'), ('Media', 'Medien'), ('Not For Profit', 'Gemeinnützig'), ('Other', 'Andere'), ('Recreation', 'Freizeit'), ('Retail', 'Handel'), ('Shipping', 'Spedition'), ('Technology', 'Technologie'), ('Telecommunications', 'Telekommunikation'), ('Transportation', 'Transportwesen'), ('Utilities', 'Versorgungseinrichtungen')], blank=True, null=True)
    rating = models.CharField(max_length=40, choices=[('Hot', 'Aktuell'), ('Warm', 'Etwas zurückliegend'), ('Cold', 'Lange zurückliegend')], blank=True, null=True)
    annual_revenue = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_converted = models.BooleanField(verbose_name='Converted', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    converted_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_unread_by_owner = models.BooleanField(verbose_name='Unread By Owner', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lead_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lead_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    email_bounced_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Lead'
        verbose_name = 'Lead'
        verbose_name_plural = 'Leads'
        # keyPrefix = '00Q'



class LeadFeed(models.Model):
    parent = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadFeed'
        verbose_name = 'Lead Feed'
        verbose_name_plural = 'Lead Feed'
        # keyPrefix = 'None'



class LeadHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    lead = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('AnnualRevenue', 'Annual Revenue'), ('City', 'City'), ('Company', 'Company'), ('Country', 'Country'), ('created', 'Created.'), ('Jigsaw', 'Data.com Key'), ('Description', 'Description'), ('DoNotCall', 'Do Not Call'), ('Email', 'Email'), ('EmailBouncedDate', 'Email Bounced Date'), ('EmailBouncedReason', 'Email Bounced Reason'), ('HasOptedOutOfEmail', 'Email Opt Out'), ('Fax', 'Fax'), ('HasOptedOutOfFax', 'Fax Opt Out'), ('feedEvent', 'Feed event'), ('FirstName', 'First Name'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('Industry', 'Industry'), ('LastName', 'Last Name'), ('Latitude', 'Latitude'), ('leadConverted', 'Lead Converted.'), ('leadMerged', 'Lead Merged'), ('Owner', 'Lead Owner'), ('LeadSource', 'Lead Source'), ('Status', 'Lead Status'), ('Longitude', 'Longitude'), ('MobilePhone', 'Mobile'), ('Name', 'Name'), ('NumberOfEmployees', 'No. of Employees'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Phone', 'Phone'), ('Rating', 'Rating'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Salutation', 'Salutation'), ('State', 'State/Province'), ('Street', 'Street'), ('Title', 'Title'), ('IsUnreadByOwner', 'Unread By Owner'), ('Website', 'Website'), ('PostalCode', 'Zip/Postal Code')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadHistory'
        verbose_name = 'Lead History'
        verbose_name_plural = 'Lead History'
        # keyPrefix = 'None'



class LeadShare(models.Model):
    lead = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    lead_access_level = models.CharField(max_length=40, verbose_name='Lead Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'LeadShare'
        verbose_name = 'Lead Share'
        verbose_name_plural = 'Lead Share'
        # keyPrefix = '01o'



class LeadStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_converted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'LeadStatus'
        verbose_name = 'Lead Status Value'
        verbose_name_plural = 'Lead Status Value'
        # keyPrefix = '01J'



class ListView(models.Model):
    name = models.CharField(max_length=40, verbose_name='View Name', sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='View Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTrigger', None), ('AppIpRange', None), ('AppMenuItem', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('Attachment', None), ('AuraDefinitionBundle', None), ('AuthProvider', None), ('AuthSession', None), ('BackgroundOperation', None), ('BrandTemplate', None), ('BusinessHours', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Community', None), ('ConnectedApplication', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentNote', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CountryMapping__mdt', None), ('CronTrigger', None), ('CustomEntityDefinition', None), ('CustomerBankAccount__c', None), ('CustomIndex', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('Dashboard', None), ('DashboardComponent', None), ('DebugLevel', None), ('DegreeCourse__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EmailBrand', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EntityHistory', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FlexiPage', None), ('FlowDefinition', None), ('FlowInterview', None), ('Folder', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('Group', None), ('Holiday', None), ('IBANIso__mdt', None), ('Idea', None), ('InteractionDefinitionVersion', None), ('InteractionLayoutDetail', None), ('Invoice__c', None), ('InvoiceLineItem__c', None), ('IpWhitelist', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('ListPoolUsage', None), ('ListView', None), ('LocalizedValue', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('Mandate__c', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MobileConfig', None), ('MobileDevice', None), ('NamedCredential', None), ('Note', None), ('OauthConsumer', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('Payment__c', None), ('PendingChange', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PlatformCachePartition', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessTimeQueue', None), ('Product2', None), ('Profile', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('Rabatt__c', None), ('RateLimitingNotification', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('Scontrol', None), ('SettingsTemplate', None), ('SocialPersona', None), ('SocialPost', None), ('SoftphoneLayout', None), ('Solution', None), ('StaticResource', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('User', None), ('UserAppMenuItem', None), ('UserLicense', None), ('UserProvAccount', None), ('UserRole', None), ('VerificationHistory', None), ('Vote', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkThanks', None)], blank=True, null=True)
    is_soql_compatible = models.BooleanField(verbose_name='Is SOQL Compatible', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ListView'
        verbose_name = 'List View'
        verbose_name_plural = 'List Views'
        # keyPrefix = '00B'



class ListViewChart(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTrigger', None), ('AppIpRange', None), ('AppMenuItem', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('Attachment', None), ('AuraDefinitionBundle', None), ('AuthProvider', None), ('AuthSession', None), ('BackgroundOperation', None), ('BrandTemplate', None), ('BusinessHours', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Community', None), ('ConnectedApplication', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentNote', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CountryMapping__mdt', None), ('CronTrigger', None), ('CustomEntityDefinition', None), ('CustomerBankAccount__c', None), ('CustomIndex', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('Dashboard', None), ('DashboardComponent', None), ('DebugLevel', None), ('DegreeCourse__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EmailBrand', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EntityHistory', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FlexiPage', None), ('FlowDefinition', None), ('FlowInterview', None), ('Folder', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('Group', None), ('Holiday', None), ('IBANIso__mdt', None), ('Idea', None), ('InteractionDefinitionVersion', None), ('InteractionLayoutDetail', None), ('Invoice__c', None), ('InvoiceLineItem__c', None), ('IpWhitelist', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('ListPoolUsage', None), ('ListView', None), ('LocalizedValue', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('Mandate__c', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MobileConfig', None), ('MobileDevice', None), ('NamedCredential', None), ('Note', None), ('OauthConsumer', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('Payment__c', None), ('PendingChange', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PlatformCachePartition', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessTimeQueue', None), ('Product2', None), ('Profile', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('Rabatt__c', None), ('RateLimitingNotification', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('Scontrol', None), ('SettingsTemplate', None), ('SocialPersona', None), ('SocialPost', None), ('SoftphoneLayout', None), ('Solution', None), ('StaticResource', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('User', None), ('UserAppMenuItem', None), ('UserLicense', None), ('UserProvAccount', None), ('UserRole', None), ('VerificationHistory', None), ('Vote', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkThanks', None)])
    developer_name = models.CharField(max_length=80, verbose_name='API Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_owner_set')  # Master Detail Relationship *
    chart_type = models.CharField(max_length=255, choices=[('vbar', 'Vertical Bar Chart'), ('hbar', 'Horizontal Bar Chart'), ('pie', 'Donut Chart')])
    grouping_field = models.CharField(max_length=255, verbose_name='Custom Field Definition ID', choices=[('Account.AccountSource', None), ('Account.AnnualRevenue', None), ('Account.BillingAddress', None), ('Account.BillingCity', None), ('Account.BillingCountry', None), ('Account.BillingGeocodeAccuracy', None), ('Account.BillingLatitude', None), ('Account.BillingLongitude', None), ('Account.BillingPostalCode', None), ('Account.BillingState', None), ('Account.BillingStreet', None), ('Account.CreatedById', None), ('Account.CreatedDate', None), ('Account.Description', None), ('Account.Fax', None), ('Account.Id', None), ('Account.Industry', None), ('Account.IsDeleted', None), ('Account.Jigsaw', None), ('Account.JigsawCompanyId', None), ('Account.LastActivityDate', None), ('Account.LastModifiedById', None), ('Account.LastModifiedDate', None), ('Account.LastReferencedDate', None), ('Account.LastViewedDate', None), ('Account.MasterRecordId', None), ('Account.Name', None), ('Account.NumberOfEmployees', None), ('Account.OwnerId', None), ('Account.ParentId', None), ('Account.Phone', None), ('Account.PhotoUrl', None), ('Account.RecordTypeId', None), ('Account.ShippingAddress', None), ('Account.ShippingCity', None), ('Account.ShippingCountry', None), ('Account.ShippingGeocodeAccuracy', None), ('Account.ShippingLatitude', None), ('Account.ShippingLongitude', None), ('Account.ShippingPostalCode', None), ('Account.ShippingState', None), ('Account.ShippingStreet', None), ('Account.SicDesc', None), ('Account.SystemModstamp', None), ('Account.Type', None), ('Account.Website', None), ('Asset.AccountId', None), ('Asset.ContactId', None), ('Asset.CreatedById', None), ('Asset.CreatedDate', None), ('Asset.Description', None), ('Asset.Id', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsDeleted', None), ('Asset.LastModifiedById', None), ('Asset.LastModifiedDate', None), ('Asset.LastReferencedDate', None), ('Asset.LastViewedDate', None), ('Asset.Name', None), ('Asset.OwnerId', None), ('Asset.ParentId', None), ('Asset.Price', None), ('Asset.Product2Id', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.RootAssetId', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.SystemModstamp', None), ('Asset.UsageEndDate', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.CampaignMemberRecordTypeId', None), ('Campaign.CreatedById', None), ('Campaign.CreatedDate', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.Id', None), ('Campaign.IsActive', None), ('Campaign.IsDeleted', None), ('Campaign.LastActivityDate', None), ('Campaign.LastModifiedById', None), ('Campaign.LastModifiedDate', None), ('Campaign.LastReferencedDate', None), ('Campaign.LastViewedDate', None), ('Campaign.Name', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.OwnerId', None), ('Campaign.ParentId', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.SystemModstamp', None), ('Campaign.Type', None), ('Case.AccountId', None), ('Case.CaseNumber', None), ('Case.ClosedDate', None), ('Case.ContactEmail', None), ('Case.ContactFax', None), ('Case.ContactId', None), ('Case.ContactMobile', None), ('Case.ContactPhone', None), ('Case.CreatedById', None), ('Case.CreatedDate', None), ('Case.Description', None), ('Case.Id', None), ('Case.IsClosed', None), ('Case.IsDeleted', None), ('Case.IsEscalated', None), ('Case.LastModifiedById', None), ('Case.LastModifiedDate', None), ('Case.LastReferencedDate', None), ('Case.LastViewedDate', None), ('Case.Origin', None), ('Case.OwnerId', None), ('Case.ParentId', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.Status', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.SystemModstamp', None), ('Case.Type', None), ('CollaborationGroup.AnnouncementId', None), ('CollaborationGroup.BannerPhotoUrl', None), ('CollaborationGroup.CanHaveGuests', None), ('CollaborationGroup.CollaborationType', None), ('CollaborationGroup.CreatedById', None), ('CollaborationGroup.CreatedDate', None), ('CollaborationGroup.Description', None), ('CollaborationGroup.FullPhotoUrl', None), ('CollaborationGroup.GroupEmail', None), ('CollaborationGroup.HasPrivateFieldsAccess', None), ('CollaborationGroup.Id', None), ('CollaborationGroup.InformationBody', None), ('CollaborationGroup.InformationTitle', None), ('CollaborationGroup.IsArchived', None), ('CollaborationGroup.IsAutoArchiveDisabled', None), ('CollaborationGroup.IsBroadcast', None), ('CollaborationGroup.LastFeedModifiedDate', None), ('CollaborationGroup.LastModifiedById', None), ('CollaborationGroup.LastModifiedDate', None), ('CollaborationGroup.LastReferencedDate', None), ('CollaborationGroup.LastViewedDate', None), ('CollaborationGroup.MediumPhotoUrl', None), ('CollaborationGroup.MemberCount', None), ('CollaborationGroup.Name', None), ('CollaborationGroup.OwnerId', None), ('CollaborationGroup.SmallPhotoUrl', None), ('CollaborationGroup.SystemModstamp', None), ('Contact.AccountId', None), ('Contact.AssistantName', None), ('Contact.AssistantPhone', None), ('Contact.Birthdate', None), ('Contact.CreatedById', None), ('Contact.CreatedDate', None), ('Contact.Department', None), ('Contact.Description', None), ('Contact.Email', None), ('Contact.EmailBouncedDate', None), ('Contact.EmailBouncedReason', None), ('Contact.Fax', None), ('Contact.FirstName', None), ('Contact.HomePhone', None), ('Contact.Id', None), ('Contact.IsDeleted', None), ('Contact.IsEmailBounced', None), ('Contact.Jigsaw', None), ('Contact.JigsawContactId', None), ('Contact.LastActivityDate', None), ('Contact.LastCURequestDate', None), ('Contact.LastCUUpdateDate', None), ('Contact.LastModifiedById', None), ('Contact.LastModifiedDate', None), ('Contact.LastName', None), ('Contact.LastReferencedDate', None), ('Contact.LastViewedDate', None), ('Contact.LeadSource', None), ('Contact.MailingAddress', None), ('Contact.MailingCity', None), ('Contact.MailingCountry', None), ('Contact.MailingGeocodeAccuracy', None), ('Contact.MailingLatitude', None), ('Contact.MailingLongitude', None), ('Contact.MailingPostalCode', None), ('Contact.MailingState', None), ('Contact.MailingStreet', None), ('Contact.MasterRecordId', None), ('Contact.MobilePhone', None), ('Contact.Name', None), ('Contact.OtherAddress', None), ('Contact.OtherCity', None), ('Contact.OtherCountry', None), ('Contact.OtherGeocodeAccuracy', None), ('Contact.OtherLatitude', None), ('Contact.OtherLongitude', None), ('Contact.OtherPhone', None), ('Contact.OtherPostalCode', None), ('Contact.OtherState', None), ('Contact.OtherStreet', None), ('Contact.OwnerId', None), ('Contact.Phone', None), ('Contact.PhotoUrl', None), ('Contact.RecordTypeId', None), ('Contact.ReportsToId', None), ('Contact.Salutation', None), ('Contact.SystemModstamp', None), ('Contact.Title', None), ('Contract.AccountId', None), ('Contract.ActivatedById', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.BillingCity', None), ('Contract.BillingCountry', None), ('Contract.BillingGeocodeAccuracy', None), ('Contract.BillingLatitude', None), ('Contract.BillingLongitude', None), ('Contract.BillingPostalCode', None), ('Contract.BillingState', None), ('Contract.BillingStreet', None), ('Contract.CompanySignedDate', None), ('Contract.CompanySignedId', None), ('Contract.ContractNumber', None), ('Contract.ContractTerm', None), ('Contract.CreatedById', None), ('Contract.CreatedDate', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedId', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Id', None), ('Contract.IsDeleted', None), ('Contract.LastActivityDate', None), ('Contract.LastApprovedDate', None), ('Contract.LastModifiedById', None), ('Contract.LastModifiedDate', None), ('Contract.LastReferencedDate', None), ('Contract.LastViewedDate', None), ('Contract.OwnerExpirationNotice', None), ('Contract.OwnerId', None), ('Contract.RecordTypeId', None), ('Contract.ShippingAddress', None), ('Contract.ShippingCity', None), ('Contract.ShippingCountry', None), ('Contract.ShippingGeocodeAccuracy', None), ('Contract.ShippingLatitude', None), ('Contract.ShippingLongitude', None), ('Contract.ShippingPostalCode', None), ('Contract.ShippingState', None), ('Contract.ShippingStreet', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('Contract.Status', None), ('Contract.StatusCode', None), ('Contract.SystemModstamp', None), ('CountryMapping__mdt.DeveloperName', None), ('CountryMapping__mdt.Id', None), ('CountryMapping__mdt.Label', None), ('CountryMapping__mdt.Language', None), ('CountryMapping__mdt.MasterLabel', None), ('CountryMapping__mdt.NamespacePrefix', None), ('CountryMapping__mdt.QualifiedApiName', None), ('CustomerBankAccount__c.CreatedById', None), ('CustomerBankAccount__c.CreatedDate', None), ('CustomerBankAccount__c.Id', None), ('CustomerBankAccount__c.IsDeleted', None), ('CustomerBankAccount__c.LastModifiedById', None), ('CustomerBankAccount__c.LastModifiedDate', None), ('CustomerBankAccount__c.LastReferencedDate', None), ('CustomerBankAccount__c.LastViewedDate', None), ('CustomerBankAccount__c.Name', None), ('CustomerBankAccount__c.SystemModstamp', None), ('DegreeCourse__c.CreatedById', None), ('DegreeCourse__c.CreatedDate', None), ('DegreeCourse__c.Id', None), ('DegreeCourse__c.IsDeleted', None), ('DegreeCourse__c.LastActivityDate', None), ('DegreeCourse__c.LastModifiedById', None), ('DegreeCourse__c.LastModifiedDate', None), ('DegreeCourse__c.LastReferencedDate', None), ('DegreeCourse__c.LastViewedDate', None), ('DegreeCourse__c.Name', None), ('DegreeCourse__c.SystemModstamp', None), ('dlrs__LookupChild__c.CreatedById', None), ('dlrs__LookupChild__c.CreatedDate', None), ('dlrs__LookupChild__c.Id', None), ('dlrs__LookupChild__c.IsDeleted', None), ('dlrs__LookupChild__c.LastModifiedById', None), ('dlrs__LookupChild__c.LastModifiedDate', None), ('dlrs__LookupChild__c.Name', None), ('dlrs__LookupChild__c.OwnerId', None), ('dlrs__LookupChild__c.SystemModstamp', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.CreatedById', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.CreatedDate', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.Id', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.IsDeleted', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.LastModifiedById', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.LastModifiedDate', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.Name', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.OwnerId', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.SystemModstamp', None), ('dlrs__LookupParent__c.CreatedById', None), ('dlrs__LookupParent__c.CreatedDate', None), ('dlrs__LookupParent__c.Id', None), ('dlrs__LookupParent__c.IsDeleted', None), ('dlrs__LookupParent__c.LastModifiedById', None), ('dlrs__LookupParent__c.LastModifiedDate', None), ('dlrs__LookupParent__c.Name', None), ('dlrs__LookupParent__c.OwnerId', None), ('dlrs__LookupParent__c.SystemModstamp', None), ('dlrs__LookupRollupCalculateJob__c.CreatedById', None), ('dlrs__LookupRollupCalculateJob__c.CreatedDate', None), ('dlrs__LookupRollupCalculateJob__c.Id', None), ('dlrs__LookupRollupCalculateJob__c.IsDeleted', None), ('dlrs__LookupRollupCalculateJob__c.LastModifiedById', None), ('dlrs__LookupRollupCalculateJob__c.LastModifiedDate', None), ('dlrs__LookupRollupCalculateJob__c.LastReferencedDate', None), ('dlrs__LookupRollupCalculateJob__c.LastViewedDate', None), ('dlrs__LookupRollupCalculateJob__c.Name', None), ('dlrs__LookupRollupCalculateJob__c.OwnerId', None), ('dlrs__LookupRollupCalculateJob__c.SystemModstamp', None), ('dlrs__LookupRollupSummary__c.CreatedById', None), ('dlrs__LookupRollupSummary__c.CreatedDate', None), ('dlrs__LookupRollupSummary__c.Id', None), ('dlrs__LookupRollupSummary__c.IsDeleted', None), ('dlrs__LookupRollupSummary__c.LastModifiedById', None), ('dlrs__LookupRollupSummary__c.LastModifiedDate', None), ('dlrs__LookupRollupSummary__c.LastReferencedDate', None), ('dlrs__LookupRollupSummary__c.LastViewedDate', None), ('dlrs__LookupRollupSummary__c.Name', None), ('dlrs__LookupRollupSummary__c.OwnerId', None), ('dlrs__LookupRollupSummary__c.SystemModstamp', None), ('dlrs__LookupRollupSummary2__mdt.DeveloperName', None), ('dlrs__LookupRollupSummary2__mdt.Id', None), ('dlrs__LookupRollupSummary2__mdt.Label', None), ('dlrs__LookupRollupSummary2__mdt.Language', None), ('dlrs__LookupRollupSummary2__mdt.MasterLabel', None), ('dlrs__LookupRollupSummary2__mdt.NamespacePrefix', None), ('dlrs__LookupRollupSummary2__mdt.QualifiedApiName', None), ('dlrs__LookupRollupSummaryLog__c.CreatedById', None), ('dlrs__LookupRollupSummaryLog__c.CreatedDate', None), ('dlrs__LookupRollupSummaryLog__c.Id', None), ('dlrs__LookupRollupSummaryLog__c.IsDeleted', None), ('dlrs__LookupRollupSummaryLog__c.LastModifiedById', None), ('dlrs__LookupRollupSummaryLog__c.LastModifiedDate', None), ('dlrs__LookupRollupSummaryLog__c.LastReferencedDate', None), ('dlrs__LookupRollupSummaryLog__c.LastViewedDate', None), ('dlrs__LookupRollupSummaryLog__c.Name', None), ('dlrs__LookupRollupSummaryLog__c.OwnerId', None), ('dlrs__LookupRollupSummaryLog__c.SystemModstamp', None), ('dlrs__LookupRollupSummaryScheduleItems__c.CreatedById', None), ('dlrs__LookupRollupSummaryScheduleItems__c.CreatedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.Id', None), ('dlrs__LookupRollupSummaryScheduleItems__c.IsDeleted', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastModifiedById', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastModifiedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastReferencedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastViewedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.Name', None), ('dlrs__LookupRollupSummaryScheduleItems__c.SystemModstamp', None), ('DuplicateRecordItem.CreatedById', None), ('DuplicateRecordItem.CreatedDate', None), ('DuplicateRecordItem.DuplicateRecordSetId', None), ('DuplicateRecordItem.Id', None), ('DuplicateRecordItem.IsDeleted', None), ('DuplicateRecordItem.LastModifiedById', None), ('DuplicateRecordItem.LastModifiedDate', None), ('DuplicateRecordItem.Name', None), ('DuplicateRecordItem.RecordId', None), ('DuplicateRecordItem.SystemModstamp', None), ('DuplicateRecordSet.CreatedById', None), ('DuplicateRecordSet.CreatedDate', None), ('DuplicateRecordSet.DuplicateRuleId', None), ('DuplicateRecordSet.Id', None), ('DuplicateRecordSet.IsDeleted', None), ('DuplicateRecordSet.LastModifiedById', None), ('DuplicateRecordSet.LastModifiedDate', None), ('DuplicateRecordSet.LastReferencedDate', None), ('DuplicateRecordSet.LastViewedDate', None), ('DuplicateRecordSet.Name', None), ('DuplicateRecordSet.RecordCount', None), ('DuplicateRecordSet.SystemModstamp', None), ('EmailMessage.ActivityId', None), ('EmailMessage.BccAddress', None), ('EmailMessage.CcAddress', None), ('EmailMessage.CreatedById', None), ('EmailMessage.CreatedDate', None), ('EmailMessage.FromAddress', None), ('EmailMessage.FromName', None), ('EmailMessage.HasAttachment', None), ('EmailMessage.Headers', None), ('EmailMessage.HtmlBody', None), ('EmailMessage.Id', None), ('EmailMessage.Incoming', None), ('EmailMessage.IsDeleted', None), ('EmailMessage.IsExternallyVisible', None), ('EmailMessage.LastModifiedById', None), ('EmailMessage.LastModifiedDate', None), ('EmailMessage.MessageDate', None), ('EmailMessage.MessageIdentifier', None), ('EmailMessage.ParentId', None), ('EmailMessage.RelatedToId', None), ('EmailMessage.ReplyToEmailMessageId', None), ('EmailMessage.Status', None), ('EmailMessage.Subject', None), ('EmailMessage.SystemModstamp', None), ('EmailMessage.TextBody', None), ('EmailMessage.ThreadIdentifier', None), ('EmailMessage.ToAddress', None), ('EmailMessage.ValidatedFromAddress', None), ('FlowInterview.CreatedById', None), ('FlowInterview.CreatedDate', None), ('FlowInterview.CurrentElement', None), ('FlowInterview.Guid', None), ('FlowInterview.Id', None), ('FlowInterview.InterviewLabel', None), ('FlowInterview.IsDeleted', None), ('FlowInterview.LastModifiedById', None), ('FlowInterview.LastModifiedDate', None), ('FlowInterview.Name', None), ('FlowInterview.OwnerId', None), ('FlowInterview.PauseLabel', None), ('FlowInterview.SystemModstamp', None), ('GoCardlessError__c.CreatedById', None), ('GoCardlessError__c.CreatedDate', None), ('GoCardlessError__c.Id', None), ('GoCardlessError__c.IsDeleted', None), ('GoCardlessError__c.LastActivityDate', None), ('GoCardlessError__c.LastModifiedById', None), ('GoCardlessError__c.LastModifiedDate', None), ('GoCardlessError__c.Name', None), ('GoCardlessError__c.OwnerId', None), ('GoCardlessError__c.SystemModstamp', None), ('GoCardlessEvent__c.CreatedById', None), ('GoCardlessEvent__c.CreatedDate', None), ('GoCardlessEvent__c.Id', None), ('GoCardlessEvent__c.IsDeleted', None), ('GoCardlessEvent__c.LastModifiedById', None), ('GoCardlessEvent__c.LastModifiedDate', None), ('GoCardlessEvent__c.Name', None), ('GoCardlessEvent__c.OwnerId', None), ('GoCardlessEvent__c.SystemModstamp', None), ('IBANIso__mdt.DeveloperName', None), ('IBANIso__mdt.Id', None), ('IBANIso__mdt.Label', None), ('IBANIso__mdt.Language', None), ('IBANIso__mdt.MasterLabel', None), ('IBANIso__mdt.NamespacePrefix', None), ('IBANIso__mdt.QualifiedApiName', None), ('Idea.Body', None), ('Idea.Categories', None), ('Idea.CommunityId', None), ('Idea.CreatedById', None), ('Idea.CreatedDate', None), ('Idea.CreatorFullPhotoUrl', None), ('Idea.CreatorName', None), ('Idea.CreatorSmallPhotoUrl', None), ('Idea.Id', None), ('Idea.IsDeleted', None), ('Idea.IsHtml', None), ('Idea.IsMerged', None), ('Idea.LastCommentDate', None), ('Idea.LastCommentId', None), ('Idea.LastModifiedById', None), ('Idea.LastModifiedDate', None), ('Idea.LastReferencedDate', None), ('Idea.LastViewedDate', None), ('Idea.NumComments', None), ('Idea.ParentIdeaId', None), ('Idea.RecordTypeId', None), ('Idea.Status', None), ('Idea.SystemModstamp', None), ('Idea.Title', None), ('Idea.VoteScore', None), ('Idea.VoteTotal', None), ('Invoice__c.CreatedById', None), ('Invoice__c.CreatedDate', None), ('Invoice__c.Id', None), ('Invoice__c.IsDeleted', None), ('Invoice__c.LastActivityDate', None), ('Invoice__c.LastModifiedById', None), ('Invoice__c.LastModifiedDate', None), ('Invoice__c.LastReferencedDate', None), ('Invoice__c.LastViewedDate', None), ('Invoice__c.Name', None), ('Invoice__c.SystemModstamp', None), ('InvoiceLineItem__c.CreatedById', None), ('InvoiceLineItem__c.CreatedDate', None), ('InvoiceLineItem__c.Id', None), ('InvoiceLineItem__c.IsDeleted', None), ('InvoiceLineItem__c.LastActivityDate', None), ('InvoiceLineItem__c.LastModifiedById', None), ('InvoiceLineItem__c.LastModifiedDate', None), ('InvoiceLineItem__c.LastReferencedDate', None), ('InvoiceLineItem__c.LastViewedDate', None), ('InvoiceLineItem__c.Name', None), ('InvoiceLineItem__c.SystemModstamp', None), ('Lead.Address', None), ('Lead.AnnualRevenue', None), ('Lead.City', None), ('Lead.Company', None), ('Lead.ConvertedAccountId', None), ('Lead.ConvertedContactId', None), ('Lead.ConvertedDate', None), ('Lead.ConvertedOpportunityId', None), ('Lead.Country', None), ('Lead.CreatedById', None), ('Lead.CreatedDate', None), ('Lead.Description', None), ('Lead.Email', None), ('Lead.EmailBouncedDate', None), ('Lead.EmailBouncedReason', None), ('Lead.FirstName', None), ('Lead.GeocodeAccuracy', None), ('Lead.Id', None), ('Lead.Industry', None), ('Lead.IsConverted', None), ('Lead.IsDeleted', None), ('Lead.IsUnreadByOwner', None), ('Lead.Jigsaw', None), ('Lead.JigsawContactId', None), ('Lead.LastActivityDate', None), ('Lead.LastModifiedById', None), ('Lead.LastModifiedDate', None), ('Lead.LastName', None), ('Lead.LastReferencedDate', None), ('Lead.LastViewedDate', None), ('Lead.Latitude', None), ('Lead.LeadSource', None), ('Lead.Longitude', None), ('Lead.MasterRecordId', None), ('Lead.Name', None), ('Lead.NumberOfEmployees', None), ('Lead.OwnerId', None), ('Lead.Phone', None), ('Lead.PhotoUrl', None), ('Lead.PostalCode', None), ('Lead.Rating', None), ('Lead.Salutation', None), ('Lead.State', None), ('Lead.Status', None), ('Lead.Street', None), ('Lead.SystemModstamp', None), ('Lead.Title', None), ('Lead.Website', None), ('Macro.CreatedById', None), ('Macro.CreatedDate', None), ('Macro.Description', None), ('Macro.Id', None), ('Macro.IsDeleted', None), ('Macro.LastModifiedById', None), ('Macro.LastModifiedDate', None), ('Macro.LastReferencedDate', None), ('Macro.LastViewedDate', None), ('Macro.Name', None), ('Macro.OwnerId', None), ('Macro.SystemModstamp', None), ('Mandate__c.CreatedById', None), ('Mandate__c.CreatedDate', None), ('Mandate__c.Id', None), ('Mandate__c.IsDeleted', None), ('Mandate__c.LastModifiedById', None), ('Mandate__c.LastModifiedDate', None), ('Mandate__c.LastReferencedDate', None), ('Mandate__c.LastViewedDate', None), ('Mandate__c.Name', None), ('Mandate__c.SystemModstamp', None), ('Opportunity.AccountId', None), ('Opportunity.Amount', None), ('Opportunity.CampaignId', None), ('Opportunity.CloseDate', None), ('Opportunity.CreatedById', None), ('Opportunity.CreatedDate', None), ('Opportunity.Description', None), ('Opportunity.Fiscal', None), ('Opportunity.FiscalQuarter', None), ('Opportunity.FiscalYear', None), ('Opportunity.ForecastCategory', None), ('Opportunity.ForecastCategoryName', None), ('Opportunity.HasOpenActivity', None), ('Opportunity.HasOpportunityLineItem', None), ('Opportunity.HasOverdueTask', None), ('Opportunity.Id', None), ('Opportunity.IsClosed', None), ('Opportunity.IsDeleted', None), ('Opportunity.IsWon', None), ('Opportunity.LastActivityDate', None), ('Opportunity.LastModifiedById', None), ('Opportunity.LastModifiedDate', None), ('Opportunity.LastReferencedDate', None), ('Opportunity.LastViewedDate', None), ('Opportunity.LeadSource', None), ('Opportunity.Name', None), ('Opportunity.NextStep', None), ('Opportunity.OwnerId', None), ('Opportunity.Pricebook2Id', None), ('Opportunity.Probability', None), ('Opportunity.StageName', None), ('Opportunity.SystemModstamp', None), ('Opportunity.Type', None), ('Order.AccountId', None), ('Order.ActivatedById', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillingCity', None), ('Order.BillingCountry', None), ('Order.BillingGeocodeAccuracy', None), ('Order.BillingLatitude', None), ('Order.BillingLongitude', None), ('Order.BillingPostalCode', None), ('Order.BillingState', None), ('Order.BillingStreet', None), ('Order.CompanyAuthorizedById', None), ('Order.ContractId', None), ('Order.CreatedById', None), ('Order.CreatedDate', None), ('Order.CustomerAuthorizedById', None), ('Order.Description', None), ('Order.EffectiveDate', None), ('Order.EndDate', None), ('Order.Id', None), ('Order.IsDeleted', None), ('Order.IsReductionOrder', None), ('Order.LastModifiedById', None), ('Order.LastModifiedDate', None), ('Order.LastReferencedDate', None), ('Order.LastViewedDate', None), ('Order.OrderNumber', None), ('Order.OriginalOrderId', None), ('Order.OwnerId', None), ('Order.Pricebook2Id', None), ('Order.ShippingAddress', None), ('Order.ShippingCity', None), ('Order.ShippingCountry', None), ('Order.ShippingGeocodeAccuracy', None), ('Order.ShippingLatitude', None), ('Order.ShippingLongitude', None), ('Order.ShippingPostalCode', None), ('Order.ShippingState', None), ('Order.ShippingStreet', None), ('Order.Status', None), ('Order.StatusCode', None), ('Order.SystemModstamp', None), ('Order.TotalAmount', None), ('Order.Type', None), ('Payment__c.CreatedById', None), ('Payment__c.CreatedDate', None), ('Payment__c.Id', None), ('Payment__c.IsDeleted', None), ('Payment__c.LastActivityDate', None), ('Payment__c.LastModifiedById', None), ('Payment__c.LastModifiedDate', None), ('Payment__c.Name', None), ('Payment__c.OwnerId', None), ('Payment__c.SystemModstamp', None), ('Pricebook2.CreatedById', None), ('Pricebook2.CreatedDate', None), ('Pricebook2.Description', None), ('Pricebook2.Id', None), ('Pricebook2.IsActive', None), ('Pricebook2.IsArchived', None), ('Pricebook2.IsDeleted', None), ('Pricebook2.IsStandard', None), ('Pricebook2.LastModifiedById', None), ('Pricebook2.LastModifiedDate', None), ('Pricebook2.LastReferencedDate', None), ('Pricebook2.LastViewedDate', None), ('Pricebook2.Name', None), ('Pricebook2.SystemModstamp', None), ('PricebookEntry.CreatedById', None), ('PricebookEntry.CreatedDate', None), ('PricebookEntry.Id', None), ('PricebookEntry.IsActive', None), ('PricebookEntry.IsDeleted', None), ('PricebookEntry.LastModifiedById', None), ('PricebookEntry.LastModifiedDate', None), ('PricebookEntry.Name', None), ('PricebookEntry.Pricebook2Id', None), ('PricebookEntry.Product2Id', None), ('PricebookEntry.ProductCode', None), ('PricebookEntry.SystemModstamp', None), ('PricebookEntry.UnitPrice', None), ('PricebookEntry.UseStandardPrice', None), ('Product2.CreatedById', None), ('Product2.CreatedDate', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSourceId', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.Id', None), ('Product2.IsActive', None), ('Product2.IsDeleted', None), ('Product2.LastModifiedById', None), ('Product2.LastModifiedDate', None), ('Product2.LastReferencedDate', None), ('Product2.LastViewedDate', None), ('Product2.Name', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Product2.SystemModstamp', None), ('ProfileSkill.CreatedById', None), ('ProfileSkill.CreatedDate', None), ('ProfileSkill.Description', None), ('ProfileSkill.Id', None), ('ProfileSkill.IsDeleted', None), ('ProfileSkill.LastModifiedById', None), ('ProfileSkill.LastModifiedDate', None), ('ProfileSkill.LastReferencedDate', None), ('ProfileSkill.LastViewedDate', None), ('ProfileSkill.Name', None), ('ProfileSkill.OwnerId', None), ('ProfileSkill.SystemModstamp', None), ('ProfileSkill.UserCount', None), ('ProfileSkillEndorsement.CreatedById', None), ('ProfileSkillEndorsement.CreatedDate', None), ('ProfileSkillEndorsement.Id', None), ('ProfileSkillEndorsement.IsDeleted', None), ('ProfileSkillEndorsement.LastModifiedById', None), ('ProfileSkillEndorsement.LastModifiedDate', None), ('ProfileSkillEndorsement.Name', None), ('ProfileSkillEndorsement.ProfileSkillUserId', None), ('ProfileSkillEndorsement.SystemModstamp', None), ('ProfileSkillEndorsement.UserId', None), ('ProfileSkillUser.CreatedById', None), ('ProfileSkillUser.CreatedDate', None), ('ProfileSkillUser.EndorsementCount', None), ('ProfileSkillUser.Id', None), ('ProfileSkillUser.IsDeleted', None), ('ProfileSkillUser.LastModifiedById', None), ('ProfileSkillUser.LastModifiedDate', None), ('ProfileSkillUser.Name', None), ('ProfileSkillUser.ProfileSkillId', None), ('ProfileSkillUser.SystemModstamp', None), ('ProfileSkillUser.UserId', None), ('Rabatt__c.CreatedById', None), ('Rabatt__c.CreatedDate', None), ('Rabatt__c.Id', None), ('Rabatt__c.IsDeleted', None), ('Rabatt__c.LastActivityDate', None), ('Rabatt__c.LastModifiedById', None), ('Rabatt__c.LastModifiedDate', None), ('Rabatt__c.LastReferencedDate', None), ('Rabatt__c.LastViewedDate', None), ('Rabatt__c.Name', None), ('Rabatt__c.SystemModstamp', None), ('SocialPersona.AreWeFollowing', None), ('SocialPersona.Bio', None), ('SocialPersona.CreatedById', None), ('SocialPersona.CreatedDate', None), ('SocialPersona.ExternalId', None), ('SocialPersona.ExternalPictureURL', None), ('SocialPersona.Followers', None), ('SocialPersona.Following', None), ('SocialPersona.Id', None), ('SocialPersona.IsBlacklisted', None), ('SocialPersona.IsDefault', None), ('SocialPersona.IsDeleted', None), ('SocialPersona.IsFollowingUs', None), ('SocialPersona.Klout', None), ('SocialPersona.LastModifiedById', None), ('SocialPersona.LastModifiedDate', None), ('SocialPersona.LastReferencedDate', None), ('SocialPersona.LastViewedDate', None), ('SocialPersona.ListedCount', None), ('SocialPersona.MediaProvider', None), ('SocialPersona.MediaType', None), ('SocialPersona.Name', None), ('SocialPersona.NumberOfFriends', None), ('SocialPersona.NumberOfTweets', None), ('SocialPersona.ParentId', None), ('SocialPersona.ProfileType', None), ('SocialPersona.ProfileUrl', None), ('SocialPersona.Provider', None), ('SocialPersona.R6SourceId', None), ('SocialPersona.RealName', None), ('SocialPersona.SourceApp', None), ('SocialPersona.SystemModstamp', None), ('SocialPersona.TopicType', None), ('SocialPost.AnalyzerScore', None), ('SocialPost.AssignedTo', None), ('SocialPost.AttachmentType', None), ('SocialPost.AttachmentUrl', None), ('SocialPost.Classification', None), ('SocialPost.CommentCount', None), ('SocialPost.Content', None), ('SocialPost.CreatedById', None), ('SocialPost.CreatedDate', None), ('SocialPost.DeletedById', None), ('SocialPost.EngagementLevel', None), ('SocialPost.ExternalPostId', None), ('SocialPost.Handle', None), ('SocialPost.HarvestDate', None), ('SocialPost.Headline', None), ('SocialPost.Id', None), ('SocialPost.InboundLinkCount', None), ('SocialPost.IsDeleted', None), ('SocialPost.IsOutbound', None), ('SocialPost.KeywordGroupName', None), ('SocialPost.Language', None), ('SocialPost.LastModifiedById', None), ('SocialPost.LastModifiedDate', None), ('SocialPost.LastReferencedDate', None), ('SocialPost.LastViewedDate', None), ('SocialPost.LikedBy', None), ('SocialPost.LikesAndVotes', None), ('SocialPost.MediaProvider', None), ('SocialPost.MediaType', None), ('SocialPost.MessageType', None), ('SocialPost.Name', None), ('SocialPost.OutboundSocialAccountId', None), ('SocialPost.OwnerId', None), ('SocialPost.ParentId', None), ('SocialPost.PersonaId', None), ('SocialPost.Posted', None), ('SocialPost.PostPriority', None), ('SocialPost.PostTags', None), ('SocialPost.PostUrl', None), ('SocialPost.Provider', None), ('SocialPost.R6PostId', None), ('SocialPost.R6SourceId', None), ('SocialPost.R6TopicId', None), ('SocialPost.Recipient', None), ('SocialPost.RecipientType', None), ('SocialPost.ReplyToId', None), ('SocialPost.ResponseContextExternalId', None), ('SocialPost.ReviewedStatus', None), ('SocialPost.ReviewScale', None), ('SocialPost.ReviewScore', None), ('SocialPost.Sentiment', None), ('SocialPost.Shares', None), ('SocialPost.SourceTags', None), ('SocialPost.SpamRating', None), ('SocialPost.Status', None), ('SocialPost.StatusMessage', None), ('SocialPost.SystemModstamp', None), ('SocialPost.ThreadSize', None), ('SocialPost.TopicProfileName', None), ('SocialPost.TopicType', None), ('SocialPost.TruncatedContent', None), ('SocialPost.UniqueCommentors', None), ('SocialPost.ViewCount', None), ('SocialPost.WhoId', None), ('Solution.CreatedById', None), ('Solution.CreatedDate', None), ('Solution.Id', None), ('Solution.IsDeleted', None), ('Solution.IsHtml', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.IsReviewed', None), ('Solution.LastModifiedById', None), ('Solution.LastModifiedDate', None), ('Solution.LastReferencedDate', None), ('Solution.LastViewedDate', None), ('Solution.OwnerId', None), ('Solution.SolutionName', None), ('Solution.SolutionNote', None), ('Solution.SolutionNumber', None), ('Solution.Status', None), ('Solution.SystemModstamp', None), ('Solution.TimesUsed', None), ('User.AboutMe', None), ('User.AccountId', None), ('User.Address', None), ('User.Alias', None), ('User.BadgeText', None), ('User.BannerPhotoUrl', None), ('User.CallCenterId', None), ('User.City', None), ('User.CommunityNickname', None), ('User.CompanyName', None), ('User.ContactId', None), ('User.Country', None), ('User.CreatedById', None), ('User.CreatedDate', None), ('User.DefaultGroupNotificationFrequency', None), ('User.DelegatedApproverId', None), ('User.Department', None), ('User.DigestFrequency', None), ('User.Division', None), ('User.Email', None), ('User.EmailEncodingKey', None), ('User.EmailPreferencesAutoBcc', None), ('User.EmailPreferencesAutoBccStayInTouch', None), ('User.EmailPreferencesStayInTouchReminder', None), ('User.EmployeeNumber', None), ('User.Extension', None), ('User.Fax', None), ('User.FederationIdentifier', None), ('User.FirstName', None), ('User.ForecastEnabled', None), ('User.FullPhotoUrl', None), ('User.GeocodeAccuracy', None), ('User.Id', None), ('User.IsActive', None), ('User.IsProfilePhotoActive', None), ('User.LanguageLocaleKey', None), ('User.LastLoginDate', None), ('User.LastModifiedById', None), ('User.LastModifiedDate', None), ('User.LastName', None), ('User.LastPasswordChangeDate', None), ('User.LastReferencedDate', None), ('User.LastViewedDate', None), ('User.Latitude', None), ('User.LocaleSidKey', None), ('User.Longitude', None), ('User.ManagerId', None), ('User.MediumBannerPhotoUrl', None), ('User.MediumPhotoUrl', None), ('User.MobilePhone', None), ('User.Name', None), ('User.OfflinePdaTrialExpirationDate', None), ('User.OfflineTrialExpirationDate', None), ('User.Phone', None), ('User.PostalCode', None), ('User.ProfileId', None), ('User.ReceivesAdminInfoEmails', None), ('User.ReceivesInfoEmails', None), ('User.SenderEmail', None), ('User.SenderName', None), ('User.Signature', None), ('User.SmallBannerPhotoUrl', None), ('User.SmallPhotoUrl', None), ('User.State', None), ('User.StayInTouchNote', None), ('User.StayInTouchSignature', None), ('User.StayInTouchSubject', None), ('User.Street', None), ('User.SystemModstamp', None), ('User.TimeZoneSidKey', None), ('User.Title', None), ('User.Username', None), ('User.UserPermissionsAvantgoUser', None), ('User.UserPermissionsCallCenterAutoLogin', None), ('User.UserPermissionsInteractionUser', None), ('User.UserPermissionsMarketingUser', None), ('User.UserPermissionsMobileUser', None), ('User.UserPermissionsOfflineUser', None), ('User.UserPermissionsSFContentUser', None), ('User.UserPermissionsSupportUser', None), ('User.UserPreferencesActivityRemindersPopup', None), ('User.UserPreferencesApexPagesDeveloperMode', None), ('User.UserPreferencesCacheDiagnostics', None), ('User.UserPreferencesCreateLEXAppsWTShown', None), ('User.UserPreferencesDisableAllFeedsEmail', None), ('User.UserPreferencesDisableBookmarkEmail', None), ('User.UserPreferencesDisableChangeCommentEmail', None), ('User.UserPreferencesDisableEndorsementEmail', None), ('User.UserPreferencesDisableFileShareNotificationsForApi', None), ('User.UserPreferencesDisableFollowersEmail', None), ('User.UserPreferencesDisableLaterCommentEmail', None), ('User.UserPreferencesDisableLikeEmail', None), ('User.UserPreferencesDisableMentionsPostEmail', None), ('User.UserPreferencesDisableMessageEmail', None), ('User.UserPreferencesDisableProfilePostEmail', None), ('User.UserPreferencesDisableSharePostEmail', None), ('User.UserPreferencesDisCommentAfterLikeEmail', None), ('User.UserPreferencesDisMentionsCommentEmail', None), ('User.UserPreferencesDisProfPostCommentEmail', None), ('User.UserPreferencesEnableAutoSubForFeeds', None), ('User.UserPreferencesEventRemindersCheckboxDefault', None), ('User.UserPreferencesFavoritesWTShown', None), ('User.UserPreferencesGlobalNavBarWTShown', None), ('User.UserPreferencesGlobalNavGridMenuWTShown', None), ('User.UserPreferencesHideBiggerPhotoCallout', None), ('User.UserPreferencesHideChatterOnboardingSplash', None), ('User.UserPreferencesHideCSNDesktopTask', None), ('User.UserPreferencesHideCSNGetChatterMobileTask', None), ('User.UserPreferencesHideEndUserOnboardingAssistantModal', None), ('User.UserPreferencesHideLightningMigrationModal', None), ('User.UserPreferencesHideS1BrowserUI', None), ('User.UserPreferencesHideSecondChatterOnboardingSplash', None), ('User.UserPreferencesHideSfxWelcomeMat', None), ('User.UserPreferencesLightningExperiencePreferred', None), ('User.UserPreferencesPathAssistantCollapsed', None), ('User.UserPreferencesPreviewLightning', None), ('User.UserPreferencesReminderSoundOff', None), ('User.UserPreferencesShowCityToExternalUsers', None), ('User.UserPreferencesShowCityToGuestUsers', None), ('User.UserPreferencesShowCountryToExternalUsers', None), ('User.UserPreferencesShowCountryToGuestUsers', None), ('User.UserPreferencesShowEmailToExternalUsers', None), ('User.UserPreferencesShowEmailToGuestUsers', None), ('User.UserPreferencesShowFaxToExternalUsers', None), ('User.UserPreferencesShowFaxToGuestUsers', None), ('User.UserPreferencesShowManagerToExternalUsers', None), ('User.UserPreferencesShowManagerToGuestUsers', None), ('User.UserPreferencesShowMobilePhoneToExternalUsers', None), ('User.UserPreferencesShowMobilePhoneToGuestUsers', None), ('User.UserPreferencesShowPostalCodeToExternalUsers', None), ('User.UserPreferencesShowPostalCodeToGuestUsers', None), ('User.UserPreferencesShowProfilePicToGuestUsers', None), ('User.UserPreferencesShowStateToExternalUsers', None), ('User.UserPreferencesShowStateToGuestUsers', None), ('User.UserPreferencesShowStreetAddressToExternalUsers', None), ('User.UserPreferencesShowStreetAddressToGuestUsers', None), ('User.UserPreferencesShowTitleToExternalUsers', None), ('User.UserPreferencesShowTitleToGuestUsers', None), ('User.UserPreferencesShowWorkPhoneToExternalUsers', None), ('User.UserPreferencesShowWorkPhoneToGuestUsers', None), ('User.UserPreferencesSortFeedByComment', None), ('User.UserPreferencesTaskRemindersCheckboxDefault', None), ('User.UserRoleId', None), ('User.UserType', None), ('UserAppMenuItem.ApplicationId', None), ('UserAppMenuItem.AppMenuItemId', None), ('UserAppMenuItem.Description', None), ('UserAppMenuItem.IconUrl', None), ('UserAppMenuItem.Id', None), ('UserAppMenuItem.InfoUrl', None), ('UserAppMenuItem.IsUsingAdminAuthorization', None), ('UserAppMenuItem.IsVisible', None), ('UserAppMenuItem.Label', None), ('UserAppMenuItem.LogoUrl', None), ('UserAppMenuItem.MobileStartUrl', None), ('UserAppMenuItem.Name', None), ('UserAppMenuItem.SortOrder', None), ('UserAppMenuItem.StartUrl', None), ('UserAppMenuItem.Type', None), ('UserAppMenuItem.UserSortOrder', None), ('UserProvisioningRequest.AppName', None), ('UserProvisioningRequest.ApprovalStatus', None), ('UserProvisioningRequest.ConnectedAppId', None), ('UserProvisioningRequest.CreatedById', None), ('UserProvisioningRequest.CreatedDate', None), ('UserProvisioningRequest.ExternalUserId', None), ('UserProvisioningRequest.Id', None), ('UserProvisioningRequest.IsDeleted', None), ('UserProvisioningRequest.LastModifiedById', None), ('UserProvisioningRequest.LastModifiedDate', None), ('UserProvisioningRequest.ManagerId', None), ('UserProvisioningRequest.Name', None), ('UserProvisioningRequest.Operation', None), ('UserProvisioningRequest.OwnerId', None), ('UserProvisioningRequest.ParentId', None), ('UserProvisioningRequest.RetryCount', None), ('UserProvisioningRequest.SalesforceUserId', None), ('UserProvisioningRequest.ScheduleDate', None), ('UserProvisioningRequest.State', None), ('UserProvisioningRequest.SystemModstamp', None), ('UserProvisioningRequest.UserProvAccountId', None), ('UserProvisioningRequest.UserProvConfigId', None), ('WorkBadge.CreatedById', None), ('WorkBadge.CreatedDate', None), ('WorkBadge.DefinitionId', None), ('WorkBadge.Description', None), ('WorkBadge.GiverId', None), ('WorkBadge.Id', None), ('WorkBadge.ImageUrl', None), ('WorkBadge.IsDeleted', None), ('WorkBadge.LastModifiedById', None), ('WorkBadge.LastModifiedDate', None), ('WorkBadge.LastReferencedDate', None), ('WorkBadge.LastViewedDate', None), ('WorkBadge.Message', None), ('WorkBadge.RecipientId', None), ('WorkBadge.SourceId', None), ('WorkBadge.SystemModstamp', None), ('WorkBadgeDefinition.CreatedById', None), ('WorkBadgeDefinition.CreatedDate', None), ('WorkBadgeDefinition.Description', None), ('WorkBadgeDefinition.GivenBadgeCount', None), ('WorkBadgeDefinition.Id', None), ('WorkBadgeDefinition.ImageUrl', None), ('WorkBadgeDefinition.IsActive', None), ('WorkBadgeDefinition.IsCompanyWide', None), ('WorkBadgeDefinition.IsDeleted', None), ('WorkBadgeDefinition.IsLimitPerUser', None), ('WorkBadgeDefinition.IsRewardBadge', None), ('WorkBadgeDefinition.LastModifiedById', None), ('WorkBadgeDefinition.LastModifiedDate', None), ('WorkBadgeDefinition.LastReferencedDate', None), ('WorkBadgeDefinition.LastViewedDate', None), ('WorkBadgeDefinition.LimitNumber', None), ('WorkBadgeDefinition.LimitStartDate', None), ('WorkBadgeDefinition.Name', None), ('WorkBadgeDefinition.OwnerId', None), ('WorkBadgeDefinition.SystemModstamp', None), ('WorkThanks.CreatedById', None), ('WorkThanks.CreatedDate', None), ('WorkThanks.FeedItemId', None), ('WorkThanks.GiverId', None), ('WorkThanks.Id', None), ('WorkThanks.IsDeleted', None), ('WorkThanks.LastModifiedById', None), ('WorkThanks.LastModifiedDate', None), ('WorkThanks.Message', None), ('WorkThanks.OwnerId', None), ('WorkThanks.SystemModstamp', None)], blank=True, null=True)
    aggregate_field = models.CharField(max_length=255, verbose_name='Custom Field Definition ID', choices=[('Account.AccountSource', None), ('Account.AnnualRevenue', None), ('Account.BillingAddress', None), ('Account.BillingCity', None), ('Account.BillingCountry', None), ('Account.BillingGeocodeAccuracy', None), ('Account.BillingLatitude', None), ('Account.BillingLongitude', None), ('Account.BillingPostalCode', None), ('Account.BillingState', None), ('Account.BillingStreet', None), ('Account.CreatedById', None), ('Account.CreatedDate', None), ('Account.Description', None), ('Account.Fax', None), ('Account.Id', None), ('Account.Industry', None), ('Account.IsDeleted', None), ('Account.Jigsaw', None), ('Account.JigsawCompanyId', None), ('Account.LastActivityDate', None), ('Account.LastModifiedById', None), ('Account.LastModifiedDate', None), ('Account.LastReferencedDate', None), ('Account.LastViewedDate', None), ('Account.MasterRecordId', None), ('Account.Name', None), ('Account.NumberOfEmployees', None), ('Account.OwnerId', None), ('Account.ParentId', None), ('Account.Phone', None), ('Account.PhotoUrl', None), ('Account.RecordTypeId', None), ('Account.ShippingAddress', None), ('Account.ShippingCity', None), ('Account.ShippingCountry', None), ('Account.ShippingGeocodeAccuracy', None), ('Account.ShippingLatitude', None), ('Account.ShippingLongitude', None), ('Account.ShippingPostalCode', None), ('Account.ShippingState', None), ('Account.ShippingStreet', None), ('Account.SicDesc', None), ('Account.SystemModstamp', None), ('Account.Type', None), ('Account.Website', None), ('Asset.AccountId', None), ('Asset.ContactId', None), ('Asset.CreatedById', None), ('Asset.CreatedDate', None), ('Asset.Description', None), ('Asset.Id', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsDeleted', None), ('Asset.LastModifiedById', None), ('Asset.LastModifiedDate', None), ('Asset.LastReferencedDate', None), ('Asset.LastViewedDate', None), ('Asset.Name', None), ('Asset.OwnerId', None), ('Asset.ParentId', None), ('Asset.Price', None), ('Asset.Product2Id', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.RootAssetId', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.SystemModstamp', None), ('Asset.UsageEndDate', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.CampaignMemberRecordTypeId', None), ('Campaign.CreatedById', None), ('Campaign.CreatedDate', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.Id', None), ('Campaign.IsActive', None), ('Campaign.IsDeleted', None), ('Campaign.LastActivityDate', None), ('Campaign.LastModifiedById', None), ('Campaign.LastModifiedDate', None), ('Campaign.LastReferencedDate', None), ('Campaign.LastViewedDate', None), ('Campaign.Name', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.OwnerId', None), ('Campaign.ParentId', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.SystemModstamp', None), ('Campaign.Type', None), ('Case.AccountId', None), ('Case.CaseNumber', None), ('Case.ClosedDate', None), ('Case.ContactEmail', None), ('Case.ContactFax', None), ('Case.ContactId', None), ('Case.ContactMobile', None), ('Case.ContactPhone', None), ('Case.CreatedById', None), ('Case.CreatedDate', None), ('Case.Description', None), ('Case.Id', None), ('Case.IsClosed', None), ('Case.IsDeleted', None), ('Case.IsEscalated', None), ('Case.LastModifiedById', None), ('Case.LastModifiedDate', None), ('Case.LastReferencedDate', None), ('Case.LastViewedDate', None), ('Case.Origin', None), ('Case.OwnerId', None), ('Case.ParentId', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.Status', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.SystemModstamp', None), ('Case.Type', None), ('CollaborationGroup.AnnouncementId', None), ('CollaborationGroup.BannerPhotoUrl', None), ('CollaborationGroup.CanHaveGuests', None), ('CollaborationGroup.CollaborationType', None), ('CollaborationGroup.CreatedById', None), ('CollaborationGroup.CreatedDate', None), ('CollaborationGroup.Description', None), ('CollaborationGroup.FullPhotoUrl', None), ('CollaborationGroup.GroupEmail', None), ('CollaborationGroup.HasPrivateFieldsAccess', None), ('CollaborationGroup.Id', None), ('CollaborationGroup.InformationBody', None), ('CollaborationGroup.InformationTitle', None), ('CollaborationGroup.IsArchived', None), ('CollaborationGroup.IsAutoArchiveDisabled', None), ('CollaborationGroup.IsBroadcast', None), ('CollaborationGroup.LastFeedModifiedDate', None), ('CollaborationGroup.LastModifiedById', None), ('CollaborationGroup.LastModifiedDate', None), ('CollaborationGroup.LastReferencedDate', None), ('CollaborationGroup.LastViewedDate', None), ('CollaborationGroup.MediumPhotoUrl', None), ('CollaborationGroup.MemberCount', None), ('CollaborationGroup.Name', None), ('CollaborationGroup.OwnerId', None), ('CollaborationGroup.SmallPhotoUrl', None), ('CollaborationGroup.SystemModstamp', None), ('Contact.AccountId', None), ('Contact.AssistantName', None), ('Contact.AssistantPhone', None), ('Contact.Birthdate', None), ('Contact.CreatedById', None), ('Contact.CreatedDate', None), ('Contact.Department', None), ('Contact.Description', None), ('Contact.Email', None), ('Contact.EmailBouncedDate', None), ('Contact.EmailBouncedReason', None), ('Contact.Fax', None), ('Contact.FirstName', None), ('Contact.HomePhone', None), ('Contact.Id', None), ('Contact.IsDeleted', None), ('Contact.IsEmailBounced', None), ('Contact.Jigsaw', None), ('Contact.JigsawContactId', None), ('Contact.LastActivityDate', None), ('Contact.LastCURequestDate', None), ('Contact.LastCUUpdateDate', None), ('Contact.LastModifiedById', None), ('Contact.LastModifiedDate', None), ('Contact.LastName', None), ('Contact.LastReferencedDate', None), ('Contact.LastViewedDate', None), ('Contact.LeadSource', None), ('Contact.MailingAddress', None), ('Contact.MailingCity', None), ('Contact.MailingCountry', None), ('Contact.MailingGeocodeAccuracy', None), ('Contact.MailingLatitude', None), ('Contact.MailingLongitude', None), ('Contact.MailingPostalCode', None), ('Contact.MailingState', None), ('Contact.MailingStreet', None), ('Contact.MasterRecordId', None), ('Contact.MobilePhone', None), ('Contact.Name', None), ('Contact.OtherAddress', None), ('Contact.OtherCity', None), ('Contact.OtherCountry', None), ('Contact.OtherGeocodeAccuracy', None), ('Contact.OtherLatitude', None), ('Contact.OtherLongitude', None), ('Contact.OtherPhone', None), ('Contact.OtherPostalCode', None), ('Contact.OtherState', None), ('Contact.OtherStreet', None), ('Contact.OwnerId', None), ('Contact.Phone', None), ('Contact.PhotoUrl', None), ('Contact.RecordTypeId', None), ('Contact.ReportsToId', None), ('Contact.Salutation', None), ('Contact.SystemModstamp', None), ('Contact.Title', None), ('Contract.AccountId', None), ('Contract.ActivatedById', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.BillingCity', None), ('Contract.BillingCountry', None), ('Contract.BillingGeocodeAccuracy', None), ('Contract.BillingLatitude', None), ('Contract.BillingLongitude', None), ('Contract.BillingPostalCode', None), ('Contract.BillingState', None), ('Contract.BillingStreet', None), ('Contract.CompanySignedDate', None), ('Contract.CompanySignedId', None), ('Contract.ContractNumber', None), ('Contract.ContractTerm', None), ('Contract.CreatedById', None), ('Contract.CreatedDate', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedId', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Id', None), ('Contract.IsDeleted', None), ('Contract.LastActivityDate', None), ('Contract.LastApprovedDate', None), ('Contract.LastModifiedById', None), ('Contract.LastModifiedDate', None), ('Contract.LastReferencedDate', None), ('Contract.LastViewedDate', None), ('Contract.OwnerExpirationNotice', None), ('Contract.OwnerId', None), ('Contract.RecordTypeId', None), ('Contract.ShippingAddress', None), ('Contract.ShippingCity', None), ('Contract.ShippingCountry', None), ('Contract.ShippingGeocodeAccuracy', None), ('Contract.ShippingLatitude', None), ('Contract.ShippingLongitude', None), ('Contract.ShippingPostalCode', None), ('Contract.ShippingState', None), ('Contract.ShippingStreet', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('Contract.Status', None), ('Contract.StatusCode', None), ('Contract.SystemModstamp', None), ('CountryMapping__mdt.DeveloperName', None), ('CountryMapping__mdt.Id', None), ('CountryMapping__mdt.Label', None), ('CountryMapping__mdt.Language', None), ('CountryMapping__mdt.MasterLabel', None), ('CountryMapping__mdt.NamespacePrefix', None), ('CountryMapping__mdt.QualifiedApiName', None), ('CustomerBankAccount__c.CreatedById', None), ('CustomerBankAccount__c.CreatedDate', None), ('CustomerBankAccount__c.Id', None), ('CustomerBankAccount__c.IsDeleted', None), ('CustomerBankAccount__c.LastModifiedById', None), ('CustomerBankAccount__c.LastModifiedDate', None), ('CustomerBankAccount__c.LastReferencedDate', None), ('CustomerBankAccount__c.LastViewedDate', None), ('CustomerBankAccount__c.Name', None), ('CustomerBankAccount__c.SystemModstamp', None), ('DegreeCourse__c.CreatedById', None), ('DegreeCourse__c.CreatedDate', None), ('DegreeCourse__c.Id', None), ('DegreeCourse__c.IsDeleted', None), ('DegreeCourse__c.LastActivityDate', None), ('DegreeCourse__c.LastModifiedById', None), ('DegreeCourse__c.LastModifiedDate', None), ('DegreeCourse__c.LastReferencedDate', None), ('DegreeCourse__c.LastViewedDate', None), ('DegreeCourse__c.Name', None), ('DegreeCourse__c.SystemModstamp', None), ('dlrs__LookupChild__c.CreatedById', None), ('dlrs__LookupChild__c.CreatedDate', None), ('dlrs__LookupChild__c.Id', None), ('dlrs__LookupChild__c.IsDeleted', None), ('dlrs__LookupChild__c.LastModifiedById', None), ('dlrs__LookupChild__c.LastModifiedDate', None), ('dlrs__LookupChild__c.Name', None), ('dlrs__LookupChild__c.OwnerId', None), ('dlrs__LookupChild__c.SystemModstamp', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.CreatedById', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.CreatedDate', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.Id', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.IsDeleted', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.LastModifiedById', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.LastModifiedDate', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.Name', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.OwnerId', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.SystemModstamp', None), ('dlrs__LookupParent__c.CreatedById', None), ('dlrs__LookupParent__c.CreatedDate', None), ('dlrs__LookupParent__c.Id', None), ('dlrs__LookupParent__c.IsDeleted', None), ('dlrs__LookupParent__c.LastModifiedById', None), ('dlrs__LookupParent__c.LastModifiedDate', None), ('dlrs__LookupParent__c.Name', None), ('dlrs__LookupParent__c.OwnerId', None), ('dlrs__LookupParent__c.SystemModstamp', None), ('dlrs__LookupRollupCalculateJob__c.CreatedById', None), ('dlrs__LookupRollupCalculateJob__c.CreatedDate', None), ('dlrs__LookupRollupCalculateJob__c.Id', None), ('dlrs__LookupRollupCalculateJob__c.IsDeleted', None), ('dlrs__LookupRollupCalculateJob__c.LastModifiedById', None), ('dlrs__LookupRollupCalculateJob__c.LastModifiedDate', None), ('dlrs__LookupRollupCalculateJob__c.LastReferencedDate', None), ('dlrs__LookupRollupCalculateJob__c.LastViewedDate', None), ('dlrs__LookupRollupCalculateJob__c.Name', None), ('dlrs__LookupRollupCalculateJob__c.OwnerId', None), ('dlrs__LookupRollupCalculateJob__c.SystemModstamp', None), ('dlrs__LookupRollupSummary__c.CreatedById', None), ('dlrs__LookupRollupSummary__c.CreatedDate', None), ('dlrs__LookupRollupSummary__c.Id', None), ('dlrs__LookupRollupSummary__c.IsDeleted', None), ('dlrs__LookupRollupSummary__c.LastModifiedById', None), ('dlrs__LookupRollupSummary__c.LastModifiedDate', None), ('dlrs__LookupRollupSummary__c.LastReferencedDate', None), ('dlrs__LookupRollupSummary__c.LastViewedDate', None), ('dlrs__LookupRollupSummary__c.Name', None), ('dlrs__LookupRollupSummary__c.OwnerId', None), ('dlrs__LookupRollupSummary__c.SystemModstamp', None), ('dlrs__LookupRollupSummary2__mdt.DeveloperName', None), ('dlrs__LookupRollupSummary2__mdt.Id', None), ('dlrs__LookupRollupSummary2__mdt.Label', None), ('dlrs__LookupRollupSummary2__mdt.Language', None), ('dlrs__LookupRollupSummary2__mdt.MasterLabel', None), ('dlrs__LookupRollupSummary2__mdt.NamespacePrefix', None), ('dlrs__LookupRollupSummary2__mdt.QualifiedApiName', None), ('dlrs__LookupRollupSummaryLog__c.CreatedById', None), ('dlrs__LookupRollupSummaryLog__c.CreatedDate', None), ('dlrs__LookupRollupSummaryLog__c.Id', None), ('dlrs__LookupRollupSummaryLog__c.IsDeleted', None), ('dlrs__LookupRollupSummaryLog__c.LastModifiedById', None), ('dlrs__LookupRollupSummaryLog__c.LastModifiedDate', None), ('dlrs__LookupRollupSummaryLog__c.LastReferencedDate', None), ('dlrs__LookupRollupSummaryLog__c.LastViewedDate', None), ('dlrs__LookupRollupSummaryLog__c.Name', None), ('dlrs__LookupRollupSummaryLog__c.OwnerId', None), ('dlrs__LookupRollupSummaryLog__c.SystemModstamp', None), ('dlrs__LookupRollupSummaryScheduleItems__c.CreatedById', None), ('dlrs__LookupRollupSummaryScheduleItems__c.CreatedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.Id', None), ('dlrs__LookupRollupSummaryScheduleItems__c.IsDeleted', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastModifiedById', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastModifiedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastReferencedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastViewedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.Name', None), ('dlrs__LookupRollupSummaryScheduleItems__c.SystemModstamp', None), ('DuplicateRecordItem.CreatedById', None), ('DuplicateRecordItem.CreatedDate', None), ('DuplicateRecordItem.DuplicateRecordSetId', None), ('DuplicateRecordItem.Id', None), ('DuplicateRecordItem.IsDeleted', None), ('DuplicateRecordItem.LastModifiedById', None), ('DuplicateRecordItem.LastModifiedDate', None), ('DuplicateRecordItem.Name', None), ('DuplicateRecordItem.RecordId', None), ('DuplicateRecordItem.SystemModstamp', None), ('DuplicateRecordSet.CreatedById', None), ('DuplicateRecordSet.CreatedDate', None), ('DuplicateRecordSet.DuplicateRuleId', None), ('DuplicateRecordSet.Id', None), ('DuplicateRecordSet.IsDeleted', None), ('DuplicateRecordSet.LastModifiedById', None), ('DuplicateRecordSet.LastModifiedDate', None), ('DuplicateRecordSet.LastReferencedDate', None), ('DuplicateRecordSet.LastViewedDate', None), ('DuplicateRecordSet.Name', None), ('DuplicateRecordSet.RecordCount', None), ('DuplicateRecordSet.SystemModstamp', None), ('EmailMessage.ActivityId', None), ('EmailMessage.BccAddress', None), ('EmailMessage.CcAddress', None), ('EmailMessage.CreatedById', None), ('EmailMessage.CreatedDate', None), ('EmailMessage.FromAddress', None), ('EmailMessage.FromName', None), ('EmailMessage.HasAttachment', None), ('EmailMessage.Headers', None), ('EmailMessage.HtmlBody', None), ('EmailMessage.Id', None), ('EmailMessage.Incoming', None), ('EmailMessage.IsDeleted', None), ('EmailMessage.IsExternallyVisible', None), ('EmailMessage.LastModifiedById', None), ('EmailMessage.LastModifiedDate', None), ('EmailMessage.MessageDate', None), ('EmailMessage.MessageIdentifier', None), ('EmailMessage.ParentId', None), ('EmailMessage.RelatedToId', None), ('EmailMessage.ReplyToEmailMessageId', None), ('EmailMessage.Status', None), ('EmailMessage.Subject', None), ('EmailMessage.SystemModstamp', None), ('EmailMessage.TextBody', None), ('EmailMessage.ThreadIdentifier', None), ('EmailMessage.ToAddress', None), ('EmailMessage.ValidatedFromAddress', None), ('FlowInterview.CreatedById', None), ('FlowInterview.CreatedDate', None), ('FlowInterview.CurrentElement', None), ('FlowInterview.Guid', None), ('FlowInterview.Id', None), ('FlowInterview.InterviewLabel', None), ('FlowInterview.IsDeleted', None), ('FlowInterview.LastModifiedById', None), ('FlowInterview.LastModifiedDate', None), ('FlowInterview.Name', None), ('FlowInterview.OwnerId', None), ('FlowInterview.PauseLabel', None), ('FlowInterview.SystemModstamp', None), ('GoCardlessError__c.CreatedById', None), ('GoCardlessError__c.CreatedDate', None), ('GoCardlessError__c.Id', None), ('GoCardlessError__c.IsDeleted', None), ('GoCardlessError__c.LastActivityDate', None), ('GoCardlessError__c.LastModifiedById', None), ('GoCardlessError__c.LastModifiedDate', None), ('GoCardlessError__c.Name', None), ('GoCardlessError__c.OwnerId', None), ('GoCardlessError__c.SystemModstamp', None), ('GoCardlessEvent__c.CreatedById', None), ('GoCardlessEvent__c.CreatedDate', None), ('GoCardlessEvent__c.Id', None), ('GoCardlessEvent__c.IsDeleted', None), ('GoCardlessEvent__c.LastModifiedById', None), ('GoCardlessEvent__c.LastModifiedDate', None), ('GoCardlessEvent__c.Name', None), ('GoCardlessEvent__c.OwnerId', None), ('GoCardlessEvent__c.SystemModstamp', None), ('IBANIso__mdt.DeveloperName', None), ('IBANIso__mdt.Id', None), ('IBANIso__mdt.Label', None), ('IBANIso__mdt.Language', None), ('IBANIso__mdt.MasterLabel', None), ('IBANIso__mdt.NamespacePrefix', None), ('IBANIso__mdt.QualifiedApiName', None), ('Idea.Body', None), ('Idea.Categories', None), ('Idea.CommunityId', None), ('Idea.CreatedById', None), ('Idea.CreatedDate', None), ('Idea.CreatorFullPhotoUrl', None), ('Idea.CreatorName', None), ('Idea.CreatorSmallPhotoUrl', None), ('Idea.Id', None), ('Idea.IsDeleted', None), ('Idea.IsHtml', None), ('Idea.IsMerged', None), ('Idea.LastCommentDate', None), ('Idea.LastCommentId', None), ('Idea.LastModifiedById', None), ('Idea.LastModifiedDate', None), ('Idea.LastReferencedDate', None), ('Idea.LastViewedDate', None), ('Idea.NumComments', None), ('Idea.ParentIdeaId', None), ('Idea.RecordTypeId', None), ('Idea.Status', None), ('Idea.SystemModstamp', None), ('Idea.Title', None), ('Idea.VoteScore', None), ('Idea.VoteTotal', None), ('Invoice__c.CreatedById', None), ('Invoice__c.CreatedDate', None), ('Invoice__c.Id', None), ('Invoice__c.IsDeleted', None), ('Invoice__c.LastActivityDate', None), ('Invoice__c.LastModifiedById', None), ('Invoice__c.LastModifiedDate', None), ('Invoice__c.LastReferencedDate', None), ('Invoice__c.LastViewedDate', None), ('Invoice__c.Name', None), ('Invoice__c.SystemModstamp', None), ('InvoiceLineItem__c.CreatedById', None), ('InvoiceLineItem__c.CreatedDate', None), ('InvoiceLineItem__c.Id', None), ('InvoiceLineItem__c.IsDeleted', None), ('InvoiceLineItem__c.LastActivityDate', None), ('InvoiceLineItem__c.LastModifiedById', None), ('InvoiceLineItem__c.LastModifiedDate', None), ('InvoiceLineItem__c.LastReferencedDate', None), ('InvoiceLineItem__c.LastViewedDate', None), ('InvoiceLineItem__c.Name', None), ('InvoiceLineItem__c.SystemModstamp', None), ('Lead.Address', None), ('Lead.AnnualRevenue', None), ('Lead.City', None), ('Lead.Company', None), ('Lead.ConvertedAccountId', None), ('Lead.ConvertedContactId', None), ('Lead.ConvertedDate', None), ('Lead.ConvertedOpportunityId', None), ('Lead.Country', None), ('Lead.CreatedById', None), ('Lead.CreatedDate', None), ('Lead.Description', None), ('Lead.Email', None), ('Lead.EmailBouncedDate', None), ('Lead.EmailBouncedReason', None), ('Lead.FirstName', None), ('Lead.GeocodeAccuracy', None), ('Lead.Id', None), ('Lead.Industry', None), ('Lead.IsConverted', None), ('Lead.IsDeleted', None), ('Lead.IsUnreadByOwner', None), ('Lead.Jigsaw', None), ('Lead.JigsawContactId', None), ('Lead.LastActivityDate', None), ('Lead.LastModifiedById', None), ('Lead.LastModifiedDate', None), ('Lead.LastName', None), ('Lead.LastReferencedDate', None), ('Lead.LastViewedDate', None), ('Lead.Latitude', None), ('Lead.LeadSource', None), ('Lead.Longitude', None), ('Lead.MasterRecordId', None), ('Lead.Name', None), ('Lead.NumberOfEmployees', None), ('Lead.OwnerId', None), ('Lead.Phone', None), ('Lead.PhotoUrl', None), ('Lead.PostalCode', None), ('Lead.Rating', None), ('Lead.Salutation', None), ('Lead.State', None), ('Lead.Status', None), ('Lead.Street', None), ('Lead.SystemModstamp', None), ('Lead.Title', None), ('Lead.Website', None), ('Macro.CreatedById', None), ('Macro.CreatedDate', None), ('Macro.Description', None), ('Macro.Id', None), ('Macro.IsDeleted', None), ('Macro.LastModifiedById', None), ('Macro.LastModifiedDate', None), ('Macro.LastReferencedDate', None), ('Macro.LastViewedDate', None), ('Macro.Name', None), ('Macro.OwnerId', None), ('Macro.SystemModstamp', None), ('Mandate__c.CreatedById', None), ('Mandate__c.CreatedDate', None), ('Mandate__c.Id', None), ('Mandate__c.IsDeleted', None), ('Mandate__c.LastModifiedById', None), ('Mandate__c.LastModifiedDate', None), ('Mandate__c.LastReferencedDate', None), ('Mandate__c.LastViewedDate', None), ('Mandate__c.Name', None), ('Mandate__c.SystemModstamp', None), ('Opportunity.AccountId', None), ('Opportunity.Amount', None), ('Opportunity.CampaignId', None), ('Opportunity.CloseDate', None), ('Opportunity.CreatedById', None), ('Opportunity.CreatedDate', None), ('Opportunity.Description', None), ('Opportunity.Fiscal', None), ('Opportunity.FiscalQuarter', None), ('Opportunity.FiscalYear', None), ('Opportunity.ForecastCategory', None), ('Opportunity.ForecastCategoryName', None), ('Opportunity.HasOpenActivity', None), ('Opportunity.HasOpportunityLineItem', None), ('Opportunity.HasOverdueTask', None), ('Opportunity.Id', None), ('Opportunity.IsClosed', None), ('Opportunity.IsDeleted', None), ('Opportunity.IsWon', None), ('Opportunity.LastActivityDate', None), ('Opportunity.LastModifiedById', None), ('Opportunity.LastModifiedDate', None), ('Opportunity.LastReferencedDate', None), ('Opportunity.LastViewedDate', None), ('Opportunity.LeadSource', None), ('Opportunity.Name', None), ('Opportunity.NextStep', None), ('Opportunity.OwnerId', None), ('Opportunity.Pricebook2Id', None), ('Opportunity.Probability', None), ('Opportunity.StageName', None), ('Opportunity.SystemModstamp', None), ('Opportunity.Type', None), ('Order.AccountId', None), ('Order.ActivatedById', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillingCity', None), ('Order.BillingCountry', None), ('Order.BillingGeocodeAccuracy', None), ('Order.BillingLatitude', None), ('Order.BillingLongitude', None), ('Order.BillingPostalCode', None), ('Order.BillingState', None), ('Order.BillingStreet', None), ('Order.CompanyAuthorizedById', None), ('Order.ContractId', None), ('Order.CreatedById', None), ('Order.CreatedDate', None), ('Order.CustomerAuthorizedById', None), ('Order.Description', None), ('Order.EffectiveDate', None), ('Order.EndDate', None), ('Order.Id', None), ('Order.IsDeleted', None), ('Order.IsReductionOrder', None), ('Order.LastModifiedById', None), ('Order.LastModifiedDate', None), ('Order.LastReferencedDate', None), ('Order.LastViewedDate', None), ('Order.OrderNumber', None), ('Order.OriginalOrderId', None), ('Order.OwnerId', None), ('Order.Pricebook2Id', None), ('Order.ShippingAddress', None), ('Order.ShippingCity', None), ('Order.ShippingCountry', None), ('Order.ShippingGeocodeAccuracy', None), ('Order.ShippingLatitude', None), ('Order.ShippingLongitude', None), ('Order.ShippingPostalCode', None), ('Order.ShippingState', None), ('Order.ShippingStreet', None), ('Order.Status', None), ('Order.StatusCode', None), ('Order.SystemModstamp', None), ('Order.TotalAmount', None), ('Order.Type', None), ('Payment__c.CreatedById', None), ('Payment__c.CreatedDate', None), ('Payment__c.Id', None), ('Payment__c.IsDeleted', None), ('Payment__c.LastActivityDate', None), ('Payment__c.LastModifiedById', None), ('Payment__c.LastModifiedDate', None), ('Payment__c.Name', None), ('Payment__c.OwnerId', None), ('Payment__c.SystemModstamp', None), ('Pricebook2.CreatedById', None), ('Pricebook2.CreatedDate', None), ('Pricebook2.Description', None), ('Pricebook2.Id', None), ('Pricebook2.IsActive', None), ('Pricebook2.IsArchived', None), ('Pricebook2.IsDeleted', None), ('Pricebook2.IsStandard', None), ('Pricebook2.LastModifiedById', None), ('Pricebook2.LastModifiedDate', None), ('Pricebook2.LastReferencedDate', None), ('Pricebook2.LastViewedDate', None), ('Pricebook2.Name', None), ('Pricebook2.SystemModstamp', None), ('PricebookEntry.CreatedById', None), ('PricebookEntry.CreatedDate', None), ('PricebookEntry.Id', None), ('PricebookEntry.IsActive', None), ('PricebookEntry.IsDeleted', None), ('PricebookEntry.LastModifiedById', None), ('PricebookEntry.LastModifiedDate', None), ('PricebookEntry.Name', None), ('PricebookEntry.Pricebook2Id', None), ('PricebookEntry.Product2Id', None), ('PricebookEntry.ProductCode', None), ('PricebookEntry.SystemModstamp', None), ('PricebookEntry.UnitPrice', None), ('PricebookEntry.UseStandardPrice', None), ('Product2.CreatedById', None), ('Product2.CreatedDate', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSourceId', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.Id', None), ('Product2.IsActive', None), ('Product2.IsDeleted', None), ('Product2.LastModifiedById', None), ('Product2.LastModifiedDate', None), ('Product2.LastReferencedDate', None), ('Product2.LastViewedDate', None), ('Product2.Name', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Product2.SystemModstamp', None), ('ProfileSkill.CreatedById', None), ('ProfileSkill.CreatedDate', None), ('ProfileSkill.Description', None), ('ProfileSkill.Id', None), ('ProfileSkill.IsDeleted', None), ('ProfileSkill.LastModifiedById', None), ('ProfileSkill.LastModifiedDate', None), ('ProfileSkill.LastReferencedDate', None), ('ProfileSkill.LastViewedDate', None), ('ProfileSkill.Name', None), ('ProfileSkill.OwnerId', None), ('ProfileSkill.SystemModstamp', None), ('ProfileSkill.UserCount', None), ('ProfileSkillEndorsement.CreatedById', None), ('ProfileSkillEndorsement.CreatedDate', None), ('ProfileSkillEndorsement.Id', None), ('ProfileSkillEndorsement.IsDeleted', None), ('ProfileSkillEndorsement.LastModifiedById', None), ('ProfileSkillEndorsement.LastModifiedDate', None), ('ProfileSkillEndorsement.Name', None), ('ProfileSkillEndorsement.ProfileSkillUserId', None), ('ProfileSkillEndorsement.SystemModstamp', None), ('ProfileSkillEndorsement.UserId', None), ('ProfileSkillUser.CreatedById', None), ('ProfileSkillUser.CreatedDate', None), ('ProfileSkillUser.EndorsementCount', None), ('ProfileSkillUser.Id', None), ('ProfileSkillUser.IsDeleted', None), ('ProfileSkillUser.LastModifiedById', None), ('ProfileSkillUser.LastModifiedDate', None), ('ProfileSkillUser.Name', None), ('ProfileSkillUser.ProfileSkillId', None), ('ProfileSkillUser.SystemModstamp', None), ('ProfileSkillUser.UserId', None), ('Rabatt__c.CreatedById', None), ('Rabatt__c.CreatedDate', None), ('Rabatt__c.Id', None), ('Rabatt__c.IsDeleted', None), ('Rabatt__c.LastActivityDate', None), ('Rabatt__c.LastModifiedById', None), ('Rabatt__c.LastModifiedDate', None), ('Rabatt__c.LastReferencedDate', None), ('Rabatt__c.LastViewedDate', None), ('Rabatt__c.Name', None), ('Rabatt__c.SystemModstamp', None), ('SocialPersona.AreWeFollowing', None), ('SocialPersona.Bio', None), ('SocialPersona.CreatedById', None), ('SocialPersona.CreatedDate', None), ('SocialPersona.ExternalId', None), ('SocialPersona.ExternalPictureURL', None), ('SocialPersona.Followers', None), ('SocialPersona.Following', None), ('SocialPersona.Id', None), ('SocialPersona.IsBlacklisted', None), ('SocialPersona.IsDefault', None), ('SocialPersona.IsDeleted', None), ('SocialPersona.IsFollowingUs', None), ('SocialPersona.Klout', None), ('SocialPersona.LastModifiedById', None), ('SocialPersona.LastModifiedDate', None), ('SocialPersona.LastReferencedDate', None), ('SocialPersona.LastViewedDate', None), ('SocialPersona.ListedCount', None), ('SocialPersona.MediaProvider', None), ('SocialPersona.MediaType', None), ('SocialPersona.Name', None), ('SocialPersona.NumberOfFriends', None), ('SocialPersona.NumberOfTweets', None), ('SocialPersona.ParentId', None), ('SocialPersona.ProfileType', None), ('SocialPersona.ProfileUrl', None), ('SocialPersona.Provider', None), ('SocialPersona.R6SourceId', None), ('SocialPersona.RealName', None), ('SocialPersona.SourceApp', None), ('SocialPersona.SystemModstamp', None), ('SocialPersona.TopicType', None), ('SocialPost.AnalyzerScore', None), ('SocialPost.AssignedTo', None), ('SocialPost.AttachmentType', None), ('SocialPost.AttachmentUrl', None), ('SocialPost.Classification', None), ('SocialPost.CommentCount', None), ('SocialPost.Content', None), ('SocialPost.CreatedById', None), ('SocialPost.CreatedDate', None), ('SocialPost.DeletedById', None), ('SocialPost.EngagementLevel', None), ('SocialPost.ExternalPostId', None), ('SocialPost.Handle', None), ('SocialPost.HarvestDate', None), ('SocialPost.Headline', None), ('SocialPost.Id', None), ('SocialPost.InboundLinkCount', None), ('SocialPost.IsDeleted', None), ('SocialPost.IsOutbound', None), ('SocialPost.KeywordGroupName', None), ('SocialPost.Language', None), ('SocialPost.LastModifiedById', None), ('SocialPost.LastModifiedDate', None), ('SocialPost.LastReferencedDate', None), ('SocialPost.LastViewedDate', None), ('SocialPost.LikedBy', None), ('SocialPost.LikesAndVotes', None), ('SocialPost.MediaProvider', None), ('SocialPost.MediaType', None), ('SocialPost.MessageType', None), ('SocialPost.Name', None), ('SocialPost.OutboundSocialAccountId', None), ('SocialPost.OwnerId', None), ('SocialPost.ParentId', None), ('SocialPost.PersonaId', None), ('SocialPost.Posted', None), ('SocialPost.PostPriority', None), ('SocialPost.PostTags', None), ('SocialPost.PostUrl', None), ('SocialPost.Provider', None), ('SocialPost.R6PostId', None), ('SocialPost.R6SourceId', None), ('SocialPost.R6TopicId', None), ('SocialPost.Recipient', None), ('SocialPost.RecipientType', None), ('SocialPost.ReplyToId', None), ('SocialPost.ResponseContextExternalId', None), ('SocialPost.ReviewedStatus', None), ('SocialPost.ReviewScale', None), ('SocialPost.ReviewScore', None), ('SocialPost.Sentiment', None), ('SocialPost.Shares', None), ('SocialPost.SourceTags', None), ('SocialPost.SpamRating', None), ('SocialPost.Status', None), ('SocialPost.StatusMessage', None), ('SocialPost.SystemModstamp', None), ('SocialPost.ThreadSize', None), ('SocialPost.TopicProfileName', None), ('SocialPost.TopicType', None), ('SocialPost.TruncatedContent', None), ('SocialPost.UniqueCommentors', None), ('SocialPost.ViewCount', None), ('SocialPost.WhoId', None), ('Solution.CreatedById', None), ('Solution.CreatedDate', None), ('Solution.Id', None), ('Solution.IsDeleted', None), ('Solution.IsHtml', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.IsReviewed', None), ('Solution.LastModifiedById', None), ('Solution.LastModifiedDate', None), ('Solution.LastReferencedDate', None), ('Solution.LastViewedDate', None), ('Solution.OwnerId', None), ('Solution.SolutionName', None), ('Solution.SolutionNote', None), ('Solution.SolutionNumber', None), ('Solution.Status', None), ('Solution.SystemModstamp', None), ('Solution.TimesUsed', None), ('User.AboutMe', None), ('User.AccountId', None), ('User.Address', None), ('User.Alias', None), ('User.BadgeText', None), ('User.BannerPhotoUrl', None), ('User.CallCenterId', None), ('User.City', None), ('User.CommunityNickname', None), ('User.CompanyName', None), ('User.ContactId', None), ('User.Country', None), ('User.CreatedById', None), ('User.CreatedDate', None), ('User.DefaultGroupNotificationFrequency', None), ('User.DelegatedApproverId', None), ('User.Department', None), ('User.DigestFrequency', None), ('User.Division', None), ('User.Email', None), ('User.EmailEncodingKey', None), ('User.EmailPreferencesAutoBcc', None), ('User.EmailPreferencesAutoBccStayInTouch', None), ('User.EmailPreferencesStayInTouchReminder', None), ('User.EmployeeNumber', None), ('User.Extension', None), ('User.Fax', None), ('User.FederationIdentifier', None), ('User.FirstName', None), ('User.ForecastEnabled', None), ('User.FullPhotoUrl', None), ('User.GeocodeAccuracy', None), ('User.Id', None), ('User.IsActive', None), ('User.IsProfilePhotoActive', None), ('User.LanguageLocaleKey', None), ('User.LastLoginDate', None), ('User.LastModifiedById', None), ('User.LastModifiedDate', None), ('User.LastName', None), ('User.LastPasswordChangeDate', None), ('User.LastReferencedDate', None), ('User.LastViewedDate', None), ('User.Latitude', None), ('User.LocaleSidKey', None), ('User.Longitude', None), ('User.ManagerId', None), ('User.MediumBannerPhotoUrl', None), ('User.MediumPhotoUrl', None), ('User.MobilePhone', None), ('User.Name', None), ('User.OfflinePdaTrialExpirationDate', None), ('User.OfflineTrialExpirationDate', None), ('User.Phone', None), ('User.PostalCode', None), ('User.ProfileId', None), ('User.ReceivesAdminInfoEmails', None), ('User.ReceivesInfoEmails', None), ('User.SenderEmail', None), ('User.SenderName', None), ('User.Signature', None), ('User.SmallBannerPhotoUrl', None), ('User.SmallPhotoUrl', None), ('User.State', None), ('User.StayInTouchNote', None), ('User.StayInTouchSignature', None), ('User.StayInTouchSubject', None), ('User.Street', None), ('User.SystemModstamp', None), ('User.TimeZoneSidKey', None), ('User.Title', None), ('User.Username', None), ('User.UserPermissionsAvantgoUser', None), ('User.UserPermissionsCallCenterAutoLogin', None), ('User.UserPermissionsInteractionUser', None), ('User.UserPermissionsMarketingUser', None), ('User.UserPermissionsMobileUser', None), ('User.UserPermissionsOfflineUser', None), ('User.UserPermissionsSFContentUser', None), ('User.UserPermissionsSupportUser', None), ('User.UserPreferencesActivityRemindersPopup', None), ('User.UserPreferencesApexPagesDeveloperMode', None), ('User.UserPreferencesCacheDiagnostics', None), ('User.UserPreferencesCreateLEXAppsWTShown', None), ('User.UserPreferencesDisableAllFeedsEmail', None), ('User.UserPreferencesDisableBookmarkEmail', None), ('User.UserPreferencesDisableChangeCommentEmail', None), ('User.UserPreferencesDisableEndorsementEmail', None), ('User.UserPreferencesDisableFileShareNotificationsForApi', None), ('User.UserPreferencesDisableFollowersEmail', None), ('User.UserPreferencesDisableLaterCommentEmail', None), ('User.UserPreferencesDisableLikeEmail', None), ('User.UserPreferencesDisableMentionsPostEmail', None), ('User.UserPreferencesDisableMessageEmail', None), ('User.UserPreferencesDisableProfilePostEmail', None), ('User.UserPreferencesDisableSharePostEmail', None), ('User.UserPreferencesDisCommentAfterLikeEmail', None), ('User.UserPreferencesDisMentionsCommentEmail', None), ('User.UserPreferencesDisProfPostCommentEmail', None), ('User.UserPreferencesEnableAutoSubForFeeds', None), ('User.UserPreferencesEventRemindersCheckboxDefault', None), ('User.UserPreferencesFavoritesWTShown', None), ('User.UserPreferencesGlobalNavBarWTShown', None), ('User.UserPreferencesGlobalNavGridMenuWTShown', None), ('User.UserPreferencesHideBiggerPhotoCallout', None), ('User.UserPreferencesHideChatterOnboardingSplash', None), ('User.UserPreferencesHideCSNDesktopTask', None), ('User.UserPreferencesHideCSNGetChatterMobileTask', None), ('User.UserPreferencesHideEndUserOnboardingAssistantModal', None), ('User.UserPreferencesHideLightningMigrationModal', None), ('User.UserPreferencesHideS1BrowserUI', None), ('User.UserPreferencesHideSecondChatterOnboardingSplash', None), ('User.UserPreferencesHideSfxWelcomeMat', None), ('User.UserPreferencesLightningExperiencePreferred', None), ('User.UserPreferencesPathAssistantCollapsed', None), ('User.UserPreferencesPreviewLightning', None), ('User.UserPreferencesReminderSoundOff', None), ('User.UserPreferencesShowCityToExternalUsers', None), ('User.UserPreferencesShowCityToGuestUsers', None), ('User.UserPreferencesShowCountryToExternalUsers', None), ('User.UserPreferencesShowCountryToGuestUsers', None), ('User.UserPreferencesShowEmailToExternalUsers', None), ('User.UserPreferencesShowEmailToGuestUsers', None), ('User.UserPreferencesShowFaxToExternalUsers', None), ('User.UserPreferencesShowFaxToGuestUsers', None), ('User.UserPreferencesShowManagerToExternalUsers', None), ('User.UserPreferencesShowManagerToGuestUsers', None), ('User.UserPreferencesShowMobilePhoneToExternalUsers', None), ('User.UserPreferencesShowMobilePhoneToGuestUsers', None), ('User.UserPreferencesShowPostalCodeToExternalUsers', None), ('User.UserPreferencesShowPostalCodeToGuestUsers', None), ('User.UserPreferencesShowProfilePicToGuestUsers', None), ('User.UserPreferencesShowStateToExternalUsers', None), ('User.UserPreferencesShowStateToGuestUsers', None), ('User.UserPreferencesShowStreetAddressToExternalUsers', None), ('User.UserPreferencesShowStreetAddressToGuestUsers', None), ('User.UserPreferencesShowTitleToExternalUsers', None), ('User.UserPreferencesShowTitleToGuestUsers', None), ('User.UserPreferencesShowWorkPhoneToExternalUsers', None), ('User.UserPreferencesShowWorkPhoneToGuestUsers', None), ('User.UserPreferencesSortFeedByComment', None), ('User.UserPreferencesTaskRemindersCheckboxDefault', None), ('User.UserRoleId', None), ('User.UserType', None), ('UserAppMenuItem.ApplicationId', None), ('UserAppMenuItem.AppMenuItemId', None), ('UserAppMenuItem.Description', None), ('UserAppMenuItem.IconUrl', None), ('UserAppMenuItem.Id', None), ('UserAppMenuItem.InfoUrl', None), ('UserAppMenuItem.IsUsingAdminAuthorization', None), ('UserAppMenuItem.IsVisible', None), ('UserAppMenuItem.Label', None), ('UserAppMenuItem.LogoUrl', None), ('UserAppMenuItem.MobileStartUrl', None), ('UserAppMenuItem.Name', None), ('UserAppMenuItem.SortOrder', None), ('UserAppMenuItem.StartUrl', None), ('UserAppMenuItem.Type', None), ('UserAppMenuItem.UserSortOrder', None), ('UserProvisioningRequest.AppName', None), ('UserProvisioningRequest.ApprovalStatus', None), ('UserProvisioningRequest.ConnectedAppId', None), ('UserProvisioningRequest.CreatedById', None), ('UserProvisioningRequest.CreatedDate', None), ('UserProvisioningRequest.ExternalUserId', None), ('UserProvisioningRequest.Id', None), ('UserProvisioningRequest.IsDeleted', None), ('UserProvisioningRequest.LastModifiedById', None), ('UserProvisioningRequest.LastModifiedDate', None), ('UserProvisioningRequest.ManagerId', None), ('UserProvisioningRequest.Name', None), ('UserProvisioningRequest.Operation', None), ('UserProvisioningRequest.OwnerId', None), ('UserProvisioningRequest.ParentId', None), ('UserProvisioningRequest.RetryCount', None), ('UserProvisioningRequest.SalesforceUserId', None), ('UserProvisioningRequest.ScheduleDate', None), ('UserProvisioningRequest.State', None), ('UserProvisioningRequest.SystemModstamp', None), ('UserProvisioningRequest.UserProvAccountId', None), ('UserProvisioningRequest.UserProvConfigId', None), ('WorkBadge.CreatedById', None), ('WorkBadge.CreatedDate', None), ('WorkBadge.DefinitionId', None), ('WorkBadge.Description', None), ('WorkBadge.GiverId', None), ('WorkBadge.Id', None), ('WorkBadge.ImageUrl', None), ('WorkBadge.IsDeleted', None), ('WorkBadge.LastModifiedById', None), ('WorkBadge.LastModifiedDate', None), ('WorkBadge.LastReferencedDate', None), ('WorkBadge.LastViewedDate', None), ('WorkBadge.Message', None), ('WorkBadge.RecipientId', None), ('WorkBadge.SourceId', None), ('WorkBadge.SystemModstamp', None), ('WorkBadgeDefinition.CreatedById', None), ('WorkBadgeDefinition.CreatedDate', None), ('WorkBadgeDefinition.Description', None), ('WorkBadgeDefinition.GivenBadgeCount', None), ('WorkBadgeDefinition.Id', None), ('WorkBadgeDefinition.ImageUrl', None), ('WorkBadgeDefinition.IsActive', None), ('WorkBadgeDefinition.IsCompanyWide', None), ('WorkBadgeDefinition.IsDeleted', None), ('WorkBadgeDefinition.IsLimitPerUser', None), ('WorkBadgeDefinition.IsRewardBadge', None), ('WorkBadgeDefinition.LastModifiedById', None), ('WorkBadgeDefinition.LastModifiedDate', None), ('WorkBadgeDefinition.LastReferencedDate', None), ('WorkBadgeDefinition.LastViewedDate', None), ('WorkBadgeDefinition.LimitNumber', None), ('WorkBadgeDefinition.LimitStartDate', None), ('WorkBadgeDefinition.Name', None), ('WorkBadgeDefinition.OwnerId', None), ('WorkBadgeDefinition.SystemModstamp', None), ('WorkThanks.CreatedById', None), ('WorkThanks.CreatedDate', None), ('WorkThanks.FeedItemId', None), ('WorkThanks.GiverId', None), ('WorkThanks.Id', None), ('WorkThanks.IsDeleted', None), ('WorkThanks.LastModifiedById', None), ('WorkThanks.LastModifiedDate', None), ('WorkThanks.Message', None), ('WorkThanks.OwnerId', None), ('WorkThanks.SystemModstamp', None)], blank=True, null=True)
    aggregate_type = models.CharField(max_length=255, choices=[('Sum', 'Sum'), ('Count', 'Count'), ('Avg', 'Average')])
    class Meta(models.Model.Meta):
        db_table = 'ListViewChart'
        verbose_name = 'List View Chart'
        verbose_name_plural = 'List View Charts'
        # keyPrefix = '0Dd'



class ListViewChartInstance(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='ListView Chart Instance ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    list_view_chart = models.ForeignKey(ListViewChart, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='API Name', sf_read_only=models.READ_ONLY)
    source_entity = models.CharField(max_length=255, verbose_name='Entity', sf_read_only=models.READ_ONLY)
    list_view_context = models.ForeignKey(ListView, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    chart_type = models.CharField(max_length=255, verbose_name='TODO, use alias', sf_read_only=models.READ_ONLY, choices=[('vbar', 'Vertical Bar Chart'), ('hbar', 'Horizontal Bar Chart'), ('pie', 'Donut Chart')])
    is_last_viewed = models.BooleanField(verbose_name='Last Viewed', sf_read_only=models.READ_ONLY, default=False)
    data_query = models.TextField(verbose_name='SOQL Query for Chart Data', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_editable = models.BooleanField(verbose_name='Editable', sf_read_only=models.READ_ONLY, default=False)
    is_deletable = models.BooleanField(verbose_name='Deletable', sf_read_only=models.READ_ONLY, default=False)
    grouping_field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    aggregate_field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    aggregate_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Sum', 'Sum'), ('Count', 'Count'), ('Avg', 'Average')])
    class Meta(models.Model.Meta):
        db_table = 'ListViewChartInstance'
        verbose_name = 'List View Chart Instance'
        verbose_name_plural = 'List View Chart Instances'
        # keyPrefix = '0De'



class LoginGeo(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='logingeo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='logingeo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    login_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    country_iso = models.CharField(max_length=3, verbose_name='Country Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='PostalCode', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subdivision = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginGeo'
        verbose_name = 'Login Geo Data'
        verbose_name_plural = 'Login Geo Data'
        # keyPrefix = '04F'



class LoginHistory(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    login_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    login_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_url = models.CharField(max_length=255, verbose_name='Login URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authentication_service = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [AuthProvider, SamlSsoConfig]
    login_geo = models.ForeignKey(LoginGeo, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    tls_protocol = models.CharField(max_length=40, verbose_name='TLS Protocol', sf_read_only=models.READ_ONLY, choices=[('TLS 1.0', 'TLS 1.0'), ('TLS 1.1', 'TLS 1.1'), ('TLS 1.2', 'TLS 1.2'), ('Unknown', 'Unknown')], blank=True, null=True)
    cipher_suite = models.CharField(max_length=40, verbose_name='TLS Cipher Suite', sf_read_only=models.READ_ONLY, choices=[('AES128-GCM-SHA256', 'AES128-GCM-SHA256'), ('AES128-SHA', 'AES128-SHA'), ('AES128-SHA256', 'AES128-SHA256'), ('AES256-GCM-SHA384', 'AES256-GCM-SHA384'), ('AES256-SHA', 'AES256-SHA'), ('AES256-SHA256', 'AES256-SHA256'), ('DES-CBC3-SHA', 'DES-CBC3-SHA'), ('DHE-RSA-AES128-GCM-SHA256', 'DHE-RSA-AES128-GCM-SHA256'), ('DHE-RSA-AES128-SHA', 'DHE-RSA-AES128-SHA'), ('DHE-RSA-AES256-GCM-SHA384', 'DHE-RSA-AES256-GCM-SHA384'), ('DHE-RSA-AES256-SHA', 'DHE-RSA-AES256-SHA'), ('DHE-RSA-DES-CBC3-SHA', 'DHE-RSA-DES-CBC3-SHA'), ('ECDH-ECDSA-AES128-GCM-SHA256', 'ECDH-ECDSA-AES128-GCM-SHA256'), ('ECDH-ECDSA-AES128-SHA256', 'ECDH-ECDSA-AES128-SHA256'), ('ECDH-ECDSA-AES256-GCM-SHA384', 'ECDH-ECDSA-AES256-GCM-SHA384'), ('ECDH-ECDSA-AES256-SHA384', 'ECDH-ECDSA-AES256-SHA384'), ('ECDH-RSA-AES128-GCM-SHA256', 'ECDH-RSA-AES128-GCM-SHA256'), ('ECDH-RSA-AES128-SHA256', 'ECDH-RSA-AES128-SHA256'), ('ECDH-RSA-AES256-GCM-SHA384', 'ECDH-RSA-AES256-GCM-SHA384'), ('ECDH-RSA-AES256-SHA384', 'ECDH-RSA-AES256-SHA384'), ('ECDHE-ECDSA-AES128-GCM-SHA256', 'ECDHE-ECDSA-AES128-GCM-SHA256'), ('ECDHE-ECDSA-AES128-SHA256', 'ECDHE-ECDSA-AES128-SHA256'), ('ECDHE-ECDSA-AES256-GCM-SHA384', 'ECDHE-ECDSA-AES256-GCM-SHA384'), ('ECDHE-ECDSA-AES256-SHA384', 'ECDHE-ECDSA-AES256-SHA384'), ('ECDHE-RSA-AES128-CBC-SHA', 'ECDHE-RSA-AES128-CBC-SHA'), ('ECDHE-RSA-AES128-GCM-SHA256', 'ECDHE-RSA-AES128-GCM-SHA256'), ('ECDHE-RSA-AES128-SHA256', 'ECDHE-RSA-AES128-SHA256'), ('ECDHE-RSA-AES256-CBC-SHA', 'ECDHE-RSA-AES256-CBC-SHA'), ('ECDHE-RSA-AES256-GCM-SHA384', 'ECDHE-RSA-AES256-GCM-SHA384'), ('ECDHE-RSA-AES256-SHA384', 'ECDHE-RSA-AES256-SHA384'), ('ECDHE-RSA-DES-CBC3-SHA', 'ECDHE-RSA-DES-CBC3-SHA'), ('Unknown', 'Unknown')], blank=True, null=True)
    browser = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    platform = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    application = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    client_version = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_type = models.CharField(max_length=64, verbose_name='API Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version = models.CharField(max_length=32, verbose_name='API Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_iso = models.CharField(max_length=3, verbose_name='Country Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginHistory'
        verbose_name = 'Login History'
        verbose_name_plural = 'Login History'
        # keyPrefix = '0Ya'



class LoginIp(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_authenticated = models.BooleanField(verbose_name='IsAuthenticated', sf_read_only=models.READ_ONLY, default=False)
    challenge_sent_date = models.DateTimeField(verbose_name='Challenge SentDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    challenge_method = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Email', None), ('SMS', None), ('TOTP_CHOICE', None), ('TOTP_ONLY', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginIp'
        verbose_name = 'Login IP'
        verbose_name_plural = 'Login IP'
        # keyPrefix = '710'



class LookedUpFromActivity(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='lookedupfromactivity_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='lookedupfromactivity_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, CustomerBankAccount__c, DegreeCourse__c, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Mandate__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, Solution, SystemSettings__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c]
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Anruf'), ('Send Letter', 'Brief senden'), ('Send Quote', 'Angebot senden'), ('Other', 'Andere')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='lookedupfromactivity_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Not Started', choices=[('Not Started', 'Nicht begonnen'), ('In Progress', 'Läuft'), ('Completed', 'Abgeschlossen'), ('Waiting on someone else', 'Wartet auf andere Person'), ('Deferred', 'Verschoben')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'Hoch'), ('Normal', 'Normal'), ('Low', 'Niedrig')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lookedupfromactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lookedupfromactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LookedUpFromActivity'
        verbose_name = 'Lookups from Activity'
        verbose_name_plural = 'Lookups from Activities'
        # keyPrefix = 'None'



class Macro(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Macro Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macro_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macro_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Macro'
        verbose_name = 'Macro'
        verbose_name_plural = 'Macros'
        # keyPrefix = '0JZ'



class MacroHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('Name', 'Macro Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MacroHistory'
        verbose_name = 'Macro History'
        verbose_name_plural = 'Macro History'
        # keyPrefix = 'None'



class MacroInstruction(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Macro Instruction Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macroinstruction_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macroinstruction_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    operation = models.CharField(max_length=255, choices=[('Select', 'select'), ('Set', 'set'), ('Insert', 'insert'), ('Submit', 'submit'), ('Close', 'close')])
    target = models.CharField(max_length=255, choices=[('Tab.Account', 'Active Account Tab'), ('Tab.Case', 'Active Case Tab'), ('Tab.Contact', 'Active Contact Tab'), ('Tab.Lead', 'Active Lead Tab'), ('Tab.Opportunity', 'Active Opportunity Tab')], blank=True, null=True)
    value = models.CharField(max_length=1000, blank=True, null=True)
    value_record = models.CharField(max_length=15, verbose_name='Value Record ID', blank=True, null=True)
    sort_order = models.IntegerField()
    class Meta(models.Model.Meta):
        db_table = 'MacroInstruction'
        verbose_name = 'Macro Instruction'
        verbose_name_plural = 'Macro Instructions'
        # keyPrefix = '0Ji'



class MacroShare(models.Model):
    parent = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'MacroShare'
        verbose_name = 'Macro Share'
        verbose_name_plural = 'Macro Share'
        # keyPrefix = 'None'



class MailmergeTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80)
    description = models.CharField(max_length=255, blank=True, null=True)
    filename = models.CharField(max_length=255, verbose_name='File', sf_read_only=models.NOT_UPDATEABLE)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.NOT_UPDATEABLE)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mailmergetemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mailmergetemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    security_options_attachment_scanned_for_xss = models.BooleanField(db_column='SecurityOptionsAttachmentScannedForXSS', verbose_name='Attachment has been scanned for XSS')
    security_options_attachment_has_xssthreat = models.BooleanField(db_column='SecurityOptionsAttachmentHasXSSThreat', verbose_name='XSS threat was detected in the attachment')
    security_options_attachment_scannedfor_flash = models.BooleanField(verbose_name='Attachment has been scanned for Flash Injection')
    security_options_attachment_has_flash = models.BooleanField(verbose_name='Flash Injection was detected in the attachment')
    class Meta(models.Model.Meta):
        db_table = 'MailmergeTemplate'
        verbose_name = 'Mail Merge Template'
        verbose_name_plural = 'Mail Merge Template'
        # keyPrefix = '01H'



class MandateHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Mandate', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('BankAccountRef__c', 'Bank Account'), ('created', 'Created.'), ('CustomerRef__c', 'Customer'), ('feedEvent', 'Feed event'), ('MandateId__c', 'Mandate GoCardless Id'), ('MandatePdf__c', 'Mandate Pdf Url'), ('Name', 'Name'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Reference__c', 'Reference'), ('Status__c', 'Status')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Mandate__History'
        verbose_name = 'History: Mandate'
        verbose_name_plural = 'History: Mandate'
        # keyPrefix = 'None'



class Mandate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mandate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mandate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    customer_ref = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, blank=True, null=True)
    mandate_id = models.CharField(custom=True, max_length=255, verbose_name='Mandate GoCardless Id', blank=True, null=True)
    bank_account_ref = models.ForeignKey(CustomerBankAccount, models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    reference = models.CharField(custom=True, max_length=255, blank=True, null=True)
    status = models.CharField(custom=True, max_length=255, choices=[('pending_customer_approval', 'pending_customer_approval'), ('pending_submission', 'pending_submission'), ('submitted', 'submitted'), ('active', 'active'), ('failed', 'failed'), ('cancelled', 'cancelled'), ('expired', 'expired')], blank=True, null=True)
    mandate_pdf = models.TextField(custom=True, verbose_name='Mandate Pdf Url', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Mandate__c'
        verbose_name = 'Mandate'
        verbose_name_plural = 'Mandates'
        # keyPrefix = 'a0C'



class MatchingRule(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Contact', None), ('Lead', None)])
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Rule Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingrule_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingrule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    match_engine = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('ExactMatchEngine', 'Exact Match Engine'), ('FuzzyMatchEngine', 'Fuzzy Match Engine')], blank=True, null=True)
    boolean_filter = models.CharField(max_length=255, verbose_name='Advanced Logic', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    rule_status = models.CharField(max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, default='Inactive', choices=[('Inactive', 'Inactive'), ('DeactivationFailed', 'Deactivation Failed'), ('Activating', 'Activating'), ('Deactivating', 'Deactivating'), ('Active', 'Active'), ('ActivationFailed', 'Activation Failed')])
    sobject_subtype = models.CharField(max_length=255, verbose_name='Object Subtype', sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MatchingRule'
        verbose_name = 'Matching Rule'
        verbose_name_plural = 'Matching Rules'
        # keyPrefix = '0JD'



class MatchingRuleItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingruleitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingruleitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    matching_rule = models.ForeignKey(MatchingRule, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AccountHolderName', None), ('AccountNumber', None), ('Accountnumber', None), ('AccountNumber', None), ('AccountSource', None), ('Action', None), ('Address', None), ('AggregateOperation', None), ('AggregateResultField', None), ('Amount', None), ('Amount', None), ('ApplicableMonths', None), ('AssistantName', None), ('AssistantPhone', None), ('BankName', None), ('BankName', None), ('BIC', None), ('BICHSAuto', None), ('BillingAddress', None), ('BillingCity', None), ('BillingCountry', None), ('BillingPostalCode', None), ('BillingState', None), ('BillingStreet', None), ('CalculateJobId', None), ('CalculationMode', None), ('CalculationSharingMode', None), ('Cause', None), ('ChargeDate', None), ('ChildObject', None), ('City', None), ('Color', None), ('Company', None), ('ConcatenateDelimiter', None), ('Contact', None), ('ContactRef', None), ('Country', None), ('CountryCode', None), ('CreatedAt', None), ('CSPasswordToken', None), ('CSPasswordToken', None), ('CurrencyIsoCode', None), ('CustomerBankAccountGoCardlessId', None), ('CustomerRef', None), ('CustomerRef', None), ('Department', None), ('Description', None), ('Description2', None), ('Descriptions', None), ('Descriptions2', None), ('DiscountType', None), ('Email', None), ('Email', None), ('EmailBouncedReason', None), ('EncryptedId', None), ('EncryptedIds', None), ('Fax', None), ('Fax', None), ('Fax', None), ('FieldToAggregate', None), ('FieldToOrderBy', None), ('FirstName', None), ('FirstName', None), ('Geburtsland', None), ('Geburtsort', None), ('Geschlecht', None), ('GoCardlessCountryCode', None), ('GoCardlessEmail', None), ('GoCardlessFirstName', None), ('GoCardlessId', None), ('GoCardlessLanguage', None), ('GoCardlessLastName', None), ('GoCardlessPhone', None), ('HochschuleRef', None), ('HomePhone', None), ('IBAN', None), ('IBANHSAuto', None), ('Immatrikulationsnummer', None), ('Industry', None), ('Industry', None), ('Invoice', None), ('InvoiceRef', None), ('Jigsaw', None), ('Jigsaw', None), ('Jigsaw', None), ('Kommunikationssprache', None), ('Kontoinhaber', None), ('KontoinhaberHSAuto', None), ('Language', None), ('LastName', None), ('LastName', None), ('LeadSource', None), ('LeadSource', None), ('LookupParent', None), ('LookupParent', None), ('LookupParent2', None), ('LookupRollupSummary', None), ('LookupRollupSummary2', None), ('LookupRollupSummaryId', None), ('MailingAddress', None), ('MailingCity', None), ('MailingCountry', None), ('MailingPostalCode', None), ('MailingState', None), ('MailingStreet', None), ('MandateId', None), ('MandateReferenceNumber', None), ('MobilePhone', None), ('MobilePhone', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('NumberOfEmployees', None), ('NumberOfEmployees', None), ('NumberOfFailsTrig', None), ('NumberOfSofortzahlerTrig', None), ('Origin', None), ('OtherAddress', None), ('OtherCity', None), ('OtherCountry', None), ('OtherPhone', None), ('OtherPostalCode', None), ('OtherState', None), ('OtherStreet', None), ('Ownership', None), ('Parent', None), ('ParentId', None), ('ParentId', None), ('ParentObject', None), ('ParentObject', None), ('PaymentContact', None), ('PaymentId', None), ('PaymentOptions', None), ('Period', None), ('Phone', None), ('Phone', None), ('Phone', None), ('Position', None), ('PostalCode', None), ('QualifiedParentID', None), ('Rating', None), ('Rating', None), ('Raumnummer', None), ('Reference', None), ('Reference', None), ('ReferenceTrig', None), ('RelationshipCriteria', None), ('RelationshipCriteriaFields', None), ('RelationshipField', None), ('ReportsTo', None), ('RowLimit', None), ('Salutation', None), ('Salutation', None), ('ShippingAddress', None), ('ShippingCity', None), ('ShippingCountry', None), ('ShippingPostalCode', None), ('ShippingState', None), ('ShippingStreet', None), ('Sic', None), ('SicDesc', None), ('Site', None), ('Staatsangehoerigkeit', None), ('StandardPeriodOfStudy', None), ('StartOfStudiesMonth', None), ('StartSummerSemester', None), ('StartWinterSemester', None), ('State', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Street', None), ('StudentContact', None), ('TextName', None), ('TickerSymbol', None), ('Title', None), ('Title', None), ('Total', None), ('Total2', None), ('Traegergesellschaft', None), ('Type', None), ('Type', None), ('Unimailadresse', None), ('UniqueName', None), ('University', None), ('Utilization', None), ('Website', None), ('Website', None), ('ZahlungskontaktRef', None)], blank=True, null=True)
    matching_method = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Exact', 'Exact'), ('FirstName', 'Fuzzy: First Name'), ('LastName', 'Fuzzy: Last Name'), ('CompanyName', 'Fuzzy: Company Name'), ('Phone', 'Fuzzy: Phone'), ('City', 'Fuzzy: City'), ('Street', 'Fuzzy: Street'), ('Zip', 'Fuzzy: ZIP'), ('Title', 'Fuzzy: Title')], blank=True, null=True)
    blank_value_behavior = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='MatchBlanks', choices=[('MatchBlanks', 'Match When Both Blank'), ('NullNotAllowed', 'Does Not Match If Null')])
    class Meta(models.Model.Meta):
        db_table = 'MatchingRuleItem'
        verbose_name = 'Matching Rule Item'
        verbose_name_plural = 'Matching Rule Items'
        # keyPrefix = '0JE'



class Name(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AccountContactRole', None), ('Announcement', None), ('Asset', None), ('BackgroundOperation', None), ('Campaign', None), ('Case', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Contact', None), ('ContentDistribution', None), ('ContentDocument', None), ('ContentFolder', None), ('ContentVersion', None), ('Contract', None), ('CustomerBankAccount__c', None), ('Dashboard', None), ('DashboardComponent', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentValueMetric', None), ('DegreeCourse__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Event', None), ('FileSearchActivity', None), ('FlowInterview', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('Idea', None), ('IdeaComment', None), ('InstalledMobileApp', None), ('Invoice__c', None), ('InvoiceLineItem__c', None), ('Lead', None), ('Macro', None), ('MacroInstruction', None), ('Mandate__c', None), ('Opportunity', None), ('Order', None), ('OrderItem', None), ('Payment__c', None), ('Pricebook2', None), ('ProcessInstanceNode', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('Queue', None), ('Rabatt__c', None), ('Report', None), ('SearchActivity', None), ('SelfServiceUser', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('Task', None), ('TodayGoal', None), ('Topic', None), ('User', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserProvAccount', None), ('UserProvAccountStaging', None), ('UserProvisioningLog', None), ('UserProvisioningRequest', None), ('UserProvMockTarget', None), ('WorkAccess', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)], blank=True, null=True)
    alias = models.CharField(max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, related_name='name_userrole_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, related_name='name_recordtype_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    profile = models.ForeignKey('Profile', models.DO_NOTHING, related_name='name_profile_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name_or_alias = models.CharField(max_length=80, verbose_name='Name or Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    username = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Name'
        verbose_name = 'Name'
        verbose_name_plural = 'Names'
        # keyPrefix = 'None'



class NamedCredential(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='namedcredential_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='namedcredential_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    endpoint = models.TextField(verbose_name='URL', sf_read_only=models.READ_ONLY, help_text='The URL for connecting to the external system.', blank=True, null=True)
    principal_type = models.CharField(max_length=255, verbose_name='Identity Type', sf_read_only=models.READ_ONLY, help_text='Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', choices=[('Anonymous', 'Anonymous'), ('PerUser', 'Per User'), ('NamedUser', 'Named Principal')])
    callout_options_generate_authorization_header = models.BooleanField(verbose_name='GenerateAuthorizationHeader', sf_read_only=models.READ_ONLY)
    callout_options_allow_merge_fields_in_header = models.BooleanField(verbose_name='AllowMergeFieldsInHeader', sf_read_only=models.READ_ONLY)
    callout_options_allow_merge_fields_in_body = models.BooleanField(verbose_name='AllowMergeFieldsInBody', sf_read_only=models.READ_ONLY)
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'NamedCredential'
        verbose_name = 'Named Credential'
        verbose_name_plural = 'Named Credentials'
        # keyPrefix = '0XA'



class Note(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Contact, Contract, CustomerBankAccount__c, DegreeCourse__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, SocialPost, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    title = models.CharField(max_length=80)
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    body = models.TextField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='note_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='note_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='note_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Note'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = '002'



class NoteAndAttachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_note = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Contact, Contract, CustomerBankAccount__c, DegreeCourse__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, SocialPost, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_private = models.BooleanField(verbose_name='Private', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_owner_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'NoteAndAttachment'
        verbose_name = 'Note and Attachment'
        verbose_name_plural = 'Notes and Attachments'
        # keyPrefix = 'None'



class OauthToken(models.Model):
    access_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    request_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_name = models.CharField(max_length=255, verbose_name='Application Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    use_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    delete_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_menu_item = models.ForeignKey(AppMenuItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OauthToken'
        verbose_name = 'Oauth Token'
        verbose_name_plural = 'Oauth Tokens'
        # keyPrefix = '0CQ'



class ObjectPermissions(models.Model):
    parent = models.ForeignKey('PermissionSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('ActiveScratchOrg', None), ('AddOnDefinition', None), ('Address', None), ('AggregationRow', None), ('Asset', None), ('B2bmaForm', None), ('Campaign', None), ('Case', None), ('Certification', None), ('CertificationDef', None), ('CertificationSectionDef', None), ('CertificationStep', None), ('CertificationStepDef', None), ('CloudServiceProvider', None), ('CloudServiceProviderApi', None), ('Contact', None), ('Contract', None), ('ContractLineItem', None), ('CustomerBankAccount__c', None), ('DandBCompany', None), ('DataSharingCustomerLocal', None), ('DegreeCourse__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('DuplicateRecordSet', None), ('EditionDefinition', None), ('Employee', None), ('EngagementProgram', None), ('EngagementProgramNode', None), ('EngagementProgramVersion', None), ('Entitlement', None), ('EntitlementContact', None), ('EnvironmentHubInvitation', None), ('EnvironmentHubMember', None), ('FtestAccountChild', None), ('FtestChild', None), ('FtestError', None), ('FtestErrorChild', None), ('FtestGrandChild', None), ('FtestHiddenName', None), ('FtestMain', None), ('FtestPerson', None), ('FtestVirtualMain', None), ('Goal', None), ('GoalLink', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('Idea', None), ('IdeaTheme', None), ('IncludedLicenseDefinition', None), ('Invoice__c', None), ('InvoiceLineItem__c', None), ('Lead', None), ('LicensingError', None), ('LicensingRequest', None), ('LiveAgentSession', None), ('LiveChatTranscript', None), ('LiveChatVisitor', None), ('Location', None), ('Macro', None), ('MaintenancePlan', None), ('ManagementAddOnLicense', None), ('ManagementEditionLicense', None), ('ManagementPlatformLicense', None), ('ManagementUserLicense', None), ('Mandate__c', None), ('MDFBudget', None), ('MDFFundAllocation', None), ('MDFFundClaim', None), ('MDFFundRequest', None), ('Metric', None), ('MetricDataLink', None), ('MyCustomObject', None), ('NamespaceRegistry', None), ('OperatingHours', None), ('Opportunity', None), ('Order', None), ('Payment__c', None), ('PersonKey', None), ('PersonList', None), ('PlatformLicenseDefinition', None), ('Pricebook2', None), ('Product2', None), ('ProductItem', None), ('ProductRequest', None), ('ProductTransfer', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('PushTopic', None), ('Question', None), ('QuickText', None), ('Quote', None), ('Rabatt__c', None), ('RegisteredMobileDevice', None), ('ScratchOrgInfo', None), ('ServiceAppointment', None), ('ServiceContract', None), ('ServiceResource', None), ('ServiceTerritory', None), ('Shipment', None), ('SignupRequest', None), ('SocialPost', None), ('Solution', None), ('SOSSession', None), ('StreamingChannel', None), ('Survey', None), ('SurveyInvitation', None), ('SurveyResponse', None), ('Tenant', None), ('TenantParameterMap', None), ('TimeSheet', None), ('UsageEntitlement', None), ('UserLicenseDefinition', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkGoal', None), ('WorkGoalCollaborator', None), ('WorkGoalLink', None), ('WorkOrder', None), ('WorkPerformanceCycle', None), ('WorkReward', None), ('WorkRewardFund', None), ('WorkRewardFundType', None), ('WorkType', None), ('WorkUpgradeAction', None), ('WorkUpgradeCustomer', None), ('WorkUpgradeUser', None)])
    permissions_create = models.BooleanField(verbose_name='Create Records')
    permissions_read = models.BooleanField(verbose_name='Read Records')
    permissions_edit = models.BooleanField(verbose_name='Edit Records')
    permissions_delete = models.BooleanField(verbose_name='Delete Records')
    permissions_view_all_records = models.BooleanField(verbose_name='Read All Records')
    permissions_modify_all_records = models.BooleanField(verbose_name='Edit All Records')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='objectpermissions_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='objectpermissions_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ObjectPermissions'
        verbose_name = 'Object Permissions'
        verbose_name_plural = 'Object Permissions'
        # keyPrefix = '110'



class OpenActivity(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='openactivity_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='openactivity_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, DegreeCourse__c, GoCardlessError__c, InvoiceLineItem__c, Invoice__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, Solution] Master Detail Relationship *
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Anruf'), ('Send Letter', 'Brief senden'), ('Send Quote', 'Angebot senden'), ('Other', 'Andere')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='openactivity_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Not Started', choices=[('Not Started', 'Nicht begonnen'), ('In Progress', 'Läuft'), ('Completed', 'Abgeschlossen'), ('Waiting on someone else', 'Wartet auf andere Person'), ('Deferred', 'Verschoben')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'Hoch'), ('Normal', 'Normal'), ('Low', 'Niedrig')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='openactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='openactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    alternate_detail = models.ForeignKey(EmailMessage, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpenActivity'
        verbose_name = 'Open Activity'
        verbose_name_plural = 'Open Activities'
        # keyPrefix = 'None'



class Opportunity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    name = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    stage_name = models.CharField(max_length=40, verbose_name='Stage', choices=[('Interessiert', 'Interessiert'), ('Qualifikation', 'Qualifikation'), ('Analyse erforderlich', 'Analyse erforderlich'), ('Nachhaltiges Angebot', 'Nachhaltiges Angebot'), ('Id. Entscheidungsträger', 'Id. Entscheidungsträger'), ('Wahrnehmungsanalyse', 'Wahrnehmungsanalyse'), ('Angebot/Preisangebot', 'Angebot/Preisangebot'), ('Verhandlung/Überprüfung', 'Verhandlung/Überprüfung'), ('Geschlossene und gewonnene', 'Geschlossene und gewonnene'), ('Geschlossen und verloren', 'Geschlossen und verloren')])
    amount = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    probability = models.DecimalField(max_digits=3, decimal_places=0, verbose_name='Probability (%)', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    close_date = models.DateField()
    type = models.CharField(max_length=40, verbose_name='Opportunity Type', choices=[('Existing Business', 'Bestehendes Geschäft'), ('New Business', 'Neues Geschäft')], blank=True, null=True)
    next_step = models.CharField(max_length=255, blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Advertisement', 'Werbung'), ('Employee Referral', 'Mitarbeiterempfehlung'), ('External Referral', 'Externe Empfehlung'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Intern'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Messe'), ('Web', 'Web'), ('Word of mouth', 'Mundpropaganda'), ('Other', 'Andere')], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(max_length=40, verbose_name='Forecast Category', choices=[('Omitted', 'Ausgelassen'), ('Pipeline', 'Pipeline'), ('Best Case', 'Maximalwert'), ('Commit', 'Verpflichtung'), ('Closed', 'Geschlossen')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, blank=True, null=True)
    has_opportunity_line_item = models.BooleanField(verbose_name='Has Line Item', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal_quarter = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal_year = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal = models.CharField(max_length=6, verbose_name='Fiscal Period', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_open_activity = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_overdue_task = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Opportunity'
        verbose_name = 'Opportunity'
        verbose_name_plural = 'Opportunities'
        # keyPrefix = '006'



class OpportunityCompetitor(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    competitor_name = models.CharField(max_length=40, blank=True, null=True)
    strengths = models.CharField(max_length=1000, blank=True, null=True)
    weaknesses = models.CharField(max_length=1000, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycompetitor_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycompetitor_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityCompetitor'
        verbose_name = 'Opportunity: Competitor'
        verbose_name_plural = 'Opportunity: Competitor'
        # keyPrefix = '00J'



class OpportunityContactRole(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Geschäftsbenutzer'), ('Decision Maker', 'Entscheidungsträger'), ('Economic Buyer', 'Einkäufer in der Wirtschaft'), ('Economic Decision Maker', 'Entscheidungsträger in der Wirtschaft'), ('Evaluator', 'Gutachter'), ('Executive Sponsor', 'Leitender Auftraggeber'), ('Influencer', 'Beeinflusser'), ('Technical Buyer', 'Technischer Einkäufer'), ('Other', 'Andere')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityContactRole'
        verbose_name = 'Opportunity Contact Role'
        verbose_name_plural = 'Opportunity Contact Role'
        # keyPrefix = '00K'



class OpportunityFeed(models.Model):
    parent = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunityfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunityfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFeed'
        verbose_name = 'Opportunity Feed'
        verbose_name_plural = 'Opportunity Feed'
        # keyPrefix = 'None'



class OpportunityFieldHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('Amount', 'Amount'), ('CloseDate', 'Close Date'), ('Contract', 'Contract'), ('created', 'Created.'), ('opportunityCreatedFromLead', 'Created by lead convert'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('ForecastCategoryName', 'Forecast Category'), ('LeadSource', 'Lead Source'), ('NextStep', 'Next Step'), ('Name', 'Opportunity Name'), ('Owner', 'Opportunity Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Campaign', 'Primary Campaign Source'), ('IsPrivate', 'Private'), ('Probability', 'Probability (%)'), ('TotalOpportunityQuantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('StageName', 'Stage'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFieldHistory'
        verbose_name = 'Opportunity Field History'
        verbose_name_plural = 'Opportunity Field History'
        # keyPrefix = 'None'



class OpportunityHistory(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    stage_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Interessiert', 'Interessiert'), ('Qualifikation', 'Qualifikation'), ('Analyse erforderlich', 'Analyse erforderlich'), ('Nachhaltiges Angebot', 'Nachhaltiges Angebot'), ('Id. Entscheidungsträger', 'Id. Entscheidungsträger'), ('Wahrnehmungsanalyse', 'Wahrnehmungsanalyse'), ('Angebot/Preisangebot', 'Angebot/Preisangebot'), ('Verhandlung/Überprüfung', 'Verhandlung/Überprüfung'), ('Geschlossene und gewonnene', 'Geschlossene und gewonnene'), ('Geschlossen und verloren', 'Geschlossen und verloren')])
    amount = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_revenue = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    close_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    probability = models.DecimalField(max_digits=3, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_category = models.CharField(max_length=40, verbose_name='To ForecastCategory', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityHistory'
        verbose_name = 'Opportunity History'
        verbose_name_plural = 'Opportunity History'
        # keyPrefix = '008'



class OpportunityLineItem(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    product_code = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=376, verbose_name='Opportunity Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Sales Price', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_date = models.DateField(verbose_name='Date', blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Description', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitylineitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitylineitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityLineItem'
        verbose_name = 'Opportunity Product'
        verbose_name_plural = 'Opportunity Product'
        # keyPrefix = '00k'



class OpportunityPartner(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Advertiser', 'Werber'), ('Agency', 'Agentur'), ('Broker', 'Makler'), ('Consultant', 'Berater'), ('Dealer', 'Händler'), ('Developer', 'Developer'), ('Distributor', 'Vertriebshändler'), ('Institution', 'Institution'), ('Lender', 'Darlehensgeber'), ('System Integrator', 'Systemintegrator'), ('VAR/Reseller', 'VAR/Wiederverkäufer')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitypartner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitypartner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityPartner'
        verbose_name = 'Opportunity Partner'
        verbose_name_plural = 'Opportunity Partner'
        # keyPrefix = 'None'



class OpportunityShare(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    opportunity_access_level = models.CharField(max_length=40, verbose_name='Opportunity Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityShare'
        verbose_name = 'Opportunity Share'
        verbose_name_plural = 'Opportunity Share'
        # keyPrefix = '00t'



class OpportunityStage(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Ausgelassen'), ('Pipeline', 'Pipeline'), ('Best Case', 'Maximalwert'), ('Commit', 'Verpflichtung'), ('Closed', 'Geschlossen')])
    default_probability = models.DecimalField(max_digits=3, decimal_places=0, verbose_name='Probability (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitystage_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitystage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityStage'
        verbose_name = 'Opportunity Stage'
        verbose_name_plural = 'Opportunity Stage'
        # keyPrefix = '01J'



class Order(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    contract = models.ForeignKey(Contract, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, blank=True, null=True)
    original_order = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    effective_date = models.DateField(verbose_name='Order Start Date')
    end_date = models.DateField(verbose_name='Order End Date', blank=True, null=True)
    is_reduction_order = models.BooleanField(verbose_name='Reduction Order', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(max_length=40, choices=[('Draft', 'Entwurf'), ('Activated', 'Aktiviert')])
    description = models.TextField(verbose_name='Internal Comments', blank=True, null=True)
    customer_authorized_by = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    company_authorized_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_companyauthorizedby_set', blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Order Type', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    activated_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_activatedby_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_code = models.CharField(max_length=40, verbose_name='Status Category', sf_read_only=models.NOT_CREATEABLE, choices=[('D', 'Draft'), ('A', 'Activated'), ('C', 'Cancelled'), ('E', 'Expired')])
    order_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    total_amount = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Order Amount', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Order'
        verbose_name = 'Order'
        verbose_name_plural = 'Orders'
        # keyPrefix = '801'



class OrderFeed(models.Model):
    parent = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderFeed'
        verbose_name = 'Order Feed'
        verbose_name_plural = 'Order Feed'
        # keyPrefix = 'None'



class OrderHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActivatedBy', 'Activated By'), ('ActivatedDate', 'Activated Date'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('BillToContact', 'Bill To Contact'), ('CompanyAuthorizedBy', 'Company Authorized By'), ('CompanyAuthorizedDate', 'Company Authorized Date'), ('Contract', 'Contract Number'), ('created', 'Created.'), ('CustomerAuthorizedBy', 'Customer Authorized By'), ('CustomerAuthorizedDate', 'Customer Authorized Date'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('Opportunity', 'Opportunity'), ('orderActivated', 'Order Activated.'), ('orderApproved', 'Order Approved.'), ('orderCancelled', 'Order Canceled.'), ('orderDeactivated', 'Order Deactivated.'), ('EndDate', 'Order End Date'), ('orderExpired', 'Order Expired.'), ('Name', 'Order Name'), ('Owner', 'Order Owner'), ('OrderReferenceNumber', 'Order Reference Number'), ('EffectiveDate', 'Order Start Date'), ('orderSubmitted', 'Order Submitted.'), ('Type', 'Order Type'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('PoDate', 'PO Date'), ('PoNumber', 'PO Number'), ('Pricebook2', 'Price Book'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('ShipToContact', 'Ship To Contact'), ('Status', 'Status'), ('StatusCode', 'Status Category')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderHistory'
        verbose_name = 'Order History'
        verbose_name_plural = 'Order History'
        # keyPrefix = 'None'



class OrderItem(models.Model):
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    original_order_item = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    available_quantity = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=18, decimal_places=2)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_date = models.DateField(verbose_name='Start Date', blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Description', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    order_item_number = models.CharField(max_length=30, verbose_name='Order Product Number', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OrderItem'
        verbose_name = 'Order Product'
        verbose_name_plural = 'Order Products'
        # keyPrefix = '802'



class OrderItemFeed(models.Model):
    parent = models.ForeignKey(OrderItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitemfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitemfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemFeed'
        verbose_name = 'Order Product Feed'
        verbose_name_plural = 'Order Product Feed'
        # keyPrefix = 'None'



class OrderItemHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order_item = models.ForeignKey(OrderItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('Description', 'Line Description'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ServiceDate', 'Start Date'), ('UnitPrice', 'Unit Price')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemHistory'
        verbose_name = 'Order Product History'
        verbose_name_plural = 'Order Product History'
        # keyPrefix = 'None'



class OrderShare(models.Model):
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    order_access_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, verbose_name='Apex Sharing Reason ID', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OrderShare'
        verbose_name = 'Order Share'
        verbose_name_plural = 'Order Share'
        # keyPrefix = '0Fy'



class OrgWideEmailAddress(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orgwideemailaddress_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orgwideemailaddress_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    address = models.EmailField(verbose_name='Email Address')
    display_name = models.CharField(max_length=300)
    is_allow_all_profiles = models.BooleanField(verbose_name='Allow All Profiles', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'OrgWideEmailAddress'
        verbose_name = 'Organization-wide From Email Address'
        verbose_name_plural = 'Organization-wide From Email Addresses'
        # keyPrefix = '0D2'



class Organization(models.Model):
    name = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE)
    division = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    street = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    primary_contact = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    default_locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', sf_read_only=models.NOT_CREATEABLE, choices=[('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bn_BD', 'Bengali (Bangladesh)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czech Republic)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_SZ', 'English (Swaziland)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('mt_MT', 'Maltese (Malta)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Bosnia & Herzegovina)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_CS', 'Serbian (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('yo_BJ', 'Yoruba (Benin)')])
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', sf_read_only=models.NOT_CREATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', sf_read_only=models.NOT_CREATEABLE, default=False)
    receives_admin_info_emails = models.BooleanField(verbose_name='Info Emails Admin', sf_read_only=models.NOT_CREATEABLE, default=False)
    preferences_require_opportunity_products = models.BooleanField(verbose_name='RequireOpportunityProducts', sf_read_only=models.NOT_CREATEABLE)
    fiscal_year_start_month = models.IntegerField(verbose_name='Fiscal Year Starts In', sf_read_only=models.READ_ONLY, blank=True, null=True)
    uses_start_date_as_fiscal_year_name = models.BooleanField(verbose_name='Fiscal Year Name by Start', sf_read_only=models.READ_ONLY, default=False)
    default_account_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    default_contact_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByParent', 'Controlled By Parent')], blank=True, null=True)
    default_opportunity_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    default_lead_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_case_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_calendar_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='HideDetailsInsert', choices=[('HideDetails', 'Hide Details'), ('HideDetailsInsert', 'Hide Details and Add Events'), ('ShowDetails', 'Show Details'), ('ShowDetailsInsert', 'Show Details and Add Events'), ('AllowEdits', 'Full Access')], blank=True, null=True)
    default_pricebook_access = models.CharField(max_length=40, verbose_name='Default Price Book Access', sf_read_only=models.READ_ONLY, choices=[('None', 'No Access'), ('Read', 'View Only'), ('ReadSelect', 'Use')], blank=True, null=True)
    default_campaign_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    compliance_bcc_email = models.EmailField(verbose_name='Compliance BCC Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ui_skin = models.CharField(max_length=40, verbose_name='UI Skin', sf_read_only=models.NOT_CREATEABLE, default='Theme3', choices=[('Theme1', 'salesforce.com Classic'), ('Theme2', 'Salesforce'), ('PortalDefault', 'Portal Default'), ('Webstore', 'Webstore'), ('Theme3', 'Aloha')], blank=True, null=True)
    signup_country_iso_code = models.CharField(max_length=2, verbose_name='Signup Country', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trial_expiration_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    organization_type = models.CharField(max_length=40, verbose_name='Edition', sf_read_only=models.READ_ONLY, choices=[('Team Edition', None), ('Professional Edition', None), ('Enterprise Edition', None), ('Developer Edition', None), ('Personal Edition', None), ('Unlimited Edition', None), ('Contact Manager Edition', None), ('Base Edition', None)], blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    instance_name = models.CharField(max_length=5, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_sandbox = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    web_to_case_default_origin = models.CharField(max_length=40, verbose_name='Web to Cases Default Origin', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    monthly_page_views_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_page_views_entitlement = models.IntegerField(verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_read_only = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='organization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='organization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Organization'
        verbose_name = 'Organization'
        verbose_name_plural = 'Organizations'
        # keyPrefix = '00D'



class OutgoingEmail(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    validated_from_address = models.CharField(max_length=255, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, choices=[('florian@empaua.com', 'Ben Irle <florian@empaua.com>'), ('billing@chancen.services', 'Billing <billing@chancen.services>'), ('info@chancen.services', 'Info <info@chancen.services>'), ('support@chancen.services', 'Support <support@chancen.services>')], blank=True, null=True)
    to_address = models.CharField(max_length=4000, verbose_name='To', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    cc_address = models.CharField(max_length=4000, verbose_name='CC', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    bcc_address = models.CharField(max_length=4000, verbose_name='BCC', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    subject = models.CharField(max_length=3000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    text_body = models.TextField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    html_body = models.TextField(verbose_name='HTML Body', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    related_to = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Contract, DegreeCourse__c, GoCardlessError__c, InvoiceLineItem__c, Invoice__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, Solution]
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Contact, Lead]
    class Meta(models.Model.Meta):
        db_table = 'OutgoingEmail'
        verbose_name = 'Outgoing Email'
        verbose_name_plural = 'Outgoing Emails'
        # keyPrefix = '0Q1'



class OutgoingEmailRelation(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    outgoing_email_id = models.CharField(max_length=255, verbose_name='Outgoing Email ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    relation_address = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OutgoingEmailRelation'
        verbose_name = 'Outgoing Email Relation'
        verbose_name_plural = 'Outgoing Email Relations'
        # keyPrefix = '0Q3'



class OwnedContentDocument(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_owner_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('SimpleURL', None), ('Wrapper', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OwnedContentDocument'
        verbose_name = 'User Owned File'
        verbose_name_plural = 'User Owned File'
        # keyPrefix = 'None'



class OwnerChangeOptionInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_editable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    default_value = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OwnerChangeOptionInfo'
        verbose_name = 'Change Owner Option Info'
        verbose_name_plural = 'Change Owner Options Info'
        # keyPrefix = '0Cy'



class PackageLicense(models.Model):
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Trial', 'Trial'), ('Free', 'Free'), ('Active', 'Active')])
    is_provisioned = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    allowed_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    expiration_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PackageLicense'
        verbose_name = 'Package License'
        verbose_name_plural = 'Package License'
        # keyPrefix = '050'



class Partner(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account_from = models.ForeignKey(Account, models.DO_NOTHING, related_name='partner_accountfrom_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, related_name='partner_accountto_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Advertiser', 'Werber'), ('Agency', 'Agentur'), ('Broker', 'Makler'), ('Consultant', 'Berater'), ('Dealer', 'Händler'), ('Developer', 'Developer'), ('Distributor', 'Vertriebshändler'), ('Institution', 'Institution'), ('Lender', 'Darlehensgeber'), ('System Integrator', 'Systemintegrator'), ('VAR/Reseller', 'VAR/Wiederverkäufer')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Partner'
        verbose_name = 'Partner'
        verbose_name_plural = 'Partner'
        # keyPrefix = '00I'



class PartnerRole(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    reverse_role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Advertiser', 'Werber'), ('Agency', 'Agentur'), ('Broker', 'Makler'), ('Consultant', 'Berater'), ('Dealer', 'Händler'), ('Developer', 'Developer'), ('Distributor', 'Vertriebshändler'), ('Institution', 'Institution'), ('Lender', 'Darlehensgeber'), ('System Integrator', 'Systemintegrator'), ('VAR/Reseller', 'VAR/Wiederverkäufer')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partnerrole_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partnerrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PartnerRole'
        verbose_name = 'Partner Role Value'
        verbose_name_plural = 'Partner Role Value'
        # keyPrefix = 'None'



class PaymentHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Payment', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Amount__c', 'Amount'), ('ChargeDate__c', 'Charge Date'), ('created', 'Created.'), ('Description__c', 'Description'), ('feedEvent', 'Feed event'), ('LastFailedDateTrig__c', 'Last Failed Date'), ('MandateRef__c', 'Mandate'), ('NumberOfFailsTrig__c', 'Number of fails'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('PaymentContact__c', 'PaymentContact'), ('PaymentId__c', 'Payment GoCardless Id'), ('Name', 'Payment Name'), ('InvoiceRef__c', 'Rechnung'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Reference__c', 'Reference'), ('Status__c', 'Status')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Payment__History'
        verbose_name = 'History: Payment'
        verbose_name_plural = 'History: Payment'
        # keyPrefix = 'None'



class Payment(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Payment Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='payment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='payment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    payment_id = models.CharField(custom=True, max_length=255, verbose_name='Payment GoCardless Id', blank=True, null=True)
    invoice_ref = models.ForeignKey(Invoice, models.DO_NOTHING, custom=True, blank=True, null=True)
    mandate_ref = models.ForeignKey(Mandate, models.DO_NOTHING, custom=True, blank=True, null=True)
    description = models.TextField(custom=True, blank=True, null=True)
    status = models.CharField(custom=True, max_length=255, choices=[('pending_customer_approval', 'pending_customer_approval'), ('pending_submission', 'pending_submission'), ('submitted', 'submitted'), ('confirmed', 'confirmed'), ('paid_out', 'paid_out'), ('cancelled', 'cancelled'), ('customer_approval_denied', 'customer_approval_denied'), ('failed', 'failed'), ('charged_back', 'charged_back')], blank=True, null=True)
    amount = models.DecimalField(custom=True, max_digits=18, decimal_places=2, blank=True, null=True)
    reference = models.CharField(custom=True, max_length=255, blank=True, null=True)
    charge_date = models.CharField(custom=True, max_length=255, blank=True, null=True)
    number_of_fails_trig = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Number of fails', blank=True, null=True)
    retry_payment = models.BooleanField(custom=True, sf_read_only=models.READ_ONLY)
    last_failed_date_trig = models.DateField(custom=True, verbose_name='Last Failed Date', blank=True, null=True)
    etsalutation_auto = models.CharField(custom=True, db_column='ETSalutationAuto__c', max_length=1300, verbose_name='ET Salutation', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etcommunication_language = models.CharField(custom=True, db_column='ETCommunicationLanguage__c', max_length=1300, verbose_name='ET Communication Language', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etstudent_contact = models.BooleanField(custom=True, db_column='ETStudentContact__c', verbose_name='ET StudentContact', sf_read_only=models.READ_ONLY)
    etstudent_name = models.CharField(custom=True, db_column='ETStudentName__c', max_length=1300, verbose_name='ET Student Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    etemail = models.CharField(custom=True, db_column='ETEmail__c', max_length=1300, verbose_name='ETEmail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    payment_contact = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Payment__c'
        verbose_name = 'Payment'
        verbose_name_plural = 'Payments'
        # keyPrefix = 'a0E'



class Period(models.Model):
    fiscal_year_settings = models.ForeignKey(FiscalYearSettings, models.DO_NOTHING, related_name='period_fiscalyearsettings_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Month', None), ('Quarter', None), ('Week', None), ('Year', None)], blank=True, null=True)
    start_date = models.DateField(sf_read_only=models.READ_ONLY)
    end_date = models.DateField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_forecast_period = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    quarter_label = models.CharField(max_length=40, verbose_name='Quarter Name', sf_read_only=models.READ_ONLY, default='Spring', choices=[('Spring', 'Frühling'), ('Summer', 'Sommer'), ('Fall', 'Herbst'), ('Winter', 'Winter')], blank=True, null=True)
    period_label = models.CharField(max_length=40, verbose_name='Period Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fully_qualified_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Period'
        verbose_name = 'Period'
        verbose_name_plural = 'Period'
        # keyPrefix = '026'



class PermissionSet(models.Model):
    name = models.CharField(max_length=80, verbose_name='Permission Set Name')
    label = models.CharField(max_length=80, verbose_name='Permission Set Label')
    license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [PermissionSetLicense, UserLicense]
    profile = models.ForeignKey('Profile', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_owned_by_profile = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_custom = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    permissions_email_single = models.BooleanField(verbose_name='Send Email')
    permissions_email_mass = models.BooleanField(verbose_name='Mass Email')
    permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks')
    permissions_edit_event = models.BooleanField(verbose_name='Edit Events')
    permissions_export_report = models.BooleanField(verbose_name='Export Reports')
    permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts')
    permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export')
    permissions_manage_users = models.BooleanField(verbose_name='Manage Users')
    permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Templates')
    permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data')
    permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases')
    permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists')
    permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions')
    permissions_customize_application = models.BooleanField(verbose_name='Customize Application')
    permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields')
    permissions_run_reports = models.BooleanField(verbose_name='Run Reports')
    permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration')
    permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record')
    permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder')
    permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts')
    permissions_activate_order = models.BooleanField(verbose_name='Activate Orders')
    permissions_import_leads = models.BooleanField(verbose_name='Import Leads')
    permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads')
    permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads')
    permissions_view_all_data = models.BooleanField(verbose_name='View All Data')
    permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents')
    permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data')
    permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads')
    permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates')
    permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User')
    permissions_manage_translation = models.BooleanField(verbose_name='Manage Translation')
    permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts')
    permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter')
    permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests')
    permissions_api_user_only = models.BooleanField(verbose_name='Api Only User')
    permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps')
    permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder')
    permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories')
    permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads')
    permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires')
    permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards')
    permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders')
    permissions_install_packaging = models.BooleanField(verbose_name='Download AppExchange Packages')
    permissions_publish_packaging = models.BooleanField(verbose_name='Upload AppExchange Packages')
    permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups')
    permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price')
    permissions_create_packaging = models.BooleanField(verbose_name='Create AppExchange Packages')
    permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete')
    permissions_inbound_migration_tools_user = models.BooleanField(verbose_name='Deploy Change Sets')
    permissions_solution_import = models.BooleanField(verbose_name='Import Solutions')
    permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers')
    permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms')
    permissions_outbound_migration_tools_user = models.BooleanField(verbose_name='Create and Upload Change Sets')
    permissions_view_content = models.BooleanField(verbose_name='View Content in Portals')
    permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations')
    permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages')
    permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations')
    permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Deliver Uploaded Files and Personal Content')
    permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories')
    permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories')
    permissions_author_apex = models.BooleanField(verbose_name='Author Apex')
    permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations')
    permissions_api_enabled = models.BooleanField(verbose_name='API Enabled')
    permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types')
    permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments')
    permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases')
    permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content')
    permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries')
    permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions')
    permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties')
    permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files')
    permissions_schedule_job = models.BooleanField(verbose_name='Schedule Dashboards')
    permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync')
    permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots')
    permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports')
    permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays')
    permissions_custom_sidebar_on_all_pages = models.BooleanField(verbose_name='Show Custom Sidebar On All Pages')
    permissions_manage_interaction = models.BooleanField(verbose_name='Manage Force.com Flow')
    permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards")
    permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter')
    permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users')
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Force.com Flow User Feature License')
    permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds')
    permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates')
    permissions_email_administration = models.BooleanField(verbose_name='Email Administration')
    permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages')
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option')
    permissions_chatter_file_link = models.BooleanField(verbose_name='Create and Share Content Deliveries for Salesforce Files')
    permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins')
    permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files')
    permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers')
    permissions_run_flow = models.BooleanField(verbose_name='Run Flows')
    permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards')
    permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders')
    permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders')
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders')
    permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports')
    permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders')
    permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders')
    permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders')
    permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards')
    permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports')
    permissions_view_all_users = models.BooleanField(verbose_name='View All Users')
    permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub')
    permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views')
    permissions_sales_console = models.BooleanField(verbose_name='Sales Console')
    permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins')
    permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics')
    permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics')
    permissions_create_topics = models.BooleanField(verbose_name='Create Topics')
    permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics')
    permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features')
    permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect')
    permissions_create_work_badge_definition = models.BooleanField(verbose_name='Create custom Badge Definitions')
    permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps')
    permissions_view_help_link = models.BooleanField(verbose_name='View Help Link')
    permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets')
    permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets')
    permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles')
    permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses')
    permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing')
    permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users')
    permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies')
    permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies')
    permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions')
    permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups')
    permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API')
    permissions_chatter_for_share_point = models.BooleanField(verbose_name='Access Chatter For SharePoint')
    permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User')
    permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations')
    permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo")
    permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records')
    permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations')
    permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails')
    permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts')
    permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own')
    permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects')
    permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface')
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI')
    permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce')
    permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics')
    permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports')
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards')
    permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence')
    permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment')
    permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment')
    permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads')
    permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role')
    permissions_view_health_check = models.BooleanField(verbose_name='View Health Check')
    permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check')
    permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities')
    description = models.CharField(max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_activation_required = models.BooleanField(verbose_name='Session Activation Required', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSet'
        verbose_name = 'Permission Set'
        verbose_name_plural = 'Permission Sets'
        # keyPrefix = '0PS'



class PermissionSetAssignment(models.Model):
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    assignee = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetAssignment'
        verbose_name = 'Permission Set Assignment'
        verbose_name_plural = 'Permission Set Assignments'
        # keyPrefix = '0Pa'



class PermissionSetLicense(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Permission Set License Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    permission_set_license_key = models.CharField(max_length=81, sf_read_only=models.READ_ONLY)
    total_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    expiration_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    maximum_permissions_email_single = models.BooleanField(verbose_name='Send Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_mass = models.BooleanField(verbose_name='Mass Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_event = models.BooleanField(verbose_name='Edit Events', sf_read_only=models.READ_ONLY)
    maximum_permissions_export_report = models.BooleanField(verbose_name='Export Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts', sf_read_only=models.READ_ONLY)
    maximum_permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_users = models.BooleanField(verbose_name='Manage Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases', sf_read_only=models.READ_ONLY)
    maximum_permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions', sf_read_only=models.READ_ONLY)
    maximum_permissions_customize_application = models.BooleanField(verbose_name='Customize Application', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields', sf_read_only=models.READ_ONLY)
    maximum_permissions_run_reports = models.BooleanField(verbose_name='Run Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record', sf_read_only=models.READ_ONLY)
    maximum_permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts', sf_read_only=models.READ_ONLY)
    maximum_permissions_activate_order = models.BooleanField(verbose_name='Activate Orders', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_leads = models.BooleanField(verbose_name='Import Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_data = models.BooleanField(verbose_name='View All Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_translation = models.BooleanField(verbose_name='Manage Translation', sf_read_only=models.READ_ONLY)
    maximum_permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.READ_ONLY)
    maximum_permissions_api_user_only = models.BooleanField(verbose_name='Api Only User', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories', sf_read_only=models.READ_ONLY)
    maximum_permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders', sf_read_only=models.READ_ONLY)
    maximum_permissions_install_packaging = models.BooleanField(verbose_name='Download AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_publish_packaging = models.BooleanField(verbose_name='Upload AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_packaging = models.BooleanField(verbose_name='Create AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete', sf_read_only=models.READ_ONLY)
    maximum_permissions_inbound_migration_tools_user = models.BooleanField(verbose_name='Deploy Change Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_solution_import = models.BooleanField(verbose_name='Import Solutions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms', sf_read_only=models.READ_ONLY)
    maximum_permissions_outbound_migration_tools_user = models.BooleanField(verbose_name='Create and Upload Change Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_content = models.BooleanField(verbose_name='View Content in Portals', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations', sf_read_only=models.READ_ONLY)
    maximum_permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations', sf_read_only=models.READ_ONLY)
    maximum_permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Deliver Uploaded Files and Personal Content', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories', sf_read_only=models.READ_ONLY)
    maximum_permissions_author_apex = models.BooleanField(verbose_name='Author Apex', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations', sf_read_only=models.READ_ONLY)
    maximum_permissions_api_enabled = models.BooleanField(verbose_name='API Enabled', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases', sf_read_only=models.READ_ONLY)
    maximum_permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_schedule_job = models.BooleanField(verbose_name='Schedule Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots', sf_read_only=models.READ_ONLY)
    maximum_permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays', sf_read_only=models.READ_ONLY)
    maximum_permissions_custom_sidebar_on_all_pages = models.BooleanField(verbose_name='Show Custom Sidebar On All Pages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_interaction = models.BooleanField(verbose_name='Manage Force.com Flow', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards", sf_read_only=models.READ_ONLY)
    maximum_permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter', sf_read_only=models.READ_ONLY)
    maximum_permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_flow_uflrequired = models.BooleanField(db_column='MaximumPermissionsFlowUFLRequired', verbose_name='Require Force.com Flow User Feature License', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_administration = models.BooleanField(verbose_name='Email Administration', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_email_ic = models.BooleanField(db_column='MaximumPermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_file_link = models.BooleanField(verbose_name='Create and Share Content Deliveries for Salesforce Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers', sf_read_only=models.READ_ONLY)
    maximum_permissions_run_flow = models.BooleanField(verbose_name='Run Flows', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_users = models.BooleanField(verbose_name='View All Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views', sf_read_only=models.READ_ONLY)
    maximum_permissions_sales_console = models.BooleanField(verbose_name='Sales Console', sf_read_only=models.READ_ONLY)
    maximum_permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.READ_ONLY)
    maximum_permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_topics = models.BooleanField(verbose_name='Create Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features', sf_read_only=models.READ_ONLY)
    maximum_permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_work_badge_definition = models.BooleanField(verbose_name='Create custom Badge Definitions', sf_read_only=models.READ_ONLY)
    maximum_permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_help_link = models.BooleanField(verbose_name='View Help Link', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_for_share_point = models.BooleanField(verbose_name='Access Chatter For SharePoint', sf_read_only=models.READ_ONLY)
    maximum_permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User', sf_read_only=models.READ_ONLY)
    maximum_permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations', sf_read_only=models.READ_ONLY)
    maximum_permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.READ_ONLY)
    maximum_permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects', sf_read_only=models.READ_ONLY)
    maximum_permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.READ_ONLY)
    maximum_permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce', sf_read_only=models.READ_ONLY)
    maximum_permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_health_check = models.BooleanField(verbose_name='View Health Check', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities', sf_read_only=models.READ_ONLY)
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicense'
        verbose_name = 'Permission Set License'
        verbose_name_plural = 'Permission Set Licenses'
        # keyPrefix = '0PL'



class PermissionSetLicenseAssign(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey(PermissionSetLicense, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    assignee = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_assignee_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicenseAssign'
        verbose_name = 'Permission Set License Assignment'
        verbose_name_plural = 'Permission Set License Assignments'
        # keyPrefix = '2LA'



class PicklistValueInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value = models.CharField(max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default_value = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    valid_for = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_particle_id = models.CharField(max_length=150, verbose_name='Entity Particle ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PicklistValueInfo'
        verbose_name = 'Picklist Value Info'
        verbose_name_plural = 'Picklist Value Info'
        # keyPrefix = '4pv'



class PlatformAction(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='Platform Action ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('QuickAction', 'Quick Action'), ('StandardButton', 'Standard Button'), ('CustomButton', 'Custom Button'), ('ProductivityAction', 'Productivity (Highlight) Action'), ('ActionLink', 'ActionLink'), ('InvocableAction', 'Invocable Action')])
    subtype = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, verbose_name='API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_target = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_target_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Describe', 'Target is for describing the action'), ('Invoke', 'Target is for invoking the action'), ('Visualforce', 'Target is for a visualforce page')], blank=True, null=True)
    confirmation_message = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    group_id = models.CharField(max_length=18, verbose_name='Group ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    is_group_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    category = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Primary', 'Primary action'), ('Overflow', 'Overflow action')], blank=True, null=True)
    invocation_status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('New', 'New'), ('Pending', 'Pending'), ('Successful', 'Successful'), ('Failed', 'Failed')], blank=True, null=True)
    invoked_by_user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    source_entity = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    action_list_context = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('ListView', 'Header for a list view'), ('RelatedList', 'Header for a related list'), ('ListViewRecord', 'View for a list view record'), ('RelatedListRecord', 'View for a related list record'), ('Record', 'View page for a record'), ('FeedElement', 'An element in the Feed'), ('Chatter', 'Chatter specific view'), ('Global', 'View page for Global'), ('Flexipage', 'View for Lightning Page'), ('MruList', 'Header for an MRU list'), ('MruRow', 'View for a MRU list record'), ('RecordEdit', 'Edit page for a record'), ('Photo', 'View for an entity photo detail component'), ('BannerPhoto', 'View for an entity Banner photo detail component'), ('ObjectHomeChart', 'View for object home charts'), ('ListViewDefinition', 'View for a list view definition'), ('Dockable', 'View for dockable actions'), ('Lookup', 'View for lookup'), ('Assistant', 'View for Assistant')], blank=True, null=True)
    device_format = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='Phone', choices=[('Phone', 'Phone'), ('Tablet', 'Tablet'), ('Desktop', 'Desktop'), ('Aloha', 'Aloha')], blank=True, null=True)
    icon_content_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_height = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_width = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(verbose_name='Icon URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_mass_action = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_source_entity = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    section = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Page', 'Page Actions'), ('ActivityComposer', 'Activity Composer Actions'), ('CollaborateComposer', 'Collaboration Composer Actions'), ('SingleActionLinks', 'Single Action Links')], blank=True, null=True)
    related_list_record_id = models.CharField(max_length=255, verbose_name='Related List Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PlatformAction'
        verbose_name = 'Platform Action'
        verbose_name_plural = 'Platform Actions'
        # keyPrefix = '0JV'



class PlatformCachePartition(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(blank=True, null=True)
    is_default_partition = models.BooleanField(verbose_name='Default Partition', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'PlatformCachePartition'
        verbose_name = 'Platform Cache Partition'
        verbose_name_plural = 'Platform Cache Partitions'
        # keyPrefix = '0Er'



class PlatformCachePartitionType(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartitiontype_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartitiontype_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    platform_cache_partition = models.ForeignKey(PlatformCachePartition, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    cache_type = models.CharField(max_length=255, choices=[('Session', None), ('Organization', None)])
    allocated_capacity = models.IntegerField(blank=True, null=True)
    allocated_purchased_capacity = models.IntegerField(verbose_name='Allocated Namespaced Purchased Capacity', blank=True, null=True)
    allocated_trial_capacity = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PlatformCachePartitionType'
        verbose_name = 'Platform Cache Partition Type'
        verbose_name_plural = 'Platform Cache Partition Types'
        # keyPrefix = '0Ev'



class Pricebook2(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Price Book Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebook2_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebook2_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(max_length=255, blank=True, null=True)
    is_standard = models.BooleanField(verbose_name='Is Standard Price Book', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2'
        verbose_name = 'Price Book'
        verbose_name_plural = 'Price Books'
        # keyPrefix = '01s'



class Pricebook2History(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('IsArchived', 'Archived'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('IsStandard', 'Is Standard Price Book'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Name', 'Price Book Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2History'
        verbose_name = 'Price Book History'
        verbose_name_plural = 'Price Book History'
        # keyPrefix = 'None'



class PricebookEntry(models.Model):
    name = models.CharField(max_length=255, verbose_name='Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='List Price')
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    use_standard_price = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebookentry_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebookentry_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    product_code = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PricebookEntry'
        verbose_name = 'Price Book Entry'
        verbose_name_plural = 'Price Book Entries'
        # keyPrefix = '01u'



class ProcessDefinition(models.Model):
    name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=40, verbose_name='Process Definition Type', sf_read_only=models.READ_ONLY, default='Approval', choices=[('Approval', 'Approval Process'), ('State', 'State-based Process')])
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Asset', None), ('AssetRelationship', None), ('AssistantProgress', None), ('Campaign', None), ('Case', None), ('Contact', None), ('Contract', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('ExchangeUserMapping', None), ('Lead', None), ('Opportunity', None), ('Order', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('UserProvisioningRequest', None), ('WorkBadgeDefinition', None)])
    lock_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Total', None), ('Admin', None), ('Owner', None), ('Workitem', None), ('Node', None), ('none', None)])
    state = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Obsolete', 'Obsolete')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processdefinition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processdefinition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessDefinition'
        verbose_name = 'Process Definition'
        verbose_name_plural = 'Process Definition'
        # keyPrefix = '04a'



class ProcessInstance(models.Model):
    process_definition = models.ForeignKey(ProcessDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    target_object = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Campaign, Case, Contact, Contract, CustomerBankAccount__c, DegreeCourse__c, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, SocialPost, Solution, StreamingChannel, SystemSettings__c, UserProvisioningRequest, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')])
    completed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_actor = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_lastactor_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    submitted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_submittedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstance'
        verbose_name = 'Process Instance'
        verbose_name_plural = 'Process Instance'
        # keyPrefix = '04g'



class ProcessInstanceHistory(models.Model):
    is_pending = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    target_object = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contact, Contract, CustomerBankAccount__c, DegreeCourse__c, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, Payment__c, Product2, ProfileSkill, ProfileSkillEndorsement, ProfileSkillUser, Rabatt__c, SocialPost, Solution, StreamingChannel, SystemSettings__c, UserProvisioningRequest, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c]
    step_status = models.CharField(max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')], blank=True, null=True)
    process_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancehistory_originalactor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancehistory_actor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    reminders_sent = models.IntegerField(verbose_name='RemindersSent', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_days = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    comments = models.CharField(max_length=4000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceHistory'
        verbose_name = 'Process Instance History'
        verbose_name_plural = 'Process Instance History'
        # keyPrefix = 'None'



class ProcessInstanceNode(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    process_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    node_status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')], blank=True, null=True)
    completed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_actor = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_lastactor_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    process_node_name = models.CharField(max_length=255, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceNode'
        verbose_name = 'Process Instance Node'
        verbose_name_plural = 'Process Instance Node'
        # keyPrefix = '0OO'



class ProcessInstanceStep(models.Model):
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    step_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')], blank=True, null=True)
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancestep_originalactor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancestep_actor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    comments = models.CharField(max_length=4000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    step_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    elapsed_time_in_days = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceStep'
        verbose_name = 'Process Instance Step'
        verbose_name_plural = 'Process Instance Step'
        # keyPrefix = '04h'



class ProcessInstanceWorkitem(models.Model):
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE)  # Master Detail Relationship *
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstanceworkitem_originalactor_set', sf_read_only=models.NOT_CREATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstanceworkitem_actor_set', sf_read_only=models.NOT_CREATEABLE)  # Reference to tables [Group, User]
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceWorkitem'
        verbose_name = 'Approval Request'
        verbose_name_plural = 'Approval Requests'
        # keyPrefix = '04i'



class ProcessNode(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    process_definition = models.ForeignKey(ProcessDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessNode'
        verbose_name = 'Process Node'
        verbose_name_plural = 'Process Node'
        # keyPrefix = '04b'



class Product2(models.Model):
    name = models.CharField(max_length=255, verbose_name='Product Name')
    product_code = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(verbose_name='Product Description', blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    family = models.CharField(max_length=40, verbose_name='Product Family', choices=[('None', 'None')], blank=True, null=True)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, blank=True, null=True)
    external_id = models.CharField(max_length=255, verbose_name='External ID', blank=True, null=True)
    display_url = models.URLField(verbose_name='Display URL', blank=True, null=True)
    quantity_unit_of_measure = models.CharField(max_length=40, choices=[('Each', 'Each')], blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2'
        verbose_name = 'Product'
        verbose_name_plural = 'Products'
        # keyPrefix = '01t'



class Product2Feed(models.Model):
    parent = models.ForeignKey(Product2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2feed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2feed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2Feed'
        verbose_name = 'Product Feed'
        verbose_name_plural = 'Product Feed'
        # keyPrefix = 'None'



class Product2History(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('created', 'Created.'), ('DisplayUrl', 'Display URL'), ('ExternalDataSource', 'External Data Source'), ('ExternalId', 'External ID'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ProductCode', 'Product Code'), ('Description', 'Product Description'), ('Family', 'Product Family'), ('Name', 'Product Name'), ('QuantityUnitOfMeasure', 'Quantity Unit Of Measure'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2History'
        verbose_name = 'Product History'
        verbose_name_plural = 'Product History'
        # keyPrefix = 'None'



class Profile(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE)
    permissions_email_single = models.BooleanField(verbose_name='Send Email', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_mass = models.BooleanField(verbose_name='Mass Email', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_event = models.BooleanField(verbose_name='Edit Events', sf_read_only=models.NOT_CREATEABLE)
    permissions_export_report = models.BooleanField(verbose_name='Export Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts', sf_read_only=models.NOT_CREATEABLE)
    permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_users = models.BooleanField(verbose_name='Manage Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases', sf_read_only=models.NOT_CREATEABLE)
    permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions', sf_read_only=models.NOT_CREATEABLE)
    permissions_customize_application = models.BooleanField(verbose_name='Customize Application', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields', sf_read_only=models.NOT_CREATEABLE)
    permissions_run_reports = models.BooleanField(verbose_name='Run Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record', sf_read_only=models.NOT_CREATEABLE)
    permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder', sf_read_only=models.NOT_CREATEABLE)
    permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts', sf_read_only=models.NOT_CREATEABLE)
    permissions_activate_order = models.BooleanField(verbose_name='Activate Orders', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_leads = models.BooleanField(verbose_name='Import Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_data = models.BooleanField(verbose_name='View All Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_translation = models.BooleanField(verbose_name='Manage Translation', sf_read_only=models.NOT_CREATEABLE)
    permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter', sf_read_only=models.NOT_CREATEABLE)
    permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.NOT_CREATEABLE)
    permissions_api_user_only = models.BooleanField(verbose_name='Api Only User', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories', sf_read_only=models.NOT_CREATEABLE)
    permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires', sf_read_only=models.NOT_CREATEABLE)
    permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders', sf_read_only=models.NOT_CREATEABLE)
    permissions_install_multiforce = models.BooleanField(verbose_name='Download AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_publish_multiforce = models.BooleanField(verbose_name='Upload AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_multiforce = models.BooleanField(verbose_name='Create AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete', sf_read_only=models.NOT_CREATEABLE)
    permissions_inbound_migration_tools_user = models.BooleanField(verbose_name='Deploy Change Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_solution_import = models.BooleanField(verbose_name='Import Solutions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms', sf_read_only=models.NOT_CREATEABLE)
    permissions_outbound_migration_tools_user = models.BooleanField(verbose_name='Create and Upload Change Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_content = models.BooleanField(verbose_name='View Content in Portals', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations', sf_read_only=models.NOT_CREATEABLE)
    permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations', sf_read_only=models.NOT_CREATEABLE)
    permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Deliver Uploaded Files and Personal Content', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories', sf_read_only=models.NOT_CREATEABLE)
    permissions_author_apex = models.BooleanField(verbose_name='Author Apex', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations', sf_read_only=models.NOT_CREATEABLE)
    permissions_api_enabled = models.BooleanField(verbose_name='API Enabled', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases', sf_read_only=models.NOT_CREATEABLE)
    permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files', sf_read_only=models.NOT_CREATEABLE)
    permissions_schedule_job = models.BooleanField(verbose_name='Schedule Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots', sf_read_only=models.NOT_CREATEABLE)
    permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays', sf_read_only=models.NOT_CREATEABLE)
    permissions_custom_sidebar_on_all_pages = models.BooleanField(verbose_name='Show Custom Sidebar On All Pages', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_interaction = models.BooleanField(verbose_name='Manage Force.com Flow', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards", sf_read_only=models.NOT_CREATEABLE)
    permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter', sf_read_only=models.NOT_CREATEABLE)
    permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Force.com Flow User Feature License', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_administration = models.BooleanField(verbose_name='Email Administration', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.NOT_CREATEABLE)
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_file_link = models.BooleanField(verbose_name='Create and Share Content Deliveries for Salesforce Files', sf_read_only=models.NOT_CREATEABLE)
    permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers', sf_read_only=models.NOT_CREATEABLE)
    permissions_run_flow = models.BooleanField(verbose_name='Run Flows', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_users = models.BooleanField(verbose_name='View All Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views', sf_read_only=models.NOT_CREATEABLE)
    permissions_sales_console = models.BooleanField(verbose_name='Sales Console', sf_read_only=models.NOT_CREATEABLE)
    permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.NOT_CREATEABLE)
    permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_topics = models.BooleanField(verbose_name='Create Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features', sf_read_only=models.NOT_CREATEABLE)
    permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_work_badge_definition = models.BooleanField(verbose_name='Create custom Badge Definitions', sf_read_only=models.NOT_CREATEABLE)
    permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_help_link = models.BooleanField(verbose_name='View Help Link', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_for_share_point = models.BooleanField(verbose_name='Access Chatter For SharePoint', sf_read_only=models.NOT_CREATEABLE)
    permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User', sf_read_only=models.NOT_CREATEABLE)
    permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations', sf_read_only=models.NOT_CREATEABLE)
    permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.NOT_CREATEABLE)
    permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations', sf_read_only=models.NOT_CREATEABLE)
    permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects', sf_read_only=models.NOT_CREATEABLE)
    permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.NOT_CREATEABLE)
    permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce', sf_read_only=models.NOT_CREATEABLE)
    permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.NOT_CREATEABLE)
    permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_health_check = models.BooleanField(verbose_name='View Health Check', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities', sf_read_only=models.NOT_CREATEABLE)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profile_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profile_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Profile'
        verbose_name = 'Profile'
        verbose_name_plural = 'Profile'
        # keyPrefix = '00e'



class ProfileSkill(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=99, verbose_name='Skill Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskill_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskill_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_count = models.IntegerField(verbose_name='People With Skill', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Skill Description', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkill'
        verbose_name = 'Skill'
        verbose_name_plural = 'Skills'
        # keyPrefix = '0Sk'



class ProfileSkillEndorsement(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Endorsement Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Added Date', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskillendorsement_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskillendorsement_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    profile_skill_user = models.ForeignKey('ProfileSkillUser', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskillendorsement_user_set', blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillEndorsement'
        verbose_name = 'Endorsement'
        verbose_name_plural = 'Endorsements'
        # keyPrefix = '0SE'



class ProfileSkillEndorsementFeed(models.Model):
    parent = models.ForeignKey(ProfileSkillEndorsement, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskillendorsementfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskillendorsementfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillEndorsementFeed'
        verbose_name = 'Endorsement Feed'
        verbose_name_plural = 'Endorsement Feed'
        # keyPrefix = 'None'



class ProfileSkillEndorsementHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    profile_skill_endorsement = models.ForeignKey(ProfileSkillEndorsement, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('User', 'Added By'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ProfileSkillUser', 'Skill User')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillEndorsementHistory'
        verbose_name = 'Endorsement History'
        verbose_name_plural = 'Endorsement History'
        # keyPrefix = 'None'



class ProfileSkillFeed(models.Model):
    parent = models.ForeignKey(ProfileSkill, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskillfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskillfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillFeed'
        verbose_name = 'Skill Feed'
        verbose_name_plural = 'Skill Feed'
        # keyPrefix = 'None'



class ProfileSkillHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    profile_skill = models.ForeignKey(ProfileSkill, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Owner', 'Owner Name'), ('UserCount', 'People With Skill'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Description', 'Skill Description'), ('Name', 'Skill Name')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillHistory'
        verbose_name = 'Skill History'
        verbose_name_plural = 'Skill History'
        # keyPrefix = 'None'



class ProfileSkillShare(models.Model):
    parent = models.ForeignKey(ProfileSkill, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillShare'
        verbose_name = 'Skill Share'
        verbose_name_plural = 'Skill Share'
        # keyPrefix = 'None'



class ProfileSkillUser(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Skill User Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Added Date', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskilluser_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskilluser_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    profile_skill = models.ForeignKey(ProfileSkill, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskilluser_user_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    endorsement_count = models.IntegerField(verbose_name='Endorsements', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillUser'
        verbose_name = 'Skill User'
        verbose_name_plural = 'Skill Users'
        # keyPrefix = '0SM'



class ProfileSkillUserFeed(models.Model):
    parent = models.ForeignKey(ProfileSkillUser, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskilluserfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profileskilluserfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillUserFeed'
        verbose_name = 'Skill User Feed'
        verbose_name_plural = 'Skill User Feed'
        # keyPrefix = 'None'



class ProfileSkillUserHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    profile_skill_user = models.ForeignKey(ProfileSkillUser, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('EndorsementCount', 'Endorsements'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ProfileSkill', 'Skill'), ('User', 'User')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProfileSkillUserHistory'
        verbose_name = 'Skill User History'
        verbose_name_plural = 'Skill User History'
        # keyPrefix = 'None'



class Publisher(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Publisher Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=70, verbose_name='Publisher Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=70, verbose_name='Publisher Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_salesforce = models.BooleanField(verbose_name='Is Salesforce the Publisher?', sf_read_only=models.READ_ONLY, default=False)
    major_version = models.IntegerField(verbose_name='Publisher Major Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    minor_version = models.IntegerField(verbose_name='Publisher Minor Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Publisher'
        verbose_name = 'Publisher'
        verbose_name_plural = 'Publishers'
        # keyPrefix = '4pb'



class PushTopic(models.Model):
    name = models.CharField(max_length=25, verbose_name='Topic Name')
    query = models.CharField(max_length=1300, verbose_name='SOQL Query')
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version')
    is_active = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    notify_for_fields = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Select', None), ('Where', None), ('Referenced', None), ('All', None)])
    notify_for_operations = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Create', None), ('Update', None), ('All', None), ('Extended', None)])
    description = models.CharField(max_length=400, blank=True, null=True)
    notify_for_operation_create = models.BooleanField(verbose_name='Create')
    notify_for_operation_update = models.BooleanField(verbose_name='Update')
    notify_for_operation_delete = models.BooleanField(verbose_name='Delete')
    notify_for_operation_undelete = models.BooleanField(verbose_name='Undelete')
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pushtopic_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pushtopic_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PushTopic'
        verbose_name = 'Push Topic'
        verbose_name_plural = 'Push Topics'
        # keyPrefix = '0IF'



class QueueSobject(models.Model):
    queue = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Case', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('Lead', None), ('Macro', None), ('Order', None), ('Payment__c', None), ('ProfileSkill', None), ('SocialPost', None), ('UserProvisioningRequest', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)])
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'QueueSobject'
        verbose_name = 'Queue Sobject'
        verbose_name_plural = 'Queue Sobjects'
        # keyPrefix = '03g'



class RabattHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Rabatt', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Active__c', 'Active'), ('Contract__c', 'Contract'), ('created', 'Created.'), ('DiscountSemesterFee__c', 'Discount on Semester Fee'), ('DiscountTuitionFee__c', 'Discount on Tuition Fee'), ('Name', 'Discounts'), ('DiscountType__c', 'Discount Type'), ('feedEvent', 'Feed event'), ('ApplicableMonths__c', 'Number of Applicable Months'), ('Utilization__c', 'Number of Utilizations'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Rabatt__History'
        verbose_name = 'History: Discount'
        verbose_name_plural = 'History: Discount'
        # keyPrefix = 'None'



class Rabatt(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Discounts', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='rabatt_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='rabatt_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    discount_type = models.CharField(custom=True, max_length=255, choices=[('Discount Tuition Fee', 'Discount Tuition Fee'), ('Discount Semester Fee', 'Discount Semester Fee')], blank=True, null=True)
    discount_tuition_fee = models.DecimalField(custom=True, max_digits=18, decimal_places=2, verbose_name='Discount on Tuition Fee', blank=True, null=True)
    discount_semester_fee = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Discount on Semester Fee', blank=True, null=True)
    applicable_months = models.DecimalField(custom=True, max_digits=3, decimal_places=0, verbose_name='Number of Applicable Months', blank=True, null=True)
    utilization = models.DecimalField(custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Utilizations', blank=True, null=True)
    active = models.BooleanField(custom=True, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'Rabatt__c'
        verbose_name = 'Discount'
        verbose_name_plural = 'Discounts'
        # keyPrefix = 'a0H'



class RecentlyViewed(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Asset', None), ('Campaign', None), ('Case', None), ('CollaborationGroup', None), ('Contact', None), ('ContentDocument', None), ('Contract', None), ('CustomerBankAccount__c', None), ('Dashboard', None), ('DegreeCourse__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('DuplicateRecordSet', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('Idea', None), ('Invoice__c', None), ('InvoiceLineItem__c', None), ('Lead', None), ('ListView', None), ('Macro', None), ('Mandate__c', None), ('Opportunity', None), ('Order', None), ('Payment__c', None), ('Pricebook2', None), ('PricebookEntry', None), ('Product2', None), ('Profile', None), ('ProfileSkill', None), ('Rabatt__c', None), ('Report', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('Topic', None), ('User', None), ('UserAppMenuItem', None), ('WorkBadge', None), ('WorkBadgeDefinition', None)], blank=True, null=True)
    alias = models.CharField(max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    profile = models.ForeignKey(Profile, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name_or_alias = models.CharField(max_length=80, verbose_name='Name or Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    language = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'RecentlyViewed'
        verbose_name = 'Recently Viewed'
        verbose_name_plural = 'Recently Viewed'
        # keyPrefix = 'None'



class RecordType(models.Model):
    name = models.CharField(max_length=80)
    developer_name = models.CharField(max_length=80, verbose_name='Record Type Name')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    business_process = models.ForeignKey(BusinessProcess, models.DO_NOTHING, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Announcement', None), ('Asset', None), ('AssetRelationship', None), ('AssistantProgress', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('ComponentResponseCache', None), ('Contact', None), ('ContentVersion', None), ('Contract', None), ('CustomerBankAccount__c', None), ('DegreeCourse__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('Event', None), ('FileSearchActivity', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('Idea', None), ('InboundSocialPost', None), ('Invoice__c', None), ('InvoiceLineItem__c', None), ('Lead', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('Mandate__c', None), ('Opportunity', None), ('Order', None), ('Payment__c', None), ('Pricebook2', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('Rabatt__c', None), ('RecordOrigin', None), ('SearchActivity', None), ('SearchPromotionRule', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SocialPost', None), ('Solution', None), ('SyncTransactionLog', None), ('Task', None), ('UserMetrics', None), ('WorkAccess', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.NOT_CREATEABLE, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordtype_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordtype_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'RecordType'
        verbose_name = 'Record Type'
        verbose_name_plural = 'Record Types'
        # keyPrefix = '012'



class RecordTypeLocalization(models.Model):
    parent = models.ForeignKey(RecordType, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    language = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    value = models.CharField(max_length=1000, verbose_name='Translation Text')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordtypelocalization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordtypelocalization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'RecordTypeLocalization'
        verbose_name = 'Translation'
        verbose_name_plural = 'Translation'
        # keyPrefix = 'None'



class RelationshipDomain(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Relationship Domain Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    child_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_info_id = models.CharField(max_length=70, verbose_name='Relationship Info ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_cascade_delete = models.BooleanField(verbose_name='Is Cascade Delete?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_restricted_delete = models.BooleanField(verbose_name='Is Restricted Delete?', sf_read_only=models.READ_ONLY, default=False)
    junction_id_list_names = models.TextField(verbose_name='Names of the Junction Id Lists', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'RelationshipDomain'
        verbose_name = 'Relationship Domain'
        verbose_name_plural = 'Relationship Domains'
        # keyPrefix = '0Jv'



class RelationshipInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Relationship Info Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    child_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_cascade_delete = models.BooleanField(verbose_name='Is Cascade Delete?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_restricted_delete = models.BooleanField(verbose_name='Is Restricted Delete?', sf_read_only=models.READ_ONLY, default=False)
    junction_id_list_names = models.TextField(verbose_name='Names of the Junction Id Lists', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'RelationshipInfo'
        verbose_name = 'Relationship'
        verbose_name_plural = 'Relationships'
        # keyPrefix = '0Ju'



class Report(models.Model):
    owner = models.ForeignKey(Folder, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Folder, Organization, User]
    folder_name = models.CharField(max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='report_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='report_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=40, verbose_name='Report Name', sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=80, verbose_name='Report Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_run_date = models.DateTimeField(verbose_name='Last Run', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    format = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Tabular', choices=[('MultiBlock', 'Joined'), ('Matrix', 'Matrix'), ('Summary', 'Summary'), ('Tabular', 'Tabular')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Report'
        verbose_name = 'Report'
        verbose_name_plural = 'Reports'
        # keyPrefix = '00O'



class ReportFeed(models.Model):
    parent = models.ForeignKey(Report, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='reportfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='reportfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ReportFeed'
        verbose_name = 'Report Feed'
        verbose_name_plural = 'Report Feed'
        # keyPrefix = 'None'



class SamlSsoConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    version = models.CharField(max_length=255, verbose_name='SAML Version', sf_read_only=models.READ_ONLY, choices=[('SAML1_1', None), ('SAML2_0', None)])
    issuer = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    options_sp_init_binding = models.BooleanField(verbose_name='SpInitBinding', sf_read_only=models.READ_ONLY)
    options_user_provisioning = models.BooleanField(verbose_name='UserProvisioning', sf_read_only=models.READ_ONLY)
    attribute_format = models.CharField(max_length=255, verbose_name='Name ID Format', sf_read_only=models.READ_ONLY, blank=True, null=True)
    attribute_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    audience = models.CharField(max_length=255, verbose_name='Entity ID', sf_read_only=models.READ_ONLY)
    identity_mapping = models.CharField(max_length=255, verbose_name='SAML Identity Type', sf_read_only=models.READ_ONLY, choices=[('Username', None), ('FederationId', None), ('UserId', None)])
    identity_location = models.CharField(max_length=255, verbose_name='SAML Identity Location', sf_read_only=models.READ_ONLY, choices=[('SubjectNameId', None), ('Attribute', None)])
    saml_jit_handler = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    execution_user = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_executionuser_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_url = models.CharField(max_length=1500, verbose_name='Identity Provider Login URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    logout_url = models.CharField(max_length=1500, verbose_name='Identity Provider Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_url = models.CharField(max_length=500, verbose_name='Custom Error URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    validation_cert = models.CharField(max_length=4000, verbose_name='Identity Provider Certificate', sf_read_only=models.READ_ONLY)
    request_signature_method = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('RSA-SHA1', 'RSA-SHA1'), ('RSA-SHA256', 'RSA-SHA256')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SamlSsoConfig'
        verbose_name = 'SAML Single Sign-On Setting'
        verbose_name_plural = 'SAML Single Sign-On Settings'
        # keyPrefix = '0LE'



class Scontrol(models.Model):
    name = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.NOT_CREATEABLE)
    developer_name = models.CharField(max_length=80, verbose_name='S-Control Name', sf_read_only=models.NOT_CREATEABLE)
    description = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    encoding_key = models.CharField(max_length=40, verbose_name='Encoding', sf_read_only=models.NOT_CREATEABLE, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    html_wrapper = models.TextField(verbose_name='HTML Body', sf_read_only=models.NOT_CREATEABLE)
    filename = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    body_length = models.IntegerField(verbose_name='Binary Length', sf_read_only=models.READ_ONLY)
    binary = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    content_source = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.NOT_CREATEABLE, choices=[('HTML', 'HTML'), ('URL', 'URL'), ('Snippet', 'Snippet')], blank=True, null=True)
    supports_caching = models.BooleanField(verbose_name='Prebuild In Page', sf_read_only=models.NOT_CREATEABLE, default=False)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='scontrol_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='scontrol_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Scontrol'
        verbose_name = 'Custom S-Control'
        verbose_name_plural = 'Custom S-Controls'
        # keyPrefix = '01N'



class ScontrolLocalization(models.Model):
    scontrol = models.ForeignKey(Scontrol, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    language = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    value = models.CharField(max_length=1000, verbose_name='Translation Text')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='scontrollocalization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='scontrollocalization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ScontrolLocalization'
        verbose_name = 'Scontrol Localization'
        verbose_name_plural = 'Scontrol Localization'
        # keyPrefix = 'None'



class SearchActivity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Search Activity Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='searchactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='searchactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    search_term = models.CharField(max_length=100, sf_read_only=models.READ_ONLY)
    query_date = models.DateField(verbose_name='Search Date', sf_read_only=models.READ_ONLY)
    count_queries = models.IntegerField(verbose_name='Number of Searches', sf_read_only=models.READ_ONLY)
    count_users = models.IntegerField(verbose_name='Number of Users', sf_read_only=models.READ_ONLY)
    avg_num_results = models.DecimalField(max_digits=18, decimal_places=4, verbose_name='Number of Results', sf_read_only=models.READ_ONLY)
    kb_channel = models.CharField(max_length=255, verbose_name='Channel', sf_read_only=models.READ_ONLY, choices=[('AllChannels', 'All Channels'), ('App', 'Internal App'), ('Pkb', 'Public Knowledge Base'), ('Csp', 'Customer'), ('Prm', 'Partner')])
    period = models.CharField(max_length=255, verbose_name='Duration', sf_read_only=models.READ_ONLY, choices=[('DAY', 'Daily'), ('MONTH', 'Monthly'), ('YEAR', 'Yearly')])
    click_rank = models.DecimalField(max_digits=18, decimal_places=4, verbose_name='Average Click Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    query_language = models.CharField(max_length=255, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    clicked_record_name = models.CharField(max_length=255, verbose_name='Clicked Article Title', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SearchActivity'
        verbose_name = 'SearchActivity'
        verbose_name_plural = 'Knowledge Search Activity'
        # keyPrefix = '0JO'



class SearchLayout(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    layout_type = models.CharField(max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fields_displayed = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    buttons_displayed = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'SearchLayout'
        verbose_name = 'Search Layout'
        verbose_name_plural = 'Search Layouts'
        # keyPrefix = '4co'



class SecureAgentsCluster(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentscluster_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentscluster_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SecureAgentsCluster'
        verbose_name = 'Secure Agent Cluster'
        verbose_name_plural = 'Secure Agent Clusters'
        # keyPrefix = '0Qy'



class SecurityCustomBaseline(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='securitycustombaseline_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='securitycustombaseline_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    baseline = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SecurityCustomBaseline'
        verbose_name = 'Security Custom Baseline'
        verbose_name_plural = 'Security Custom Baselines'
        # keyPrefix = '09v'



class SessionPermSetActivation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    auth_session = models.ForeignKey(AuthSession, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_user_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SessionPermSetActivation'
        verbose_name = 'Session Permission Set Activation'
        verbose_name_plural = 'Session Permission Set Activations'
        # keyPrefix = '5Pa'



class SetupAuditTrail(models.Model):
    action = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    section = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    display = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    delegate_user = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SetupAuditTrail'
        verbose_name = 'Setup Audit Trail Entry'
        verbose_name_plural = 'Setup Audit Trail Entries'
        # keyPrefix = '0Ym'



class SetupEntityAccess(models.Model):
    parent = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    setup_entity = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ApexClass, ApexPage, ConnectedApplication, CustomPermission, ExternalDataSource, ExternalSocialAccount, NamedCredential] Master Detail Relationship *
    setup_entity_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('ApexClass', None), ('ApexPage', None), ('ConnectedApplication', None), ('ConnectedApplication', None), ('CustomPermission', None), ('ExternalDataSource', None), ('ExternalSocialAccount', None), ('NamedCredential', None), ('TabSet', None)], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'SetupEntityAccess'
        verbose_name = 'Setup Entity Access'
        verbose_name_plural = 'Setup Entity Access'
        # keyPrefix = '0J0'



class Site(models.Model):
    name = models.CharField(max_length=80, verbose_name='Site Name', sf_read_only=models.READ_ONLY)
    subdomain = models.CharField(max_length=80, verbose_name='Site Subdomain Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    url_path_prefix = models.CharField(max_length=40, verbose_name='Default Web Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    guest_user = models.ForeignKey('User', models.DO_NOTHING, related_name='site_guestuser_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, verbose_name='Site Status', sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Inactive', 'In Maintenance')])
    admin = models.ForeignKey('User', models.DO_NOTHING, related_name='site_admin_set', sf_read_only=models.READ_ONLY)
    options_enable_feeds = models.BooleanField(verbose_name='Enable Feeds', sf_read_only=models.READ_ONLY)
    options_require_https = models.BooleanField(verbose_name='Require Secure Connections (HTTPS)', sf_read_only=models.READ_ONLY)
    options_allow_home_page = models.BooleanField(verbose_name='Enable Standard Home Page', sf_read_only=models.READ_ONLY)
    options_allow_standard_ideas_pages = models.BooleanField(verbose_name='Enable Standard Ideas Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_search = models.BooleanField(verbose_name='Enable Standard Lookup Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_lookups = models.BooleanField(verbose_name='Enable Standard Search Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_answers_pages = models.BooleanField(verbose_name='Enable Standard Answers Pages', sf_read_only=models.READ_ONLY)
    options_allow_guest_support_api = models.BooleanField(verbose_name='Guest Access to the Support API', sf_read_only=models.READ_ONLY)
    options_allow_standard_portal_pages = models.BooleanField(verbose_name='Allow Access to Standard Salesforce Pages', sf_read_only=models.READ_ONLY)
    description = models.TextField(verbose_name='Site Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=255, verbose_name='Site Label', sf_read_only=models.READ_ONLY)
    analytics_tracking_code = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    site_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Siteforce', 'Site.com'), ('Visualforce', 'Force.com'), ('User', 'User')])
    clickjack_protection_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='SameOriginOnly', choices=[('AllowAllFraming', 'Allow framing by any page (no protection)'), ('SameOriginOnly', 'Allow framing by the same origin only (recommended)'), ('NoFraming', "Don't allow framing by any page (most protection)")])
    daily_bandwidth_limit = models.IntegerField(verbose_name='Daily Bandwidth Limit (MB)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_bandwidth_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_request_time_limit = models.IntegerField(verbose_name='Daily Request Time Limit (min)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_request_time_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_page_views_entitlement = models.IntegerField(verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='site_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='site_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Site'
        verbose_name = 'Site'
        verbose_name_plural = 'Sites'
        # keyPrefix = '0DM'



class SiteFeed(models.Model):
    parent = models.ForeignKey(Site, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sitefeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sitefeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SiteFeed'
        verbose_name = 'Site'
        verbose_name_plural = 'Site'
        # keyPrefix = 'None'



class SiteHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    site = models.ForeignKey(Site, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('siteActive', 'Active'), ('IndexPage', 'Active Site Home Page'), ('SiteAllowStandardPortalPages', 'Allow Access to Standard Salesforce Pages'), ('AnalyticsTrackingCode', 'Analytics Tracking Code'), ('siteOverride401', 'Authorization Required Page (401)'), ('siteOverrideChangePassword', 'Change Password Page'), ('ClickjackProtectionLevel', 'Clickjack Protection Level'), ('created', 'Created.'), ('SiteDeleteDomain', 'Custom Web Address'), ('siteNewDomain', 'Custom Web Address'), ('TopLevelDomain', 'Custom Web Address'), ('DefaultDomain', 'Default Site Domain'), ('siteSetPrimaryDomain', 'Default Site Domain'), ('UrlPathPrefix', 'Default Web Address'), ('siteBTDisabled', 'Disable Site'), ('siteEnableFeeds', 'Enable Feeds'), ('siteAllowStandardAnswersPages', 'Enable Standard Answers Pages'), ('siteAllowHomePage', 'Enable Standard Home Page'), ('siteAllowStandardIdeasPages', 'Enable Standard Ideas Pages'), ('siteAllowStandardSearch', 'Enable Standard Lookup Pages'), ('siteAllowStandardLookups', 'Enable Standard Search Pages'), ('feedEvent', 'Feed event'), ('siteOverrideForgotPassword', 'Forgot Password Page'), ('siteOverride500', 'Generic Error Page'), ('GuestUser', 'Guest User'), ('siteOverrideInactive', 'Inactive Site Home Page'), ('siteOverride509', 'Limit Exceeded Page (509)'), ('siteOverride503', 'Maintenance Page(500/503)'), ('sitePageLimitExceeded', 'Monthly page view limit exceeded for org'), ('siteOverrideMyProfile', 'My Profile Page'), ('NewPassTemplate', 'New Password Template'), ('NewUserTemplate', 'New User Template'), ('Options', 'Options'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('siteOverride404', 'Page Not Found Page (404)'), ('Portal', 'Portal'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('siteNewRedirect', 'redirection mappings. Created a new mapping'), ('siteDeleteRedirect', 'redirection mappings. Deleted the mapping'), ('siteChangeRedirect', 'redirection mappings. The new mapping value is'), ('siteRequireInsecurePortalAccess', 'Require Non-Secure Connections (HTTP)'), ('siteRequireHttps', 'Require Secure Connections (HTTPS)'), ('siteOverrideSelfReg', 'Self Registration Page'), ('ServerIsDown', 'Service Not Available'), ('Admin', 'Site Contact'), ('Description', 'Site Description'), ('FavoriteIcon', 'Site Favorite Icon'), ('MasterLabel', 'Site Label'), ('Language', 'Site Master Language'), ('Name', 'Site Name'), ('siteOverrideRobotsTxt', 'Site Robots.txt'), ('Status', 'Site Status'), ('Subdomain', 'Site Subdomain Prefix'), ('siteOverrideTemplate', 'Site Template'), ('SiteType', 'Site Type'), ('Guid', 'Unique ID'), ('UrlRewriterClass', 'URL Rewriter Class')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SiteHistory'
        verbose_name = 'Site History'
        verbose_name_plural = 'Site History'
        # keyPrefix = 'None'



class SocialPersona(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Social Handle')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpersona_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpersona_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Account, models.DO_NOTHING)  # Reference to tables [Account, Contact, Lead, SocialPost] Master Detail Relationship *
    provider = models.CharField(max_length=255, verbose_name='Social Network', choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('Other', 'Other Media Type')])
    external_id = models.CharField(max_length=255, verbose_name='Social Persona Provider External Id', blank=True, null=True)
    is_default = models.BooleanField(verbose_name='Default', default=models.DEFAULTED_ON_CREATE)
    external_picture_url = models.URLField(db_column='ExternalPictureURL', verbose_name='Provider External Picture URL', blank=True, null=True)
    profile_url = models.URLField(verbose_name='Profile URL', blank=True, null=True)
    topic_type = models.CharField(max_length=255, blank=True, null=True)
    is_blacklisted = models.BooleanField(verbose_name='Blacklisted', default=models.DEFAULTED_ON_CREATE)
    klout = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Klout Rating', blank=True, null=True)
    real_name = models.CharField(max_length=255, blank=True, null=True)
    is_following_us = models.BooleanField(verbose_name='Is following us', default=models.DEFAULTED_ON_CREATE)
    are_we_following = models.BooleanField(verbose_name='Are we following', default=models.DEFAULTED_ON_CREATE)
    media_type = models.CharField(max_length=255, verbose_name='Radian6 Media Type', blank=True, null=True)
    bio = models.TextField(blank=True, null=True)
    followers = models.IntegerField(blank=True, null=True)
    following = models.IntegerField(blank=True, null=True)
    number_of_friends = models.IntegerField(blank=True, null=True)
    listed_count = models.IntegerField(blank=True, null=True)
    media_provider = models.CharField(max_length=255, verbose_name='Radian6 Media Provider', blank=True, null=True)
    profile_type = models.CharField(max_length=255, choices=[('PERSON', 'Person'), ('PAGE', 'Page')], blank=True, null=True)
    r6_source_id = models.CharField(max_length=255, verbose_name='Radian6 Source Id', blank=True, null=True)
    number_of_tweets = models.IntegerField(blank=True, null=True)
    source_app = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPersona'
        verbose_name = 'Social Persona'
        verbose_name_plural = 'Social Personas'
        # keyPrefix = '0SP'



class SocialPersonaHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    social_persona = models.ForeignKey(SocialPersona, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AreWeFollowing', 'Are we following'), ('Bio', 'Bio'), ('IsBlacklisted', 'Blacklisted'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('Followers', 'Followers'), ('Following', 'Following'), ('IsFollowingUs', 'Is following us'), ('Klout', 'Klout Rating'), ('ListedCount', 'Listed Count'), ('NumberOfFriends', 'Number Of Friends'), ('NumberOfTweets', 'Number Of Tweets'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent'), ('ProfileType', 'Profile Type'), ('ProfileUrl', 'Profile URL'), ('ExternalPictureURL', 'Provider External Picture URL'), ('MediaProvider', 'Radian6 Media Provider'), ('MediaType', 'Radian6 Media Type'), ('R6SourceId', 'Radian6 Source Id'), ('RealName', 'Real Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Name', 'Social Handle'), ('Provider', 'Social Network'), ('SourceApp', 'Source App'), ('TopicType', 'Topic Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPersonaHistory'
        verbose_name = 'Social Persona History'
        verbose_name_plural = 'Social Persona History'
        # keyPrefix = 'None'



class SocialPost(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpost_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpost_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Case, models.DO_NOTHING, blank=True, null=True)
    persona = models.ForeignKey(SocialPersona, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Account, Contact, Lead]
    reply_to = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    headline = models.CharField(max_length=255, blank=True, null=True)
    content = models.TextField(blank=True, null=True)
    posted = models.DateTimeField(verbose_name='Posted Date', default=models.DEFAULTED_ON_CREATE)
    post_url = models.URLField(verbose_name='Post URL', blank=True, null=True)
    provider = models.CharField(max_length=255, verbose_name='Social Network', sf_read_only=models.NOT_UPDATEABLE, choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('Other', 'Other Media Type')], blank=True, null=True)
    handle = models.CharField(max_length=255, verbose_name='Social Handle', blank=True, null=True)
    spam_rating = models.CharField(max_length=255, choices=[('NotSpam', 'Not Spam'), ('Spam', 'Spam')], blank=True, null=True)
    media_type = models.CharField(max_length=255, verbose_name='Radian6 Media Type', blank=True, null=True)
    media_provider = models.CharField(max_length=255, verbose_name='Radian6 Media Provider', blank=True, null=True)
    sentiment = models.CharField(max_length=255, choices=[('Negative', 'Negative'), ('SomewhatNegative', 'Somewhat Negative'), ('Neutral', 'Neutral'), ('SomewhatPositive', 'Somewhat Positive'), ('Positive', 'Positive')], blank=True, null=True)
    post_priority = models.CharField(max_length=255, blank=True, null=True)
    status = models.CharField(max_length=255, choices=[('SENT', 'Sent'), ('PENDING', 'Sending'), ('REPLIED', 'Replied'), ('DELETED', 'Deleted'), ('UNKNOWN', 'Unknown'), ('FAILED', 'Failed'), ('PENDING_APPROVAL', 'Pending Approval'), ('RECALL_APPROVAL', 'Recalled'), ('REJECTED_APPROVAL', 'Rejected')], blank=True, null=True)
    status_message = models.TextField(blank=True, null=True)
    recipient = models.CharField(max_length=255, blank=True, null=True)
    recipient_type = models.CharField(max_length=255, blank=True, null=True)
    message_type = models.CharField(max_length=255, choices=[('Post', 'Post'), ('Comment', 'Comment'), ('Private', 'Private Message'), ('Retweet', 'Retweet'), ('Reply', 'Reply'), ('Direct', 'Direct Message'), ('Tweet', 'Tweet')], blank=True, null=True)
    r6_post_id = models.CharField(max_length=255, verbose_name='Radian6 Post Id', blank=True, null=True)
    r6_topic_id = models.CharField(max_length=255, verbose_name='Radian6 Topic Id', blank=True, null=True)
    r6_source_id = models.CharField(max_length=255, verbose_name='Radian6 Source Id', blank=True, null=True)
    topic_type = models.CharField(max_length=255, choices=[('Keyword', 'Keyword'), ('Managed', 'Managed')], blank=True, null=True)
    external_post_id = models.CharField(max_length=255, blank=True, null=True)
    harvest_date = models.DateTimeField(blank=True, null=True)
    is_outbound = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    post_tags = models.TextField(blank=True, null=True)
    source_tags = models.TextField(blank=True, null=True)
    classification = models.CharField(max_length=40, choices=[('Product Review', 'Product Review'), ('Inquiry', 'Inquiry'), ('Outreach', 'Outreach'), ('Lead', 'Lead'), ('Customer Case', 'Customer Case')], blank=True, null=True)
    thread_size = models.IntegerField(blank=True, null=True)
    comment_count = models.IntegerField(blank=True, null=True)
    shares = models.IntegerField(blank=True, null=True)
    view_count = models.IntegerField(blank=True, null=True)
    inbound_link_count = models.IntegerField(blank=True, null=True)
    unique_commentors = models.IntegerField(blank=True, null=True)
    likes_and_votes = models.IntegerField(verbose_name='Likes and Votes', blank=True, null=True)
    topic_profile_name = models.CharField(max_length=255, blank=True, null=True)
    keyword_group_name = models.CharField(max_length=255, blank=True, null=True)
    engagement_level = models.CharField(max_length=40, choices=[('Resolved', 'Resolved'), ('Submitted', 'Submitted'), ('Reviewed', 'Reviewed'), ('Commented', 'Commented')], blank=True, null=True)
    assigned_to = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    outbound_social_account = models.ForeignKey(ExternalSocialAccount, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    reviewed_status = models.CharField(max_length=40, blank=True, null=True)
    attachment_url = models.URLField(verbose_name='Attachment URL', blank=True, null=True)
    attachment_type = models.CharField(max_length=255, choices=[('UNKNOWN', 'Unknown'), ('IMAGE', 'Image'), ('VIDEO', 'Video'), ('LINK', 'Link')], blank=True, null=True)
    deleted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpost_deletedby_set', blank=True, null=True)
    response_context_external_id = models.CharField(max_length=255, verbose_name='Response Context', blank=True, null=True)
    liked_by = models.CharField(max_length=255, blank=True, null=True)
    analyzer_score = models.DecimalField(max_digits=18, decimal_places=3, blank=True, null=True)
    language = models.CharField(max_length=255, blank=True, null=True)
    review_score = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    review_scale = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    truncated_content = models.CharField(max_length=255, verbose_name='Content Clipping', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPost'
        verbose_name = 'Social Post'
        verbose_name_plural = 'Social Posts'
        # keyPrefix = '0ST'



class SocialPostFeed(models.Model):
    parent = models.ForeignKey(SocialPost, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpostfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpostfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostFeed'
        verbose_name = 'Social Post Feed'
        verbose_name_plural = 'Social Post Feed'
        # keyPrefix = 'None'



class SocialPostHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    social_post = models.ForeignKey(SocialPost, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AnalyzerScore', 'Analyzer Score'), ('AssignedTo', 'Assigned To'), ('AttachmentType', 'Attachment Type'), ('AttachmentUrl', 'Attachment URL'), ('Classification', 'Classification'), ('CommentCount', 'Comment Count'), ('Content', 'Content'), ('created', 'Created.'), ('DeletedBy', 'Deleted By'), ('EngagementLevel', 'Engagement Level'), ('ExternalPostId', 'External Post Id'), ('feedEvent', 'Feed event'), ('HarvestDate', 'Harvest Date'), ('Headline', 'Headline'), ('InboundLinkCount', 'Inbound Link Count'), ('ReplyTo', 'In Reply To'), ('IsOutbound', 'Is Outbound'), ('KeywordGroupName', 'Keyword Group Name'), ('Language', 'Language'), ('LikedBy', 'Liked By'), ('LikesAndVotes', 'Likes and Votes'), ('OutboundSocialAccount', 'Managed Social Account'), ('MessageType', 'Message Type'), ('Name', 'Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent'), ('Posted', 'Posted Date'), ('PostPriority', 'Post Priority'), ('PostTags', 'Post Tags'), ('PostUrl', 'Post URL'), ('MediaProvider', 'Radian6 Media Provider'), ('MediaType', 'Radian6 Media Type'), ('R6PostId', 'Radian6 Post Id'), ('R6SourceId', 'Radian6 Source Id'), ('R6TopicId', 'Radian6 Topic Id'), ('Recipient', 'Recipient'), ('RecipientType', 'Recipient Type'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ResponseContextExternalId', 'Response Context'), ('ReviewedStatus', 'Reviewed Status'), ('ReviewScale', 'Review Scale'), ('ReviewScore', 'Review Score'), ('Sentiment', 'Sentiment'), ('Shares', 'Shares'), ('Handle', 'Social Handle'), ('Provider', 'Social Network'), ('Persona', 'Social Persona'), ('SourceTags', 'Source Tags'), ('SpamRating', 'Spam Rating'), ('Status', 'Status'), ('StatusMessage', 'Status Message'), ('ThreadSize', 'Thread Size'), ('TopicProfileName', 'Topic Profile Name'), ('TopicType', 'Topic Type'), ('UniqueCommentors', 'Unique Commentors'), ('ViewCount', 'View Count'), ('Who', 'Who')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostHistory'
        verbose_name = 'Social Post History'
        verbose_name_plural = 'Social Post History'
        # keyPrefix = 'None'



class SocialPostShare(models.Model):
    parent = models.ForeignKey(SocialPost, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostShare'
        verbose_name = 'Social Post Share'
        verbose_name_plural = 'Social Post Share'
        # keyPrefix = 'None'



class Solution(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    solution_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    solution_name = models.CharField(max_length=255, verbose_name='Title')
    is_published = models.BooleanField(verbose_name='Public', default=models.DEFAULTED_ON_CREATE)
    is_published_in_public_kb = models.BooleanField(verbose_name='Visible in Public Knowledge Base', default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Draft', 'Entwurf'), ('Reviewed', 'Überprüfte'), ('Duplicate', 'Doppelte')])
    is_reviewed = models.BooleanField(verbose_name='Reviewed', sf_read_only=models.READ_ONLY, default=False)
    solution_note = models.TextField(verbose_name='Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    times_used = models.IntegerField(verbose_name='Num Related Cases', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_html = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Solution'
        verbose_name = 'Solution'
        verbose_name_plural = 'Solutions'
        # keyPrefix = '501'



class SolutionFeed(models.Model):
    parent = models.ForeignKey(Solution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SolutionFeed'
        verbose_name = 'Solution Feed'
        verbose_name_plural = 'Solution Feed'
        # keyPrefix = 'None'



class SolutionHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    solution = models.ForeignKey(Solution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('IsPublished', 'Public'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SolutionNote', 'Solution Details'), ('SolutionName', 'Solution Title'), ('Status', 'Status'), ('IsPublishedInPublicKb', 'Visible in Public Knowledge Base')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SolutionHistory'
        verbose_name = 'Solution History'
        verbose_name_plural = 'Solution History'
        # keyPrefix = 'None'



class SolutionStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_reviewed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'SolutionStatus'
        verbose_name = 'Solution Status Value'
        verbose_name_plural = 'Solution Status Value'
        # keyPrefix = 'None'



class Stamp(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    master_label = models.CharField(max_length=50, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stamp_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stamp_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Stamp'
        verbose_name = 'Stamp'
        verbose_name_plural = 'Stamps'
        # keyPrefix = '1ST'



class StampAssignment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    stamp = models.ForeignKey(Stamp, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    subject = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_subject_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'StampAssignment'
        verbose_name = 'Stamp Assignment'
        verbose_name_plural = 'Stamp Assignments'
        # keyPrefix = '1SA'



class StampLocalization(models.Model):
    parent = models.ForeignKey(Stamp, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    language = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    value = models.CharField(max_length=1000, verbose_name='Translation Text')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stamplocalization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stamplocalization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'StampLocalization'
        verbose_name = 'Translation'
        verbose_name_plural = 'Translation'
        # keyPrefix = 'None'



class StaticResource(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    content_type = models.CharField(max_length=120, verbose_name='MIME Type')
    body_length = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY)
    body = models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='staticresource_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='staticresource_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    cache_control = models.CharField(max_length=40, choices=[('Private', 'Private'), ('Public', 'Public')])
    class Meta(models.Model.Meta):
        db_table = 'StaticResource'
        verbose_name = 'Static Resource'
        verbose_name_plural = 'Static Resources'
        # keyPrefix = '081'



class StreamingChannel(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Streaming Channel Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='streamingchannel_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='streamingchannel_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_dynamic = models.BooleanField(verbose_name='Is Dynamically Created', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'StreamingChannel'
        verbose_name = 'Streaming Channel'
        verbose_name_plural = 'Streaming Channels'
        # keyPrefix = '0M6'



class StreamingChannelShare(models.Model):
    parent = models.ForeignKey(StreamingChannel, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'StreamingChannelShare'
        verbose_name = 'Streaming Channel Share'
        verbose_name_plural = 'Streaming Channel Share'
        # keyPrefix = 'None'



class SystemSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='systemsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='systemsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    value = models.CharField(custom=True, max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SystemSettings__c'
        verbose_name = 'System Settings'
        verbose_name_plural = 'System Settings'
        # keyPrefix = 'a0A'



class Task(models.Model):
    who = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='task_what_set', blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, DegreeCourse__c, GoCardlessError__c, InvoiceLineItem__c, Invoice__c, Opportunity, Order, Payment__c, Product2, Rabatt__c, Solution] Master Detail Relationship *
    subject = models.CharField(max_length=255, choices=[('Call', 'Anruf'), ('Send Letter', 'Brief senden'), ('Send Quote', 'Angebot senden'), ('Other', 'Andere')], blank=True, null=True)
    activity_date = models.DateField(verbose_name='Due Date Only', blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Not Started', 'Nicht begonnen'), ('In Progress', 'Läuft'), ('Completed', 'Abgeschlossen'), ('Waiting on someone else', 'Wartet auf andere Person'), ('Deferred', 'Verschoben')])
    priority = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('High', 'Hoch'), ('Normal', 'Normal'), ('Low', 'Niedrig')])
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='task_owner_set')
    description = models.TextField(blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='task_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='task_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='task_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', blank=True, null=True)
    call_type = models.CharField(max_length=40, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', default=models.DEFAULTED_ON_CREATE)
    recurrence_activity = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(verbose_name='Create Recurring Series of Tasks', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date_only = models.DateField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(max_length=40, verbose_name='Recurrence Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (New South Wales) (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (South Australia) (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) Eastern Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    recurrence_regenerated_type = models.CharField(max_length=40, verbose_name='Repeat This Task', choices=[('RecurrenceRegenerateAfterDueDate', 'After due date'), ('RecurrenceRegenerateAfterToday', 'After date completed'), ('RecurrenceRegenerated', '(Task Closed)')], blank=True, null=True)
    task_subtype = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Task', 'Task'), ('Email', 'Email'), ('Call', 'Call')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Task'
        verbose_name = 'Task'
        verbose_name_plural = 'Tasks'
        # keyPrefix = '00T'



class TaskFeed(models.Model):
    parent = models.ForeignKey(Task, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TaskFeed'
        verbose_name = 'Task Feed'
        verbose_name_plural = 'Task Feed'
        # keyPrefix = 'None'



class TaskPriority(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_high_priority = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskpriority_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskpriority_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TaskPriority'
        verbose_name = 'Task Priority Value'
        verbose_name_plural = 'Task Priority Value'
        # keyPrefix = 'None'



class TaskStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TaskStatus'
        verbose_name = 'Task Status Value'
        verbose_name_plural = 'Task Status Value'
        # keyPrefix = 'None'



class TenantUsageEntitlement(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantusageentitlement_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantusageentitlement_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    resource_group_key = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    setting = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    start_date = models.DateField(sf_read_only=models.READ_ONLY)
    end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    current_amount_allowed = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY)
    frequency = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Weekly', 'Weekly'), ('Fortnightly', 'Fortnightly'), ('Monthly', 'Monthly'), ('Once', 'Once'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], blank=True, null=True)
    is_persistent_resource = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_rollover = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    overage_grace = models.DecimalField(max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_used = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    usage_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=255, verbose_name='Setting Label', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TenantUsageEntitlement'
        verbose_name = 'Tenant Usage Entitlement'
        verbose_name_plural = 'Tenant Usage Entitlements'
        # keyPrefix = '0UT'



class TestSuiteMembership(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='testsuitemembership_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='testsuitemembership_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_test_suite = models.ForeignKey(ApexTestSuite, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'TestSuiteMembership'
        verbose_name = 'Test Suite Membership'
        verbose_name_plural = 'Test Suite Memberships'
        # keyPrefix = '0Hd'



class ThirdPartyAccountLink(models.Model):
    third_party_account_link_key = models.CharField(max_length=255, verbose_name='Third Party Account Link Unique Key', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    handle = models.CharField(max_length=375, verbose_name='External User Handle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    remote_identifier = models.CharField(max_length=128, verbose_name='External User Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    provider = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_provider_name = models.CharField(max_length=255, verbose_name='Single Sign-On Provider Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_not_sso_usable = models.BooleanField(verbose_name='Is Not SSO Usable', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ThirdPartyAccountLink'
        verbose_name = 'Third Party Account Link'
        verbose_name_plural = 'Third Party Account Links'
        # keyPrefix = '0Jr'



class TodayGoal(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    value = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_user_set')  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'TodayGoal'
        verbose_name = 'Goal'
        verbose_name_plural = 'Goals'
        # keyPrefix = '0Jz'



class TodayGoalShare(models.Model):
    parent = models.ForeignKey(TodayGoal, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'TodayGoalShare'
        verbose_name = 'Goal Share'
        verbose_name_plural = 'Goal Share'
        # keyPrefix = 'None'



class Topic(models.Model):
    name = models.CharField(max_length=99)
    description = models.CharField(max_length=1000, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    talking_about = models.IntegerField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Topic'
        verbose_name = 'Topic'
        verbose_name_plural = 'Topics'
        # keyPrefix = '0TO'



class TopicAssignment(models.Model):
    topic = models.ForeignKey(Topic, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, Contact, ContentDocument, Contract, CustomerBankAccount__c, DegreeCourse__c, Event, FeedItem, GoCardlessAPI__c, GoCardlessError__c, GoCardlessEvent__c, InvoiceLineItem__c, Invoice__c, Lead, Mandate__c, Opportunity, Order, Payment__c, Rabatt__c, Solution, SystemSettings__c, Task, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c] Master Detail Relationship *
    entity_key_prefix = models.CharField(max_length=3, verbose_name='Record Key Prefix', sf_read_only=models.READ_ONLY)
    entity_type = models.CharField(max_length=80, verbose_name='Object Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TopicAssignment'
        verbose_name = 'Record'
        verbose_name_plural = 'Topic Assignments'
        # keyPrefix = '0FT'



class TopicFeed(models.Model):
    parent = models.ForeignKey(Topic, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='topicfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='topicfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TopicFeed'
        verbose_name = 'Topic Feed'
        verbose_name_plural = 'Topic Feed'
        # keyPrefix = 'None'



class TopicLocalization(models.Model):
    parent = models.ForeignKey(Topic, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    language = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    value = models.CharField(max_length=1000, verbose_name='Translation Text')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='topiclocalization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='topiclocalization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TopicLocalization'
        verbose_name = 'Translation'
        verbose_name_plural = 'Translation'
        # keyPrefix = 'None'



class UndecidedEventRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    event = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='undecidedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='undecidedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UndecidedEventRelation'
        verbose_name = 'Undecided Event Relation'
        verbose_name_plural = 'Undecided Event Relations'
        # keyPrefix = 'None'



class User(models.Model):
    username = models.CharField(max_length=80)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    company_name = models.CharField(max_length=80, blank=True, null=True)
    division = models.CharField(max_length=80, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    title = models.CharField(max_length=80, blank=True, null=True)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    email = models.EmailField()
    email_preferences_auto_bcc = models.BooleanField(verbose_name='AutoBcc')
    email_preferences_auto_bcc_stay_in_touch = models.BooleanField(verbose_name='AutoBccStayInTouch')
    email_preferences_stay_in_touch_reminder = models.BooleanField(verbose_name='StayInTouchReminder')
    sender_email = models.EmailField(verbose_name='Email Sender Address', blank=True, null=True)
    sender_name = models.CharField(max_length=80, verbose_name='Email Sender Name', blank=True, null=True)
    signature = models.TextField(verbose_name='Email Signature', blank=True, null=True)
    stay_in_touch_subject = models.CharField(max_length=80, verbose_name='Stay-in-Touch Email Subject', blank=True, null=True)
    stay_in_touch_signature = models.TextField(verbose_name='Stay-in-Touch Email Signature', blank=True, null=True)
    stay_in_touch_note = models.CharField(max_length=512, verbose_name='Stay-in-Touch Email Note', blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    fax = models.CharField(max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, verbose_name='Cell', blank=True, null=True)
    alias = models.CharField(max_length=8)
    community_nickname = models.CharField(max_length=40, verbose_name='Nickname')
    badge_text = models.CharField(max_length=80, verbose_name='User Photo badge text overlay', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (New South Wales) (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (South Australia) (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) Eastern Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, blank=True, null=True)
    locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', choices=[('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bn_BD', 'Bengali (Bangladesh)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czech Republic)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_SZ', 'English (Swaziland)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('mt_MT', 'Maltese (Malta)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Bosnia & Herzegovina)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_CS', 'Serbian (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('yo_BJ', 'Yoruba (Benin)')])
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', default=models.DEFAULTED_ON_CREATE)
    receives_admin_info_emails = models.BooleanField(verbose_name='Admin Info Emails', default=models.DEFAULTED_ON_CREATE)
    email_encoding_key = models.CharField(max_length=40, verbose_name='Email Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    profile = models.ForeignKey(Profile, models.DO_NOTHING)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    employee_number = models.CharField(max_length=20, blank=True, null=True)
    delegated_approver = models.ForeignKey(Group, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Group, User]
    manager = models.ForeignKey('self', models.DO_NOTHING, related_name='user_manager_set', blank=True, null=True)
    last_login_date = models.DateTimeField(verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_password_change_date = models.DateTimeField(verbose_name='Last Password Change or Reset', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('self', models.DO_NOTHING, related_name='user_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('self', models.DO_NOTHING, related_name='user_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    offline_trial_expiration_date = models.DateTimeField(verbose_name='Offline Edition Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offline_pda_trial_expiration_date = models.DateTimeField(verbose_name='Sales Anywhere Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_permissions_marketing_user = models.BooleanField(verbose_name='Marketing User')
    user_permissions_offline_user = models.BooleanField(verbose_name='Offline User')
    user_permissions_avantgo_user = models.BooleanField(verbose_name='AvantGo User')
    user_permissions_call_center_auto_login = models.BooleanField(verbose_name='Auto-login To Call Center')
    user_permissions_mobile_user = models.BooleanField(verbose_name='Apex Mobile User')
    user_permissions_sfcontent_user = models.BooleanField(db_column='UserPermissionsSFContentUser', verbose_name='Salesforce CRM Content User')
    user_permissions_interaction_user = models.BooleanField(verbose_name='Force.com Flow User')
    user_permissions_support_user = models.BooleanField(verbose_name='Service Cloud User')
    forecast_enabled = models.BooleanField(verbose_name='Allow Forecasting', default=models.DEFAULTED_ON_CREATE)
    user_preferences_activity_reminders_popup = models.BooleanField(verbose_name='ActivityRemindersPopup')
    user_preferences_event_reminders_checkbox_default = models.BooleanField(verbose_name='EventRemindersCheckboxDefault')
    user_preferences_task_reminders_checkbox_default = models.BooleanField(verbose_name='TaskRemindersCheckboxDefault')
    user_preferences_reminder_sound_off = models.BooleanField(verbose_name='ReminderSoundOff')
    user_preferences_disable_all_feeds_email = models.BooleanField(verbose_name='DisableAllFeedsEmail')
    user_preferences_disable_followers_email = models.BooleanField(verbose_name='DisableFollowersEmail')
    user_preferences_disable_profile_post_email = models.BooleanField(verbose_name='DisableProfilePostEmail')
    user_preferences_disable_change_comment_email = models.BooleanField(verbose_name='DisableChangeCommentEmail')
    user_preferences_disable_later_comment_email = models.BooleanField(verbose_name='DisableLaterCommentEmail')
    user_preferences_dis_prof_post_comment_email = models.BooleanField(verbose_name='DisProfPostCommentEmail')
    user_preferences_apex_pages_developer_mode = models.BooleanField(verbose_name='ApexPagesDeveloperMode')
    user_preferences_hide_csnget_chatter_mobile_task = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask')
    user_preferences_disable_mentions_post_email = models.BooleanField(verbose_name='DisableMentionsPostEmail')
    user_preferences_dis_mentions_comment_email = models.BooleanField(verbose_name='DisMentionsCommentEmail')
    user_preferences_hide_csndesktop_task = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask')
    user_preferences_hide_chatter_onboarding_splash = models.BooleanField(verbose_name='HideChatterOnboardingSplash')
    user_preferences_hide_second_chatter_onboarding_splash = models.BooleanField(verbose_name='HideSecondChatterOnboardingSplash')
    user_preferences_dis_comment_after_like_email = models.BooleanField(verbose_name='DisCommentAfterLikeEmail')
    user_preferences_disable_like_email = models.BooleanField(verbose_name='DisableLikeEmail')
    user_preferences_sort_feed_by_comment = models.BooleanField(verbose_name='SortFeedByComment')
    user_preferences_disable_message_email = models.BooleanField(verbose_name='DisableMessageEmail')
    user_preferences_disable_bookmark_email = models.BooleanField(verbose_name='DisableBookmarkEmail')
    user_preferences_disable_share_post_email = models.BooleanField(verbose_name='DisableSharePostEmail')
    user_preferences_enable_auto_sub_for_feeds = models.BooleanField(verbose_name='EnableAutoSubForFeeds')
    user_preferences_disable_file_share_notifications_for_api = models.BooleanField(verbose_name='DisableFileShareNotificationsForApi')
    user_preferences_show_title_to_external_users = models.BooleanField(verbose_name='ShowTitleToExternalUsers')
    user_preferences_show_manager_to_external_users = models.BooleanField(verbose_name='ShowManagerToExternalUsers')
    user_preferences_show_email_to_external_users = models.BooleanField(verbose_name='ShowEmailToExternalUsers')
    user_preferences_show_work_phone_to_external_users = models.BooleanField(verbose_name='ShowWorkPhoneToExternalUsers')
    user_preferences_show_mobile_phone_to_external_users = models.BooleanField(verbose_name='ShowMobilePhoneToExternalUsers')
    user_preferences_show_fax_to_external_users = models.BooleanField(verbose_name='ShowFaxToExternalUsers')
    user_preferences_show_street_address_to_external_users = models.BooleanField(verbose_name='ShowStreetAddressToExternalUsers')
    user_preferences_show_city_to_external_users = models.BooleanField(verbose_name='ShowCityToExternalUsers')
    user_preferences_show_state_to_external_users = models.BooleanField(verbose_name='ShowStateToExternalUsers')
    user_preferences_show_postal_code_to_external_users = models.BooleanField(verbose_name='ShowPostalCodeToExternalUsers')
    user_preferences_show_country_to_external_users = models.BooleanField(verbose_name='ShowCountryToExternalUsers')
    user_preferences_show_profile_pic_to_guest_users = models.BooleanField(verbose_name='ShowProfilePicToGuestUsers')
    user_preferences_show_title_to_guest_users = models.BooleanField(verbose_name='ShowTitleToGuestUsers')
    user_preferences_show_city_to_guest_users = models.BooleanField(verbose_name='ShowCityToGuestUsers')
    user_preferences_show_state_to_guest_users = models.BooleanField(verbose_name='ShowStateToGuestUsers')
    user_preferences_show_postal_code_to_guest_users = models.BooleanField(verbose_name='ShowPostalCodeToGuestUsers')
    user_preferences_show_country_to_guest_users = models.BooleanField(verbose_name='ShowCountryToGuestUsers')
    user_preferences_hide_s1_browser_ui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI')
    user_preferences_disable_endorsement_email = models.BooleanField(verbose_name='DisableEndorsementEmail')
    user_preferences_path_assistant_collapsed = models.BooleanField(verbose_name='PathAssistantCollapsed')
    user_preferences_cache_diagnostics = models.BooleanField(verbose_name='CacheDiagnostics')
    user_preferences_show_email_to_guest_users = models.BooleanField(verbose_name='ShowEmailToGuestUsers')
    user_preferences_show_manager_to_guest_users = models.BooleanField(verbose_name='ShowManagerToGuestUsers')
    user_preferences_show_work_phone_to_guest_users = models.BooleanField(verbose_name='ShowWorkPhoneToGuestUsers')
    user_preferences_show_mobile_phone_to_guest_users = models.BooleanField(verbose_name='ShowMobilePhoneToGuestUsers')
    user_preferences_show_fax_to_guest_users = models.BooleanField(verbose_name='ShowFaxToGuestUsers')
    user_preferences_show_street_address_to_guest_users = models.BooleanField(verbose_name='ShowStreetAddressToGuestUsers')
    user_preferences_lightning_experience_preferred = models.BooleanField(verbose_name='LightningExperiencePreferred')
    user_preferences_preview_lightning = models.BooleanField(verbose_name='PreviewLightning')
    user_preferences_hide_end_user_onboarding_assistant_modal = models.BooleanField(verbose_name='HideEndUserOnboardingAssistantModal')
    user_preferences_hide_lightning_migration_modal = models.BooleanField(verbose_name='HideLightningMigrationModal')
    user_preferences_hide_sfx_welcome_mat = models.BooleanField(verbose_name='HideSfxWelcomeMat')
    user_preferences_hide_bigger_photo_callout = models.BooleanField(verbose_name='HideBiggerPhotoCallout')
    user_preferences_global_nav_bar_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavBarWTShown', verbose_name='GlobalNavBarWTShown')
    user_preferences_global_nav_grid_menu_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavGridMenuWTShown', verbose_name='GlobalNavGridMenuWTShown')
    user_preferences_create_lexapps_wtshown = models.BooleanField(db_column='UserPreferencesCreateLEXAppsWTShown', verbose_name='CreateLEXAppsWTShown')
    user_preferences_favorites_wtshown = models.BooleanField(db_column='UserPreferencesFavoritesWTShown', verbose_name='FavoritesWTShown')
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_center = models.ForeignKey(CallCenter, models.DO_NOTHING, blank=True, null=True)
    extension = models.CharField(max_length=40, blank=True, null=True)
    federation_identifier = models.CharField(max_length=512, verbose_name='SAML Federation ID', blank=True, null=True)
    about_me = models.TextField(blank=True, null=True)
    full_photo_url = models.URLField(verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    digest_frequency = models.CharField(max_length=40, verbose_name='Chatter Email Highlights Frequency', default=models.DEFAULTED_ON_CREATE, choices=[('D', 'Daily'), ('W', 'Weekly'), ('N', 'Never')])
    default_group_notification_frequency = models.CharField(max_length=40, verbose_name='Default Notification Frequency when Joining Groups', default=models.DEFAULTED_ON_CREATE, choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(verbose_name='Url for banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_banner_photo_url = models.URLField(verbose_name='Url for IOS banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_banner_photo_url = models.URLField(verbose_name='Url for Android banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_profile_photo_active = models.BooleanField(verbose_name='Has Profile Photo', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'User'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        # keyPrefix = '005'



class UserAppInfo(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    form_factor = models.CharField(max_length=255, choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large')])
    class Meta(models.Model.Meta):
        db_table = 'UserAppInfo'
        verbose_name = 'Last Used App'
        verbose_name_plural = 'Last Used App'
        # keyPrefix = '0Ds'



class UserAppMenuCustomization(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappmenucustomization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappmenucustomization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    application = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    sort_order = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuCustomization'
        verbose_name = 'UserAppMenuCustomization'
        verbose_name_plural = 'UserAppMenuCustomizations'
        # keyPrefix = '0Nw'



class UserAppMenuCustomizationShare(models.Model):
    parent = models.ForeignKey(UserAppMenuCustomization, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuCustomizationShare'
        verbose_name = 'UserAppMenuCustomization Share'
        verbose_name_plural = 'UserAppMenuCustomization Share'
        # keyPrefix = 'None'



class UserAppMenuItem(models.Model):
    app_menu_item_id = models.CharField(max_length=255, verbose_name='AppMenuItem ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    application_id = models.CharField(max_length=18, verbose_name='Application ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    label = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=250, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True, null=True)
    logo_url = models.URLField(verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    info_url = models.URLField(verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_using_admin_authorization = models.BooleanField(verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuItem'
        verbose_name = 'Application'
        verbose_name_plural = 'Applications'
        # keyPrefix = '07p'



class UserEntityAccess(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_mergeable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_updatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_activateable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_readable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_editable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_deletable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_undeletable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_fls_updatable = models.BooleanField(verbose_name='Is Field-level Security Updatable?', sf_read_only=models.READ_ONLY, default=False)
    entity_definition_id = models.CharField(max_length=150, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserEntityAccess'
        verbose_name = 'User Entity Access'
        verbose_name_plural = 'User Entity Access'
        # keyPrefix = '07u'



class UserFeed(models.Model):
    parent = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_parent_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserFeed'
        verbose_name = 'User Feed'
        verbose_name_plural = 'User Feed'
        # keyPrefix = 'None'



class UserFieldAccess(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_updatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_accessible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    entity_definition_id = models.CharField(max_length=150, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(max_length=150, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserFieldAccess'
        verbose_name = 'User Field Access'
        verbose_name_plural = 'User Field Access'
        # keyPrefix = '4fp'



class UserLicense(models.Model):
    license_definition_key = models.CharField(max_length=40, verbose_name='License Def. ID', sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserLicense'
        verbose_name = 'User License'
        verbose_name_plural = 'User Licenses'
        # keyPrefix = '100'



class UserListView(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    list_view = models.ForeignKey(ListView, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTrigger', None), ('AppIpRange', None), ('AppMenuItem', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('Attachment', None), ('AuraDefinitionBundle', None), ('AuthProvider', None), ('AuthSession', None), ('BackgroundOperation', None), ('BrandTemplate', None), ('BusinessHours', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Community', None), ('ConnectedApplication', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentNote', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CountryMapping__mdt', None), ('CronTrigger', None), ('CustomEntityDefinition', None), ('CustomerBankAccount__c', None), ('CustomIndex', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('Dashboard', None), ('DashboardComponent', None), ('DebugLevel', None), ('DegreeCourse__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EmailBrand', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EntityHistory', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FlexiPage', None), ('FlowDefinition', None), ('FlowInterview', None), ('Folder', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('Group', None), ('Holiday', None), ('IBANIso__mdt', None), ('Idea', None), ('InteractionDefinitionVersion', None), ('InteractionLayoutDetail', None), ('Invoice__c', None), ('InvoiceLineItem__c', None), ('IpWhitelist', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('ListPoolUsage', None), ('ListView', None), ('LocalizedValue', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('Mandate__c', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MobileConfig', None), ('MobileDevice', None), ('NamedCredential', None), ('Note', None), ('OauthConsumer', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('Payment__c', None), ('PendingChange', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PlatformCachePartition', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessTimeQueue', None), ('Product2', None), ('Profile', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('Rabatt__c', None), ('RateLimitingNotification', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('Scontrol', None), ('SettingsTemplate', None), ('SocialPersona', None), ('SocialPost', None), ('SoftphoneLayout', None), ('Solution', None), ('StaticResource', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('User', None), ('UserAppMenuItem', None), ('UserLicense', None), ('UserProvAccount', None), ('UserRole', None), ('VerificationHistory', None), ('Vote', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkThanks', None)], blank=True, null=True)
    last_viewed_chart = models.CharField(max_length=255, verbose_name='List View Chart ID', choices=[('AccountsByIndustry', None), ('CampaignsByNumberOfResponses', None), ('CampaignsByStatus', None), ('CampaignsByType', None), ('ContactsByAccount', None), ('ContactsByLeadSource', None), ('LeadsBySource', None), ('PipelineByAccount', None), ('PipelineByFiscalPeriod', None), ('PipelineByStage', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserListView'
        verbose_name = 'User List View'
        verbose_name_plural = 'User List View'
        # keyPrefix = '0Na'



class UserListViewCriterion(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistviewcriterion_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistviewcriterion_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user_list_view = models.ForeignKey(UserListView, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sort_order = models.IntegerField()
    column_name = models.CharField(max_length=40)
    operation = models.CharField(max_length=255, choices=[('equals', 'equals'), ('startsWith', 'starts with'), ('contains', 'contains'), ('rangeInclusive', 'range inclusive'), ('includes', 'includes')])
    value = models.CharField(max_length=85, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserListViewCriterion'
        verbose_name = 'User List View Criteria'
        verbose_name_plural = 'User List View Criteria'
        # keyPrefix = '0JU'



class UserLogin(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userlogin_user_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_frozen = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    is_password_locked = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlogin_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserLogin'
        verbose_name = 'User Login'
        verbose_name_plural = 'User Login'
        # keyPrefix = '0Yw'



class UserPackageLicense(models.Model):
    package_license = models.ForeignKey(PackageLicense, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPackageLicense'
        verbose_name = 'User Package License'
        verbose_name_plural = 'User Package License'
        # keyPrefix = '051'



class UserPreference(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    preference = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='93', choices=[('57', 'Event Reminder Default Lead Time'), ('58', 'Task Reminder Default Time'), ('91', 'Prevent Logs on Load'), ('92', 'Autocomplete Apex After Key Press'), ('93', 'Visualforce Viewstate Inspector'), ('94', 'Forecasting Displayed Type'), ('96', 'Editor Theme'), ('97', 'Editor Font Size'), ('98', 'Pinned Folders'), ('99', 'Enable Query Plan'), ('100', 'Enable New Open Dialog'), ('101', 'Email Transport Type'), ('102', 'Pinned Wave Folders')])
    value = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPreference'
        verbose_name = 'User Preference'
        verbose_name_plural = 'User Preferences'
        # keyPrefix = '03u'



class UserProvAccount(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccount_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccount_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccount_salesforceuser_set', blank=True, null=True)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    external_username = models.CharField(max_length=150, blank=True, null=True)
    external_email = models.CharField(max_length=150, blank=True, null=True)
    external_first_name = models.CharField(max_length=150, blank=True, null=True)
    external_last_name = models.CharField(max_length=150, blank=True, null=True)
    link_state = models.CharField(max_length=255, choices=[('Linked', 'Linked'), ('Duplicate', 'Duplicate'), ('Orphaned', 'Orphaned'), ('Ignored', 'Ignored')])
    status = models.CharField(max_length=255, choices=[('Active', 'Active'), ('Deactivated', 'Deactivated'), ('Deleted', 'Deleted')])
    deleted_date = models.DateTimeField(blank=True, null=True)
    is_known_link = models.BooleanField(verbose_name='Manual Override', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'UserProvAccount'
        verbose_name = 'User Provisioning Account'
        verbose_name_plural = 'User Provisioning Accounts'
        # keyPrefix = '0Ni'



class UserProvAccountStaging(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccountstaging_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccountstaging_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccountstaging_salesforceuser_set', blank=True, null=True)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    external_username = models.CharField(max_length=150, blank=True, null=True)
    external_email = models.CharField(max_length=150, blank=True, null=True)
    external_first_name = models.CharField(max_length=150, blank=True, null=True)
    external_last_name = models.CharField(max_length=150, blank=True, null=True)
    link_state = models.CharField(max_length=255, choices=[('Linked', 'Linked'), ('Duplicate', 'Duplicate'), ('Orphaned', 'Orphaned'), ('Ignored', 'Ignored')])
    status = models.CharField(max_length=255, choices=[('Active', 'Active'), ('Deactivated', 'Deactivated'), ('Deleted', 'Deleted')])
    class Meta(models.Model.Meta):
        db_table = 'UserProvAccountStaging'
        verbose_name = 'User Provisioning Account Staging'
        verbose_name_plural = 'User Provisioning Account Stagings'
        # keyPrefix = '0HY'



class UserProvMockTarget(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovmocktarget_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovmocktarget_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    external_username = models.CharField(max_length=150, blank=True, null=True)
    external_email = models.CharField(max_length=150, blank=True, null=True)
    external_first_name = models.CharField(max_length=150, blank=True, null=True)
    external_last_name = models.CharField(max_length=150, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvMockTarget'
        verbose_name = 'User Provisioning Mock Target'
        verbose_name_plural = 'User Provisioning Mock Targets'
        # keyPrefix = '0HX'



class UserProvisioningConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    enabled = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    approval_required = models.TextField(blank=True, null=True)
    user_account_mapping = models.TextField(blank=True, null=True)
    enabled_operations = models.TextField(blank=True, null=True)
    on_update_attributes = models.TextField(blank=True, null=True)
    last_recon_date_time = models.DateTimeField(verbose_name='Last Recon Date', blank=True, null=True)
    named_credential = models.ForeignKey(NamedCredential, models.DO_NOTHING, blank=True, null=True)
    recon_filter = models.CharField(max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningConfig'
        verbose_name = 'User Provisioning Config'
        verbose_name_plural = 'User Provisioning Configs'
        # keyPrefix = '0Je'



class UserProvisioningLog(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioninglog_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioninglog_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user_provisioning_request = models.ForeignKey('UserProvisioningRequest', models.DO_NOTHING, blank=True, null=True)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    external_username = models.CharField(max_length=150, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioninglog_user_set', blank=True, null=True)
    status = models.CharField(max_length=150, blank=True, null=True)
    details = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningLog'
        verbose_name = 'User Provisioning Log'
        verbose_name_plural = 'User Provisioning Logs'
        # keyPrefix = '0Hs'



class UserProvisioningRequest(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningrequest_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningrequest_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningrequest_salesforceuser_set', blank=True, null=True)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    app_name = models.CharField(max_length=150, blank=True, null=True)
    state = models.CharField(max_length=255, choices=[('New', 'New'), ('Requested', 'Requested'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Collecting', 'Collecting'), ('Collected', 'Collected'), ('Analyzing', 'Analyzing'), ('Analyzed', 'Analyzed'), ('Committing', 'Committing'), ('Retried', 'Retried'), ('Manually Completed', 'Manually Completed')])
    operation = models.CharField(max_length=255, choices=[('Create', 'Create'), ('Read', 'Read'), ('Update', 'Update'), ('Deactivate', 'Deactivate'), ('Activate', 'Activate'), ('Freeze', 'Freeze'), ('Unfreeze', 'Unfreeze'), ('Reconcile', 'Reconcile'), ('Linking', 'Linking')])
    schedule_date = models.DateTimeField(verbose_name='Scheduled Provisioning Time', blank=True, null=True)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)
    user_prov_config = models.ForeignKey(UserProvisioningConfig, models.DO_NOTHING, blank=True, null=True)
    user_prov_account = models.ForeignKey(UserProvAccount, models.DO_NOTHING, blank=True, null=True)
    approval_status = models.CharField(max_length=255, choices=[('Required', 'Required'), ('NotRequired', 'Not Required'), ('Approved', 'Approved'), ('Denied', 'Denied')])
    manager = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningrequest_manager_set', blank=True, null=True)
    retry_count = models.IntegerField(blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningRequest'
        verbose_name = 'User Provisioning Request'
        verbose_name_plural = 'User Provisioning Requests'
        # keyPrefix = '0HP'



class UserProvisioningRequestShare(models.Model):
    parent = models.ForeignKey(UserProvisioningRequest, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningRequestShare'
        verbose_name = 'User Provisioning Request Share'
        verbose_name_plural = 'User Provisioning Request Share'
        # keyPrefix = 'None'



class UserRecordAccess(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    record_id = models.CharField(max_length=40, verbose_name='Record ID', sf_read_only=models.READ_ONLY)
    has_read_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_edit_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_delete_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_transfer_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_all_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    max_access_level = models.CharField(max_length=40, verbose_name='Maximum Access Level', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('Delete', 'Delete'), ('Transfer', 'Read/Write/Transfer'), ('All', 'Owner')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRecordAccess'
        verbose_name = 'User Record Access'
        verbose_name_plural = 'User Record Access'
        # keyPrefix = 'None'



class UserRole(models.Model):
    name = models.CharField(max_length=80)
    parent_role = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    rollup_description = models.CharField(max_length=80, verbose_name='Description', blank=True, null=True)
    opportunity_access_for_account_owner = models.CharField(max_length=40, verbose_name='Opportunity Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    case_access_for_account_owner = models.CharField(max_length=40, verbose_name='Case Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    contact_access_for_account_owner = models.CharField(max_length=40, verbose_name='Contact Access Level for Account Owner', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    forecast_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_forecastuser_set', blank=True, null=True)
    may_forecast_manager_share = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, blank=True, null=True)
    portal_account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    portal_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('None', 'None'), ('CustomerPortal', 'Customer Portal'), ('Partner', 'Partner Portal')], blank=True, null=True)
    portal_account_owner = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_portalaccountowner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRole'
        verbose_name = 'Role'
        verbose_name_plural = 'Role'
        # keyPrefix = '00E'



class UserShare(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='usershare_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    user_access_level = models.CharField(max_length=40, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='usershare_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserShare'
        verbose_name = 'User Share'
        verbose_name_plural = 'User Share'
        # keyPrefix = '0N2'



class VerificationHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    event_group = models.IntegerField(verbose_name='Verification Attempt', sf_read_only=models.READ_ONLY)
    verification_time = models.DateTimeField(verbose_name='Time', sf_read_only=models.READ_ONLY)
    verification_method = models.CharField(max_length=255, verbose_name='Method', sf_read_only=models.READ_ONLY, choices=[('Totp', 'One-time password'), ('Sms', 'Text message'), ('Email', 'Email message'), ('SalesforceAuthenticator', 'Salesforce Authenticator'), ('TempCode', 'Temporary code'), ('U2F', 'U2F security key'), ('LL', 'Lightning Login'), ('EnableLL', 'Lightning Login')], blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_user_set', sf_read_only=models.READ_ONLY)
    activity = models.CharField(max_length=255, verbose_name='User Activity', sf_read_only=models.READ_ONLY, choices=[('Registration', 'Register for verification'), ('ExtraVerification', 'Perform an operation that requires extra verification'), ('Login', 'Log in to Salesforce'), ('AccessReports', 'Access reports'), ('ExportPrintReports', 'Export and print reports'), ('ConnectedApp', 'Access a connected app'), ('Apex', 'Apex-defined activity'), ('TempCode', 'Generate a temporary verification code'), ('EnableLL', 'Enroll in Lightning Login'), ('ConnectTotp', 'Connect a One-Time Password Generator'), ('ConnectToopher', 'Connect Salesforce Authenticator'), ('ConnectU2F', 'Connect a U2F Security Key'), ('ChangeEmail', 'Change your email address')])
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Initiated', 'Initiated'), ('InProgress', 'User challenged; waiting for response'), ('Succeeded', 'Succeeded'), ('Denied', 'Access denied'), ('RecoverableError', 'Failed: Recoverable error'), ('FailedGeneralError', 'Failed: General error'), ('FailedInvalidCode', 'Failed: Invalid verification code'), ('FailedTooManyAttempts', 'Failed: Too many attempts'), ('AutomatedSuccess', 'Succeeded: Automated response'), ('ReportedDenied', 'Access denied: Flagged by user')])
    login_history = models.ForeignKey(LoginHistory, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    login_geo = models.ForeignKey(LoginGeo, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    remarks = models.CharField(max_length=255, verbose_name='Activity Message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    resource = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    policy = models.CharField(max_length=255, verbose_name='Triggered By', sf_read_only=models.READ_ONLY, choices=[('HighAssurance', 'High assurance session required'), ('PageAccess', 'Access a protected page'), ('ProfilePolicy', 'Profile session level policy'), ('TwoFactorAuthentication', 'Two-factor authentication required'), ('DeviceActivation', 'Activation'), ('ExtraVerification', 'Extra Verification'), ('LightningLogin', 'Lightning Login'), ('EnableLightningLogin', 'Enroll in Lightning Login'), ('CustomApex', 'Apex method')])
    class Meta(models.Model.Meta):
        db_table = 'VerificationHistory'
        verbose_name = 'Identity Verification History'
        verbose_name_plural = 'Identity Verification History'
        # keyPrefix = '0Qt'



class Vote(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Idea, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Idea, IdeaComment, Solution] Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Vote Type', choices=[('Up', None), ('Down', None), ('1', None), ('2', None), ('3', None), ('4', None), ('5', None)])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='vote_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='vote_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Vote'
        verbose_name = 'Vote'
        verbose_name_plural = 'Votes'
        # keyPrefix = '083'



class WebLink(models.Model):
    page_or_sobject_type = models.CharField(max_length=40, verbose_name='Page Or sObject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Activity', None), ('Asset', None), ('AssetRelationship', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Contact', None), ('ContentVersion', None), ('Contract', None), ('CountryMapping__mdt', None), ('CustomerBankAccount__c', None), ('CustomPageItem', None), ('DashboardComponent', None), ('DegreeCourse__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Event', None), ('GoCardlessError__c', None), ('GoCardlessEvent__c', None), ('IBANIso__mdt', None), ('Idea', None), ('Invoice__c', None), ('InvoiceLineItem__c', None), ('Lead', None), ('Macro', None), ('Mandate__c', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Payment__c', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('Rabatt__c', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('Task', None), ('User', None), ('UserProvisioningRequest', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)])
    name = models.CharField(max_length=240)
    is_protected = models.BooleanField(verbose_name='Protected Component', default=models.DEFAULTED_ON_CREATE)
    url = models.TextField(verbose_name='URL', blank=True, null=True)
    encoding_key = models.CharField(max_length=40, verbose_name='Link Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    link_type = models.CharField(max_length=40, verbose_name='Content Source', choices=[('url', 'URL'), ('sControl', 'Custom S-Control'), ('javascript', 'OnClick JavaScript'), ('page', 'Visualforce Page'), ('flow', 'Flow Definition')])
    open_type = models.CharField(max_length=40, verbose_name='Behavior', choices=[('newWindow', 'Display in new window'), ('sidebar', 'Display in existing window with sidebar'), ('noSidebar', 'Display in existing window without sidebar'), ('replace', 'Display in existing window without sidebar or header'), ('onClickJavaScript', 'Execute JavaScript')])
    height = models.IntegerField(verbose_name='Height (in pixels)', blank=True, null=True)
    width = models.IntegerField(verbose_name='Width (in pixels)', blank=True, null=True)
    shows_location = models.BooleanField(verbose_name='Show Address Bar', default=models.DEFAULTED_ON_CREATE)
    has_scrollbars = models.BooleanField(verbose_name='Show Scrollbars', default=models.DEFAULTED_ON_CREATE)
    has_toolbar = models.BooleanField(verbose_name='Show Toolbars', default=models.DEFAULTED_ON_CREATE)
    has_menubar = models.BooleanField(verbose_name='Show Menu Bar', default=models.DEFAULTED_ON_CREATE)
    shows_status = models.BooleanField(verbose_name='Show Status Bar', default=models.DEFAULTED_ON_CREATE)
    is_resizable = models.BooleanField(verbose_name='Resizeable', default=models.DEFAULTED_ON_CREATE)
    position = models.CharField(max_length=40, verbose_name='Window Position', choices=[('fullScreen', None), ('none', None), ('topLeft', None)], blank=True, null=True)
    scontrol = models.ForeignKey(ApexPage, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [ApexPage, Scontrol]
    master_label = models.CharField(max_length=240, verbose_name='Label', blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    display_type = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('L', 'Detail Page Link'), ('B', 'Detail Page Button'), ('M', 'List Button')])
    require_row_selection = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='weblink_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='weblink_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'WebLink'
        verbose_name = 'Custom Button or Link'
        verbose_name_plural = 'Custom Buttons or Links'
        # keyPrefix = '00b'



class WebLinkLocalization(models.Model):
    web_link = models.ForeignKey(WebLink, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    language = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    value = models.CharField(max_length=1000, verbose_name='Translation Text')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='weblinklocalization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='weblinklocalization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'WebLinkLocalization'
        verbose_name = 'Custom Link Localization'
        verbose_name_plural = 'Custom Link Localization'
        # keyPrefix = 'None'



class WorkAccess(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workaccess_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workaccess_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('WorkBadgeDefinition', models.DO_NOTHING)  # Master Detail Relationship *
    access_type = models.CharField(max_length=255, verbose_name='Work Access type', choices=[('Give', 'Give')])
    class Meta(models.Model.Meta):
        db_table = 'WorkAccess'
        verbose_name = 'Access'
        verbose_name_plural = 'Access'
        # keyPrefix = '0W5'



class WorkAccessShare(models.Model):
    parent = models.ForeignKey(WorkAccess, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkAccessShare'
        verbose_name = 'Access Share'
        verbose_name_plural = 'Access Share'
        # keyPrefix = 'None'



class WorkBadge(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadge_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadge_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    source = models.ForeignKey('WorkThanks', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    definition = models.ForeignKey('WorkBadgeDefinition', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    recipient = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadge_recipient_set', sf_read_only=models.NOT_UPDATEABLE)
    giver = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadge_giver_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    image_url = models.URLField(verbose_name='Image', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    message = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadge'
        verbose_name = 'Badge Received'
        verbose_name_plural = 'Badges Received'
        # keyPrefix = '0W2'



class WorkBadgeDefinition(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Badge Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadgedefinition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadgedefinition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_company_wide = models.BooleanField(verbose_name='Company Badge', default=models.DEFAULTED_ON_CREATE)
    description = models.TextField()
    image_url = models.URLField(verbose_name='Image URL')
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    limit_number = models.IntegerField(blank=True, null=True)
    is_limit_per_user = models.BooleanField(verbose_name='Limit Per User', default=models.DEFAULTED_ON_CREATE)
    limit_start_date = models.DateField(blank=True, null=True)
    given_badge_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reward_badge = models.BooleanField(verbose_name='Reward Badge', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinition'
        verbose_name = 'Badge'
        verbose_name_plural = 'Badges'
        # keyPrefix = '0W1'



class WorkBadgeDefinitionFeed(models.Model):
    parent = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadgedefinitionfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadgedefinitionfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionFeed'
        verbose_name = 'Badge Feed'
        verbose_name_plural = 'Badge Feed'
        # keyPrefix = 'None'



class WorkBadgeDefinitionHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_badge_definition = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('Name', 'Badge Name'), ('IsCompanyWide', 'Company Badge'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('ImageUrl', 'Image URL'), ('LimitNumber', 'Limit Number'), ('IsLimitPerUser', 'Limit Per User'), ('LimitStartDate', 'Limit Start Date'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Owner', 'Owner Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionHistory'
        verbose_name = 'Badge History'
        verbose_name_plural = 'Badge History'
        # keyPrefix = 'None'



class WorkBadgeDefinitionShare(models.Model):
    parent = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionShare'
        verbose_name = 'Badge Share'
        verbose_name_plural = 'Badge Share'
        # keyPrefix = 'None'



class WorkThanks(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workthanks_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workthanks_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    giver = models.ForeignKey(User, models.DO_NOTHING, related_name='workthanks_giver_set', sf_read_only=models.NOT_UPDATEABLE)
    message = models.TextField(sf_read_only=models.NOT_UPDATEABLE)
    feed_item = models.ForeignKey(FeedItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkThanks'
        verbose_name = 'Thanks'
        verbose_name_plural = 'Thanks'
        # keyPrefix = '0W0'



class WorkThanksShare(models.Model):
    parent = models.ForeignKey(WorkThanks, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkThanksShare'
        verbose_name = 'Thanks Share'
        verbose_name_plural = 'Thanks Share'
        # keyPrefix = 'None'



class DlrsDeclarativeLookupRollupSummaries(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrsdeclarativelookuprollupsummaries_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrsdeclarativelookuprollupsummaries_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    dlrs_calculate_job_scope_size = models.DecimalField(db_column='dlrs__CalculateJobScopeSize__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Calculate Job Scope Size', default=models.DEFAULTED_ON_CREATE) 
    dlrs_hide_manage_lookup_rollup_summaries_info = models.BooleanField(db_column='dlrs__HideManageLookupRollupSummariesInfo__c', custom=True, verbose_name='Hide Manage Lookup Rollup Summaries Info', default=models.DEFAULTED_ON_CREATE) 
    dlrs_scheduled_job_scope_size = models.DecimalField(db_column='dlrs__ScheduledJobScopeSize__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Scheduled Job Scope Size', default=models.DEFAULTED_ON_CREATE) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__DeclarativeLookupRollupSummaries__c'
        verbose_name = 'Declarative Lookup Rollup Summaries'
        verbose_name_plural = 'Declarative Lookup Rollup Summaries'
        # keyPrefix = 'a01'



class DlrsLookupChildAreallyReallyReallyBigBigName(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Child Big Name Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchildareallyreallyreallybigbigname_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchildareallyreallyreallybigbigname_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    dlrs_amount = models.DecimalField(db_column='dlrs__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', blank=True, null=True) 
    dlrs_lookup_parent = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent__c', custom=True, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupChildAReallyReallyReallyBigBigName__c'
        verbose_name = 'Lookup Child Big'
        verbose_name_plural = 'Lookup Child Big'
        # keyPrefix = 'a02'



class DlrsLookupChildShare(models.Model):
    parent = models.ForeignKey('DlrsLookupChild', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupChild__Share'
        verbose_name = 'Share: Lookup Child'
        verbose_name_plural = 'Share: Lookup Child'
        # keyPrefix = 'None'



class DlrsLookupChild(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Child Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchild_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchild_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    dlrs_amount = models.DecimalField(db_column='dlrs__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', blank=True, null=True) 
    dlrs_color = models.CharField(db_column='dlrs__Color__c', custom=True, max_length=255, verbose_name='Color', choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Green', 'Green'), ('Blue', 'Blue')], blank=True, null=True) 
    dlrs_description2 = models.CharField(db_column='dlrs__Description2__c', custom=True, max_length=255, verbose_name='Description 2', blank=True, null=True) 
    dlrs_description = models.CharField(db_column='dlrs__Description__c', custom=True, max_length=255, verbose_name='Description', blank=True, null=True) 
    dlrs_lookup_parent2 = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent2__c', custom=True, related_name='dlrslookupchild_dlrslookupparent2_set', blank=True, null=True) 
    dlrs_lookup_parent = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent__c', custom=True, related_name='dlrslookupchild_dlrslookupparent_set', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupChild__c'
        verbose_name = 'Lookup Child'
        verbose_name_plural = 'Lookup Children'
        # keyPrefix = 'a03'



class DlrsLookupParentShare(models.Model):
    parent = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupParent__Share'
        verbose_name = 'Share: Lookup Parent'
        verbose_name_plural = 'Share: Lookup Parent'
        # keyPrefix = 'None'



class DlrsLookupParent(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Parent Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupparent_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupparent_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    dlrs_colours = models.CharField(db_column='dlrs__Colours__c', custom=True, max_length=4099, verbose_name='Colours', choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Green', 'Green'), ('Blue', 'Blue')], blank=True, null=True) 
    dlrs_descriptions2 = models.CharField(db_column='dlrs__Descriptions2__c', custom=True, max_length=255, verbose_name='Descriptions 2', blank=True, null=True) 
    dlrs_descriptions = models.CharField(db_column='dlrs__Descriptions__c', custom=True, max_length=255, verbose_name='Descriptions', blank=True, null=True) 
    dlrs_total2 = models.DecimalField(db_column='dlrs__Total2__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total 2', blank=True, null=True) 
    dlrs_total = models.DecimalField(db_column='dlrs__Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupParent__c'
        verbose_name = 'Lookup Parent'
        verbose_name_plural = 'Lookup Parents'
        # keyPrefix = 'a04'



class DlrsLookupRollupCalculateJob(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Rollup Calculate Job Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupcalculatejob_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupcalculatejob_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_lookup_rollup_summary_id = models.CharField(db_column='dlrs__LookupRollupSummaryId__c', custom=True, max_length=80, verbose_name='Lookup Rollup Summary Id') 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupCalculateJob__c'
        verbose_name = 'Lookup Rollup Calculate Job'
        verbose_name_plural = 'Lookup Rollup Calculate Jobs'
        # keyPrefix = 'a05'



class DlrsLookupRollupSummary2Mdt(models.Model):
    developer_name = models.CharField(max_length=40, verbose_name='Custom Metadata Record Name', sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=40, verbose_name='Label', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_active = models.BooleanField(db_column='dlrs__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=False, help_text='For Realtime rollups can only be set when the Child Apex Trigger has been deployed.') 
    dlrs_aggregate_all_rows = models.BooleanField(db_column='dlrs__AggregateAllRows__c', custom=True, verbose_name='Aggregate All Rows', sf_read_only=models.READ_ONLY, default=False, help_text='Includes child records that have been archived by the system and/or placed in the recycle bin.') 
    dlrs_aggregate_operation = models.CharField(db_column='dlrs__AggregateOperation__c', custom=True, max_length=32, verbose_name='Aggregate Operation', sf_read_only=models.READ_ONLY, help_text='Rollup operation.', blank=True, null=True) 
    dlrs_aggregate_result_field = models.CharField(db_column='dlrs__AggregateResultField__c', custom=True, max_length=80, verbose_name='Aggregate Result Field', sf_read_only=models.READ_ONLY, help_text='API name of the field that will store the result of the rollup on the Parent Object, e.g. AnnualRevenue') 
    dlrs_calculation_mode = models.CharField(db_column='dlrs__CalculationMode__c', custom=True, max_length=32, verbose_name='Calculation Mode', sf_read_only=models.READ_ONLY, help_text='Realtime and Schedule modes require an Apex Trigger to be deployed for the Child Object. Click Manage Child Trigger button to deploy.', blank=True, null=True) 
    dlrs_calculation_sharing_mode = models.CharField(db_column='dlrs__CalculationSharingMode__c', custom=True, max_length=32, verbose_name='Calculation Sharing Mode', sf_read_only=models.READ_ONLY, help_text='Determines if the Sharing Rules defined on the Child Object are considered when calculating the rollup. Default is User.', blank=True, null=True) 
    dlrs_child_object = models.CharField(db_column='dlrs__ChildObject__c', custom=True, max_length=80, verbose_name='Child Object', sf_read_only=models.READ_ONLY, help_text='API name of the Child Object, e.g. Opportunity') 
    dlrs_concatenate_delimiter = models.CharField(db_column='dlrs__ConcatenateDelimiter__c', custom=True, max_length=32, verbose_name='Concatenate Delimiter', sf_read_only=models.READ_ONLY, help_text='Enter the character or characters to delimit values in the Field to Aggregate when rolling up text values into the Aggregate Result Field, enter BR() for new line. Only applies when using Concatenate operation.', blank=True, null=True) 
    dlrs_description = models.TextField(db_column='dlrs__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_field_to_aggregate = models.CharField(db_column='dlrs__FieldToAggregate__c', custom=True, max_length=80, verbose_name='Field to Aggregate', sf_read_only=models.READ_ONLY, help_text='API name of the field on the Child Object that contains the value to rollup, e.g. Amount') 
    dlrs_field_to_order_by = models.CharField(db_column='dlrs__FieldToOrderBy__c', custom=True, max_length=255, verbose_name='Field to Order By', sf_read_only=models.READ_ONLY, help_text='Only applicable when using the Concatenate, Concatenate Distinct, Last and First aggregate operations. Supports multiple fields (comma separated) with optional ASC/DESC and/or NULLS FIRST/LAST.', blank=True, null=True) 
    dlrs_parent_object = models.CharField(db_column='dlrs__ParentObject__c', custom=True, max_length=80, verbose_name='Parent Object', sf_read_only=models.READ_ONLY, help_text='API name of the Parent Object, e.g. Account') 
    dlrs_relationship_criteria_fields = models.TextField(db_column='dlrs__RelationshipCriteriaFields__c', custom=True, verbose_name='Relationship Criteria Fields', sf_read_only=models.READ_ONLY, help_text="If you have specified a relationship criteria, you must confirm the fields referenced by it here on separate lines, for example for criteria StageName = 'Won' list StageName in this field. You do not need to specify the Field to Aggregate field however.", blank=True, null=True) 
    dlrs_relationship_criteria = models.CharField(db_column='dlrs__RelationshipCriteria__c', custom=True, max_length=255, verbose_name='Relationship Criteria', sf_read_only=models.READ_ONLY, help_text='SOQL WHERE clause applied when querying Child Object records, e.g. Amount > 200', blank=True, null=True) 
    dlrs_relationship_field = models.CharField(db_column='dlrs__RelationshipField__c', custom=True, max_length=80, verbose_name='Relationship Field', sf_read_only=models.READ_ONLY, help_text='API name of the Lookup field on the Child Object relating to the Parent Object, e.g. AccountId') 
    dlrs_row_limit = models.DecimalField(db_column='dlrs__RowLimit__c', custom=True, max_digits=5, decimal_places=0, verbose_name='Row Limit', sf_read_only=models.READ_ONLY, help_text='Limits the number of rows used in the rollup. Applies only to the Last and Concatenate operators.', blank=True, null=True) 
    dlrs_test_code_see_all_data = models.BooleanField(db_column='dlrs__TestCodeSeeAllData__c', custom=True, verbose_name='Test Code See All Data', sf_read_only=models.READ_ONLY, default=False, help_text='Only use this option as a last resort to get the generated test or custom test code working. It is generally considered bad practice to make your test dependent on org data. Always try to create test data in the test code if possible.') 
    dlrs_test_code = models.TextField(db_column='dlrs__TestCode__c', custom=True, verbose_name='Test Code', sf_read_only=models.READ_ONLY, help_text='This tool utilises a dynamically generated Apex Trigger and by default a generated Apex Test. Use this field if instructed by a developer to replace the generated test code. See Wiki on GitHub.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummary2__mdt'
        verbose_name = 'Lookup Rollup Summary'
        verbose_name_plural = 'Lookup Rollup Summaries'
        # keyPrefix = 'm00'



class DlrsLookupRollupSummaryLog(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Rollup Summary Log Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummarylog_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummarylog_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_error_message = models.TextField(db_column='dlrs__ErrorMessage__c', custom=True, verbose_name='Error Message', blank=True, null=True) 
    dlrs_parent_id = models.CharField(db_column='dlrs__ParentId__c', custom=True, max_length=18, verbose_name='Parent Id') 
    dlrs_parent_object = models.CharField(db_column='dlrs__ParentObject__c', custom=True, max_length=60, verbose_name='Parent Object', blank=True, null=True) 
    dlrs_parent_record = models.CharField(db_column='dlrs__ParentRecord__c', custom=True, max_length=1300, verbose_name='Parent Record', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummaryLog__c'
        verbose_name = 'Lookup Rollup Summary Log'
        verbose_name_plural = 'Lookup Rollup Summary Logs'
        # keyPrefix = 'a06'



class DlrsLookupRollupSummaryScheduleItems(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Rollup Summary Schedule Item Id', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummaryscheduleitems_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummaryscheduleitems_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_lookup_rollup_summary = models.ForeignKey('DlrsLookupRollupSummary', models.DO_NOTHING, db_column='dlrs__LookupRollupSummary__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    dlrs_lookup_rollup_summary2 = models.CharField(db_column='dlrs__LookupRollupSummary2__c', custom=True, max_length=80, verbose_name='Lookup Rollup Summary 2', blank=True, null=True) 
    dlrs_parent_id = models.CharField(db_column='dlrs__ParentId__c', custom=True, max_length=18, verbose_name='Parent Id', blank=True, null=True) 
    dlrs_parent_record = models.CharField(db_column='dlrs__ParentRecord__c', custom=True, max_length=1300, verbose_name='Parent Record', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_qualified_parent_id = models.CharField(db_column='dlrs__QualifiedParentID__c', custom=True, max_length=40, verbose_name='Qualified Parent ID') 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummaryScheduleItems__c'
        verbose_name = 'Lookup Rollup Summary Schedule Item'
        verbose_name_plural = 'Lookup Rollup Summary Schedule Items'
        # keyPrefix = 'a07'



class DlrsLookupRollupSummary(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Rollup Summary Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummary_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummary_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_active = models.BooleanField(db_column='dlrs__Active__c', custom=True, verbose_name='Active', default=models.DEFAULTED_ON_CREATE, help_text='For Realtime rollups can only be set when the Child Apex Trigger has been deployed.') 
    dlrs_aggregate_all_rows = models.BooleanField(db_column='dlrs__AggregateAllRows__c', custom=True, verbose_name='Aggregate All Rows', default=models.DEFAULTED_ON_CREATE, help_text='Includes child records that have been archived by the system and/or placed in the recycle bin.') 
    dlrs_aggregate_operation = models.CharField(db_column='dlrs__AggregateOperation__c', custom=True, max_length=255, verbose_name='Aggregate Operation', default=models.DEFAULTED_ON_CREATE, help_text='Rollup operation.', choices=[('Sum', 'Sum'), ('Max', 'Max'), ('Min', 'Min'), ('Avg', 'Avg'), ('Count', 'Count'), ('Count Distinct', 'Count Distinct'), ('Concatenate', 'Concatenate'), ('Concatenate Distinct', 'Concatenate Distinct'), ('First', 'First'), ('Last', 'Last')], blank=True, null=True) 
    dlrs_aggregate_result_field = models.CharField(db_column='dlrs__AggregateResultField__c', custom=True, max_length=80, verbose_name='Aggregate Result Field', help_text='API name of the field that will store the result of the rollup on the Parent Object, e.g. AnnualRevenue') 
    dlrs_calculate_job_id = models.CharField(db_column='dlrs__CalculateJobId__c', custom=True, max_length=18, verbose_name='Calculate Job Id', help_text='This field is used by the system when using the Calculate button to track if a calculation job is already running. Clear this field if the system reports the calculate job is already running and you known this is not the case.', blank=True, null=True) 
    dlrs_calculation_mode = models.CharField(db_column='dlrs__CalculationMode__c', custom=True, max_length=255, verbose_name='Calculation Mode', default=models.DEFAULTED_ON_CREATE, help_text='Realtime and Schedule modes require an Apex Trigger to be deployed for the Child Object. Click Manage Child Trigger button to deploy.', choices=[('Realtime', 'Realtime'), ('Scheduled', 'Scheduled'), ('Developer', 'Developer'), ('Process Builder', 'Process Builder')], blank=True, null=True) 
    dlrs_calculation_sharing_mode = models.CharField(db_column='dlrs__CalculationSharingMode__c', custom=True, max_length=255, verbose_name='Calculation Sharing Mode', default=models.DEFAULTED_ON_CREATE, help_text='Determines if the Sharing Rules defined on the Child Object are considered when calculating the rollup. Default is User.', choices=[('User', 'User'), ('System', 'System')], blank=True, null=True) 
    dlrs_child_object = models.CharField(db_column='dlrs__ChildObject__c', custom=True, max_length=80, verbose_name='Child Object', help_text='API name of the Child Object, e.g. Opportunity') 
    dlrs_concatenate_delimiter = models.CharField(db_column='dlrs__ConcatenateDelimiter__c', custom=True, max_length=32, verbose_name='Concatenate Delimiter', help_text='Enter the character or characters to delimit values in the Field to Aggregate when rolling up text values into the Aggregate Result Field, enter BR() for new line. Only applies when using Concatenate operation.', blank=True, null=True) 
    dlrs_description = models.TextField(db_column='dlrs__Description__c', custom=True, verbose_name='Description', blank=True, null=True) 
    dlrs_field_to_aggregate = models.CharField(db_column='dlrs__FieldToAggregate__c', custom=True, max_length=80, verbose_name='Field to Aggregate', help_text='API name of the field on the Child Object that contains the value to rollup, e.g. Amount') 
    dlrs_field_to_order_by = models.CharField(db_column='dlrs__FieldToOrderBy__c', custom=True, max_length=255, verbose_name='Field to Order By', help_text='Only applicable when using the Concatenate, Concatenate Distinct, Last and First aggregate operations. Supports multiple fields (comma separated) with optional ASC/DESC and/or NULLS FIRST/LAST.', blank=True, null=True) 
    dlrs_parent_object = models.CharField(db_column='dlrs__ParentObject__c', custom=True, max_length=80, verbose_name='Parent Object', help_text='API name of the Parent Object, e.g. Account') 
    dlrs_relationship_criteria_fields = models.TextField(db_column='dlrs__RelationshipCriteriaFields__c', custom=True, verbose_name='Relationship Criteria Fields', help_text="If you have specified a relationship criteria, you must confirm the fields referenced by it here on separate lines, for example for criteria StageName = 'Won' list StageName in this field. You do not need to specify the Field to Aggregate field however.", blank=True, null=True) 
    dlrs_relationship_criteria = models.CharField(db_column='dlrs__RelationshipCriteria__c', custom=True, max_length=255, verbose_name='Relationship Criteria', help_text='SOQL WHERE clause applied when querying Child Object records, e.g. Amount > 200', blank=True, null=True) 
    dlrs_relationship_field = models.CharField(db_column='dlrs__RelationshipField__c', custom=True, max_length=80, verbose_name='Relationship Field', help_text='API name of the Lookup field on the Child Object relating to the Parent Object, e.g. AccountId') 
    dlrs_row_limit = models.DecimalField(db_column='dlrs__RowLimit__c', custom=True, max_digits=5, decimal_places=0, verbose_name='Row Limit', help_text='Limits the number of rows used in the rollup. Applies only to the Last and Concatenate operators.', blank=True, null=True) 
    dlrs_test_code_see_all_data = models.BooleanField(db_column='dlrs__TestCodeSeeAllData__c', custom=True, verbose_name='Test Code See All Data', default=models.DEFAULTED_ON_CREATE, help_text='Only use this option as a last resort to get the generated test or custom test code working. It is generally considered bad practice to make your test dependent on org data. Always try to create test data in the test code if possible.') 
    dlrs_test_code = models.TextField(db_column='dlrs__TestCode__c', custom=True, verbose_name='Test Code', help_text='This tool utilises a dynamically generated Apex Trigger and by default a generated Apex Test. Use this field if instructed by a developer to replace the generated test code. For more information see the tools Wiki on GitHub.', blank=True, null=True) 
    dlrs_unique_name = models.CharField(db_column='dlrs__UniqueName__c', custom=True, max_length=80, verbose_name='Lookup Rollup Summary Unique Name', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummary__c'
        verbose_name = 'Lookup Rollup Summary'
        verbose_name_plural = 'Lookup Rollup Summaries'
        # keyPrefix = 'a08'

